(()=>{"use strict";var t,e,n,o,r,i,s,a,c,h,u,f,p,l,y,d,v,g,w,m,b,A,x,k,S,E,C,_,O,j={426:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],s=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([h]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var o,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function s(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],r=0;r<t.length;r++){var a=t[r],c=e.base?a[0]+e.base:a[0],h=n[c]||0,u="".concat(c," ").concat(h);n[c]=h+1;var f=s(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(p)):i.push({identifier:u,updater:d(p,e),references:1}),o.push(u)}return o}function c(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var s=r(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function f(t,e,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=u(e,r);else{var i=document.createTextNode(r),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function p(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var l=null,y=0;function d(t,e){var n,o,r;if(e.singleton){var i=y++;n=l||(l=c(e)),o=f.bind(null,n,i,!1),r=f.bind(null,n,i,!0)}else n=c(e),o=p.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var r=s(n[o]);i[r].references--}for(var c=a(t,e),h=0;h<n.length;h++){var u=s(n[h]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=c}}}},403:(t,e,n)=>{t.exports=n.p+"557374f791944ecf6c01.png"},657:(t,e,n)=>{t.exports=n.p+"a98f39017db8c62ba701.png"},446:(t,e,n)=>{t.exports=n.p+"82300f5733384f973929.png"},18:(t,e,n)=>{t.exports=n.p+"4233d78f478d9acd0230.png"},734:(t,e,n)=>{t.exports=n.p+"ff33312c29e171e364d7.png"}},P={};function M(t){if(P[t])return P[t].exports;var e=P[t]={id:t,exports:{}};return j[t](e,e.exports,M),e.exports}M.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return M.d(e,{a:e}),e},M.d=(t,e)=>{for(var n in e)M.o(e,n)&&!M.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},M.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),M.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;M.g.importScripts&&(t=M.g.location+"");var e=M.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),M.p=t})(),e=function(t,e,n,o,r,i){null!=r&&(t.fillStyle=r),t.fillText(e,n,o,i)},n=function(t){return t/360*Math.PI*2},o=function(t,e){return Array.from({length:t}).map(e)},t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},r=function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)},i=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t}(),s=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.new=function(t,n){return void 0===t&&(t=0),void 0===n&&(n=-1),new e(t,n)},e.fromAngle=function(t){return new e(Math.cos(t),Math.sin(t))},Object.defineProperty(e.prototype,"angle",{get:function(){var t=Math.asin(this.y);return this.x>=0?t:Math.PI-t},enumerable:!1,configurable:!0}),e.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},e}(i),a=function(){function t(){}return t.prototype.update=function(){},t.prototype.ready=function(){return!0},t}(),c=function(t){function e(e,n,o){var r,a,c,h,u=o.x,f=void 0===u?0:u,p=o.y,l=void 0===p?0:p,y=o.w,d=o.h,v=o.life,g=void 0===v?0:v,w=t.call(this)||this;return w.state=e,w.position=new i(f,l),w.vector=s.new(),w.width=y,w.height=d,w.life=g,r=w,a=void 0,h=function(){var t;return function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,(o=n,new Promise((function(t,e){var n=new Image;n.addEventListener("load",(function(){t(n)})),n.src=o})))];case 1:return t.image=e.sent(),[2]}var o}))},new((c=void 0)||(c=Promise))((function(t,e){function n(t){try{i(h.next(t))}catch(t){e(t)}}function o(t){try{i(h.throw(t))}catch(t){e(t)}}function i(e){var r;e.done?t(e.value):(r=e.value,r instanceof c?r:new c((function(t){t(r)}))).then(n,o)}i((h=h.apply(r,a||[])).next())})),w}return r(e,t),e.prototype.setVector=function(t,e){this.vector.set(t,e)},e.prototype.setVectorFromAngle=function(t){this.vector.setAngle(t)},e.prototype.draw=function(){if(this.image){var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)}},e.prototype.rotationDraw=function(){if(this.image){this.state.ctx.save(),this.state.ctx.translate(this.position.x,this.position.y),this.state.ctx.rotate(this.vector.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.state.ctx.restore()}},e.prototype.update=function(){},e.prototype.ready=function(){return!!this.image},e}(a),h=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),u="default",f=function(t){function e(e,n,o,r){var i=t.call(this,e,n,o)||this;return i.speed=3,i.frame=0,i.type=u,i.shotArray=r,i}return h(e,t),e.prototype.set=function(t,e,n,o){void 0===n&&(n=1),void 0===o&&(o=u),this.position.set(t,e),this.life=n,this.type=o,this.frame=0},e.prototype.fire=function(t,e){void 0===t&&(t=0),void 0===e&&(e=1);for(var n=0,o=this.shotArray;n<o.length;n++){var r=o[n];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(5),r.setVector(t,e);break}}},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case u:50==this.frame&&this.fire(),this.position.y-this.height>this.state.ctx.canvas.height&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed}this.draw(),this.frame++}},e}(c),p=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),l=function(t){function e(e,n,o,r,i,s){void 0===s&&(s="#ff1166");var a=t.call(this)||this;return a.life=!1,a.fires=[],a.startTime=0,a.ctx=e,a.radius=n,a.count=o,a.size=r,a.timeRange=i,a.color=s,a}return p(e,t),e.prototype.set=function(t,e){var n=this;this.fires=o(this.count,(function(){return{position:new i(t,e),vector:s.fromAngle(Math.random()*Math.PI*2),size:(.5*Math.random()+.5)*n.size}})),this.life=!0,this.startTime=Date.now()},e.prototype.update=function(){if(this.life){this.ctx.fillStyle=this.color,this.ctx.globalAlpha=.5;for(var t=(Date.now()-this.startTime)/1e3,e=1-(h=1-Math.min(t/this.timeRange,1))*h*h*h,n=1-e,o=0,r=this.fires;o<r.length;o++){var i=r[o],s=this.radius*e,a=i.position.x+i.vector.x*s,c=i.position.y+i.vector.y*s;this.ctx.fillRect(a-i.size*n/2,c-i.size*n/2,i.size*n,i.size*n)}e>=1&&(this.life=!1)}var h},e}(a),y=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),d=function(t){function e(e,n,o,r){var i=r.shot,s=r.singleShot,a=t.call(this,e,n,o)||this;return a.speed=3,a.shotCheckCounter=0,a.shotInterval=10,a.isComing=!1,a.state=e,a.shotArray=i,a.singleShotArray=s,a}return y(e,t),e.prototype.update=function(){if(!(this.life<=0)&&this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var e=(t-this.comingStart)/1e3,o=this.comingStartPosition.y-50*e;o<=this.comingEndPosition.y&&(this.isComing=!1,o=this.comingEndPosition.y),this.position.set(this.position.x,o),t%100<50&&(this.state.ctx.globalAlpha=.5)}else if(this.state.key.arrowLeft&&(this.position.x-=this.speed),this.state.key.arrowRight&&(this.position.x+=this.speed),this.state.key.arrowUp&&(this.position.y-=this.speed),this.state.key.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.state.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.state.ctx.canvas.height)),this.state.key.z&&this.shotCheckCounter>=0){for(var r=0,i=this.shotArray;r<i.length;r++){var s=i[r];if(s.life<=0){s.set(this.position.x,this.position.y),s.setPower(2),this.shotCheckCounter=-this.shotInterval;break}}for(var a=0;a<this.singleShotArray.length;a+=2)if(this.singleShotArray[a].life<=0&&this.singleShotArray[a+1].life<=0){var c=n(280),h=n(260);this.singleShotArray[a].set(this.position.x,this.position.y),this.singleShotArray[a].setVectorFromAngle(c),this.singleShotArray[a+1].set(this.position.x,this.position.y),this.singleShotArray[a+1].setVectorFromAngle(h),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.state.ctx.globalAlpha=1}},e.prototype.setComing=function(t,e,n,o){this.life=1,this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new i(t,e),this.comingEndPosition=new i(n,o)},e}(c),v=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),g=function(t){function e(e,n,o){var r=t.call(this,e,n,o)||this;return r.speed=7,r.power=1,r.targetArray=[],r.explosionArray=[],r}return v(e,t),e.prototype.set=function(t,e){this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.setExplosions=function(t){this.explosionArray=t},e.prototype.update=function(){var t=this;this.life<=0||((this.position.y+this.height<0||this.position.y-this.height>this.state.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){if(!(e.life<=0)&&t.position.distance(e.position)<=(t.width+e.width)/4){if(e instanceof d&&e.isComing)return;if(e.life-=t.power,e.life<=0)for(var n=0,o=t.explosionArray;n<o.length;n++){var r=o[n];if(!r.life){r.set(e.position.x,e.position.y);break}}e instanceof f&&t.state.gameScore.add(100),t.life=0}})),this.rotationDraw())},e}(c),w=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),m=function(){function t(){this.score=0}return t.prototype.add=function(t){this.score=Math.min(this.score+t,99999)},t.prototype.reset=function(){this.score=0},t.prototype.display=function(){return t=this.score,(new Array(5).join("0")+t).slice(-5);var t},t}(),b=M(446),A=M(18),x=M(734),k=M(657),S=M(403),E=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var o=Array(t),r=0;for(e=0;e<n;e++)for(var i=arguments[e],s=0,a=i.length;s<a;s++,r++)o[r]=i[s];return o},C=M(379),_=M.n(C),O=M(426),_()(O.Z,{insert:"head",singleton:!1}),O.Z.locals,window.addEventListener("load",(function(){return t=void 0,n=void 0,i=function(){function t(){var o,s,c;r.globalAlpha=1,o=r,s=n.width,c=n.height,o.fillStyle="#eeeeee",o.fillRect(0,0,s,c),r.font="bold 24px monospace",e(r,i.gameScore.display(),30,50,"#111111"),C.update(),a.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var n,r,i,s,a,c,h,u,p,y,v,C;return function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(_){return(n=document.querySelector("#screen")).width=640,n.height=480,r=n.getContext("2d"),i=function(t){return{ctx:t,gameScore:new m,key:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}}}(r),s=!1,a=[],c=o(10,(function(){return new g(i,A,{w:32,h:32})})),h=o(20,(function(){return new g(i,x,{w:32,h:32})})),a.push.apply(a,E(c,h)),u=new d(i,b,{w:64,h:64},{shot:c,singleShot:h}),a.push(u),u.setComing(320,480,320,380),p=o(50,(function(){return new g(i,S,{w:48,h:48})})),a.push.apply(a,p),y=o(10,(function(){return new f(i,k,{w:48,h:48},p)})),a.push.apply(a,y),v=o(10,(function(){return new l(r,100,15,40,1)})),a.push.apply(a,v),E(c,h).forEach((function(t){t.setTargets(y),t.setExplosions(v)})),p.forEach((function(t){t.setTargets([u]),t.setExplosions(v)})),(C=new w).add("intro",(function(t){t>2&&C.use("invade")})),C.add("invade",(function(t){if(0==C.frame)for(var e=0,n=y;e<n.length;e++){var o=n[e];if(o.life<=0){o.set(320,-o.height,2,"default"),o.setVector(0,1);break}}else 100===C.frame&&C.use("invade");u.life<=0&&C.use("gameover")})),C.add("gameover",(function(t){var n=640-2*C.frame%960;r.font="bold 72px sans-serif",e(r,"GAME OVER",n,240,"#ff0000",320),s&&(s=!1,i.gameScore.reset(),u.setComing(320,530,320,380),C.use("intro"))})),C.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":i.key.arrowLeft=!0;break;case"ArrowRight":i.key.arrowRight=!0;break;case"ArrowUp":i.key.arrowUp=!0;break;case"ArrowDown":i.key.arrowDown=!0;break;case"z":i.key.z=!0;break;case"Enter":u.life<=0&&(s=!0)}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":i.key.arrowLeft=!1;break;case"ArrowRight":i.key.arrowRight=!1;break;case"ArrowUp":i.key.arrowUp=!1;break;case"ArrowDown":i.key.arrowDown=!1;break;case"z":i.key.z=!1}})),function e(){a.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}))},new((r=void 0)||(r=Promise))((function(e,o){function s(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(t){t(n)}))).then(s,a)}c((i=i.apply(t,n||[])).next())}));var t,n,r,i}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,