(()=>{"use strict";var t,e,n,i,o,r,s,a,c,h,u,f,p,l,d,y,w,v,g,m,b,A,x,S,C,E={426:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),o=n.n(i),r=n(645),s=n.n(r)()(o());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);i&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,o=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return n}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[r].concat(u).concat([h]).join("\n")}return[r].join("\n")}},379:(t,e,n)=>{var i,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),r=[];function s(t){for(var e=-1,n=0;n<r.length;n++)if(r[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},i=[],o=0;o<t.length;o++){var a=t[o],c=e.base?a[0]+e.base:a[0],h=n[c]||0,u="".concat(c," ").concat(h);n[c]=h+1;var f=s(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(r[f].references++,r[f].updater(p)):r.push({identifier:u,updater:y(p,e),references:1}),i.push(u)}return i}function c(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function f(t,e,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function p(t,e,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var l=null,d=0;function y(t,e){var n,i,o;if(e.singleton){var r=d++;n=l||(l=c(e)),i=f.bind(null,n,r,!1),o=f.bind(null,n,r,!0)}else n=c(e),i=p.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var o=s(n[i]);r[o].references--}for(var c=a(t,e),h=0;h<n.length;h++){var u=s(n[h]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}n=c}}}},403:(t,e,n)=>{t.exports=n.p+"557374f791944ecf6c01.png"},657:(t,e,n)=>{t.exports=n.p+"a98f39017db8c62ba701.png"},446:(t,e,n)=>{t.exports=n.p+"82300f5733384f973929.png"},18:(t,e,n)=>{t.exports=n.p+"4233d78f478d9acd0230.png"},734:(t,e,n)=>{t.exports=n.p+"ff33312c29e171e364d7.png"}},k={};function _(t){if(k[t])return k[t].exports;var e=k[t]={id:t,exports:{}};return E[t](e,e.exports,_),e.exports}_.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return _.d(e,{a:e}),e},_.d=(t,e)=>{for(var n in e)_.o(e,n)&&!_.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},_.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),_.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;_.g.importScripts&&(t=_.g.location+"");var e=_.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),_.p=t})(),e=function(t){return t/360*Math.PI*2},n=function(t,e){return Array.from({length:t}).map(e)},t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},i=function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)},o=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t}(),r=function(t){function e(e,n){return t.call(this,e,n)||this}return i(e,t),e.new=function(t,n){return void 0===t&&(t=0),void 0===n&&(n=-1),new e(t,n)},e.fromAngle=function(t){return new e(Math.cos(t),Math.sin(t))},Object.defineProperty(e.prototype,"angle",{get:function(){var t=Math.asin(this.y);return this.x>=0?t:Math.PI-t},enumerable:!1,configurable:!0}),e.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},e}(o),s=function(){function t(t,e,n){var i,s,a,c,h=n.x,u=void 0===h?0:h,f=n.y,p=void 0===f?0:f,l=n.w,d=n.h,y=n.life,w=void 0===y?0:y;this.ctx=t,this.position=new o(u,p),this.vector=r.new(),this.width=l,this.height=d,this.life=w,i=this,s=void 0,c=function(){var t;return function(t,e){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(n){switch(n.label){case 0:return t=this,[4,(i=e,new Promise((function(t,e){var n=new Image;n.addEventListener("load",(function(){t(n)})),n.src=i})))];case 1:return t.image=n.sent(),[2]}var i}))},new((a=void 0)||(a=Promise))((function(t,e){function n(t){try{r(c.next(t))}catch(t){e(t)}}function o(t){try{r(c.throw(t))}catch(t){e(t)}}function r(e){var i;e.done?t(e.value):(i=e.value,i instanceof a?i:new a((function(t){t(i)}))).then(n,o)}r((c=c.apply(i,s||[])).next())}))}return t.prototype.setVector=function(t,e){this.vector.set(t,e)},t.prototype.setVectorFromAngle=function(t){this.vector.setAngle(t)},t.prototype.draw=function(){if(this.image){var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)}},t.prototype.rotationDraw=function(){if(this.image){this.ctx.save(),this.ctx.translate(this.position.x,this.position.y),this.ctx.rotate(this.vector.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.ctx.restore()}},t.prototype.update=function(){},t.prototype.ready=function(){return!!this.image},t}(),a=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),c="default",h=function(t){function e(e,n,i,o){var r=t.call(this,e,n,i)||this;return r.speed=3,r.frame=0,r.type=c,r.shotArray=o,r}return a(e,t),e.prototype.set=function(t,e,n,i){void 0===n&&(n=1),void 0===i&&(i=c),this.position.set(t,e),this.life=n,this.type=i,this.frame=0},e.prototype.fire=function(t,e){void 0===t&&(t=0),void 0===e&&(e=1);for(var n=0,i=this.shotArray;n<i.length;n++){var o=i[n];if(o.life<=0){o.set(this.position.x,this.position.y),o.setSpeed(5),o.setVector(t,e);break}}},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case c:50==this.frame&&this.fire(),this.position.y-this.height>this.ctx.canvas.height&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed}this.draw(),this.frame++}},e}(s),u=function(){function t(t,e,n,i,o,r){void 0===r&&(r="#ff1166"),this.life=!1,this.fires=[],this.startTime=0,this.ctx=t,this.radius=e,this.count=n,this.size=i,this.timeRange=o,this.color=r}return t.prototype.set=function(t,e){this.fires=n(this.count,(function(){return{position:new o(t,e),vector:r.fromAngle(Math.random()*Math.PI*2)}})),this.life=!0,this.startTime=Date.now()},t.prototype.update=function(){if(this.life){this.ctx.fillStyle=this.color,this.ctx.globalAlpha=.5;for(var t=(Date.now()-this.startTime)/1e3,e=Math.min(t/this.timeRange,1),n=0,i=this.fires;n<i.length;n++){var o=i[n],r=this.radius*e,s=o.position.x+o.vector.x*r,a=o.position.y+o.vector.y*r;this.ctx.fillRect(s-this.size/2,a-this.size/2,this.size,this.size)}e>=1&&(this.life=!1)}},t}(),f=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),p=function(t){function n(e,n,i,o,r){var s=r.shot,a=r.singleShot,c=t.call(this,n,i,o)||this;return c.speed=3,c.shotCheckCounter=0,c.shotInterval=10,c.isComing=!1,c.state=e,c.shotArray=s,c.singleShotArray=a,c}return f(n,t),n.prototype.update=function(){if(this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var n=(t-this.comingStart)/1e3,i=this.comingStartPosition.y-50*n;i<=this.comingEndPosition.y&&(this.isComing=!1,i=this.comingEndPosition.y),this.position.set(this.position.x,i),t%100<50&&(this.ctx.globalAlpha=.5)}else if(this.state.isKeyDown.arrowLeft&&(this.position.x-=this.speed),this.state.isKeyDown.arrowRight&&(this.position.x+=this.speed),this.state.isKeyDown.arrowUp&&(this.position.y-=this.speed),this.state.isKeyDown.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.ctx.canvas.height)),this.state.isKeyDown.z&&this.shotCheckCounter>=0){for(var o=0,r=this.shotArray;o<r.length;o++){var s=r[o];if(s.life<=0){s.set(this.position.x,this.position.y),s.setPower(2),this.shotCheckCounter=-this.shotInterval;break}}for(var a=0;a<this.singleShotArray.length;a+=2)if(this.singleShotArray[a].life<=0&&this.singleShotArray[a+1].life<=0){var c=e(280),h=e(260);this.singleShotArray[a].set(this.position.x,this.position.y),this.singleShotArray[a].setVectorFromAngle(c),this.singleShotArray[a+1].set(this.position.x,this.position.y),this.singleShotArray[a+1].setVectorFromAngle(h),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.ctx.globalAlpha=1}},n.prototype.setComing=function(t,e,n,i){this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new o(t,e),this.comingEndPosition=new o(n,i)},n}(s),l=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),d=function(t){function e(e,n,i){var o=t.call(this,e,n,i)||this;return o.speed=7,o.power=1,o.targetArray=[],o.explosionArray=[],o}return l(e,t),e.prototype.set=function(t,e){this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.setExplosions=function(t){this.explosionArray=t},e.prototype.update=function(){var t=this;this.life<=0||((this.position.y+this.height<0||this.position.y-this.height>this.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){if(!(e.life<=0)&&t.position.distance(e.position)<=(t.width+e.width)/4){if(e.life-=t.power,e.life<=0)for(var n=0,i=t.explosionArray;n<i.length;n++){var o=i[n];if(!o.life){o.set(e.position.x,e.position.y);break}}t.life=0}})),this.rotationDraw())},e}(s),y=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),w=_(446),v=_(18),g=_(734),m=_(657),b=_(403),A=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i},x=_(379),S=_.n(x),C=_(426),S()(C.Z,{insert:"head",singleton:!1}),C.Z.locals,window.addEventListener("load",(function(){return t=void 0,e=void 0,o=function(){function t(){var n,i,s;o.globalAlpha=1,n=o,i=e.width,s=e.height,n.fillStyle="#eeeeee",n.fillRect(0,0,i,s),S.update(),r.forEach((function(t){return t.update()})),x.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var e,i,o,r,s,a,c,f,l,x,S;return function(t,e){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(C){return e=document.querySelector("#screen"),i={isKeyDown:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}},e.width=640,e.height=480,o=e.getContext("2d"),r=[],s=n(10,(function(){return new d(o,v,{w:32,h:32})})),a=n(20,(function(){return new d(o,g,{w:32,h:32})})),r.push.apply(r,A(s,a)),c=new p(i,o,w,{w:64,h:64},{shot:s,singleShot:a}),r.push(c),c.setComing(320,480,320,380),f=n(50,(function(){return new d(o,b,{w:48,h:48})})),r.push.apply(r,f),l=n(10,(function(){return new h(o,m,{w:48,h:48},f)})),r.push.apply(r,l),x=n(10,(function(){return new u(o,50,15,30,.25)})),A(s,a).forEach((function(t){t.setTargets(l),t.setExplosions(x)})),(S=new y).add("intro",(function(t){t>2&&S.use("invade")})),S.add("invade",(function(t){if(0==S.frame)for(var e=0,n=l;e<n.length;e++){var i=n[e];if(i.life<=0){i.set(320,-i.height,2,"default"),i.setVector(0,1);break}}else 100===S.frame&&S.use("invade")})),S.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":i.isKeyDown.arrowLeft=!0;break;case"ArrowRight":i.isKeyDown.arrowRight=!0;break;case"ArrowUp":i.isKeyDown.arrowUp=!0;break;case"ArrowDown":i.isKeyDown.arrowDown=!0;break;case"z":i.isKeyDown.z=!0}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":i.isKeyDown.arrowLeft=!1;break;case"ArrowRight":i.isKeyDown.arrowRight=!1;break;case"ArrowUp":i.isKeyDown.arrowUp=!1;break;case"ArrowDown":i.isKeyDown.arrowDown=!1;break;case"z":i.isKeyDown.z=!1}})),function e(){r.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}))},new((i=void 0)||(i=Promise))((function(n,r){function s(t){try{c(o.next(t))}catch(t){r(t)}}function a(t){try{c(o.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,a)}c((o=o.apply(t,e||[])).next())}));var t,e,i,o}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,