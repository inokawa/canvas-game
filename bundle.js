(()=>{"use strict";var t,e,i,o,n,r,s,a,h,c,f,p,u,l,d,y,v,g,m,w,b,x,A,k,_,S,C,E,M,O,j,P,T,B,I,z={426:(t,e,i)=>{i.d(e,{Z:()=>a});var o=i(15),n=i.n(o),r=i(645),s=i.n(r)()(n());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,o){"string"==typeof t&&(t=[[null,t,""]]);var n={};if(o)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(n[s]=!0)}for(var a=0;a<t.length;a++){var h=[].concat(t[a]);o&&n[h[0]]||(i&&(h[2]?h[2]="".concat(i," and ").concat(h[2]):h[2]=i),e.push(h))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}t.exports=function(t){var i,o,n=(o=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var i=[],o=!0,n=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(i.push(s.value),!e||i.length!==e);o=!0);}catch(t){n=!0,r=t}finally{try{o||null==a.return||a.return()}finally{if(n)throw r}}return i}}(i,o)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,i):void 0}}(i,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=n[1],s=n[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),h="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(h," */"),f=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[r].concat(f).concat([c]).join("\n")}return[r].join("\n")}},379:(t,e,i)=>{var o,n=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),r=[];function s(t){for(var e=-1,i=0;i<r.length;i++)if(r[i].identifier===t){e=i;break}return e}function a(t,e){for(var i={},o=[],n=0;n<t.length;n++){var a=t[n],h=e.base?a[0]+e.base:a[0],c=i[h]||0,f="".concat(h," ").concat(c);i[h]=c+1;var p=s(f),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(r[p].references++,r[p].updater(u)):r.push({identifier:f,updater:y(u,e),references:1}),o.push(f)}return o}function h(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var r=i.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var s=n(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,f=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function p(t,e,i,o){var n=i?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=f(e,n);else{var r=document.createTextNode(n),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function u(t,e,i){var o=i.css,n=i.media,r=i.sourceMap;if(n?t.setAttribute("media",n):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var l=null,d=0;function y(t,e){var i,o,n;if(e.singleton){var r=d++;i=l||(l=h(e)),o=p.bind(null,i,r,!1),n=p.bind(null,i,r,!0)}else i=h(e),o=u.bind(null,i,e),n=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else n()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var i=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<i.length;o++){var n=s(i[o]);r[n].references--}for(var h=a(t,e),c=0;c<i.length;c++){var f=s(i[c]);0===r[f].references&&(r[f].updater(),r.splice(f,1))}i=h}}}},912:(t,e,i)=>{t.exports=i.p+"a22c11e4c60818a27c90.png"},321:(t,e,i)=>{t.exports=i.p+"f4a1ccee5877de288df2.png"},403:(t,e,i)=>{t.exports=i.p+"557374f791944ecf6c01.png"},657:(t,e,i)=>{t.exports=i.p+"a98f39017db8c62ba701.png"},265:(t,e,i)=>{t.exports=i.p+"fa038d64bc176df871b8.png"},446:(t,e,i)=>{t.exports=i.p+"82300f5733384f973929.png"},18:(t,e,i)=>{t.exports=i.p+"4233d78f478d9acd0230.png"},734:(t,e,i)=>{t.exports=i.p+"ff33312c29e171e364d7.png"}},R={};function D(t){if(R[t])return R[t].exports;var e=R[t]={id:t,exports:{}};return z[t](e,e.exports,D),e.exports}D.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return D.d(e,{a:e}),e},D.d=(t,e)=>{for(var i in e)D.o(e,i)&&!D.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},D.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),D.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;D.g.importScripts&&(t=D.g.location+"");var e=D.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),D.p=t})(),e=function(t,e,i,o,n,r){null!=n&&(t.fillStyle=n),t.fillText(e,i,o,r)},i=function(t){return new Promise((function(e,i){var o=new Image;o.addEventListener("load",(function(){e(o)})),o.src=t}))},o=function(t){return t/360*Math.PI*2},n=function(t,e){return Array.from({length:t}).map(e)},t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)},r=function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)},s=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.new=function(e,i){return void 0===e&&(e=0),void 0===i&&(i=-1),new t(e,i)},t.unit=function(e,i){var o=this.dot(e,i);return new t(e/o,i/o)},t.fromAngle=function(e){return new t(Math.cos(e),Math.sin(e))},t.dot=function(t,e){return function(t,e){return Math.sqrt(t*t+e*e)}(t,e)},Object.defineProperty(t.prototype,"angle",{get:function(){var t=Math.asin(this.y);return this.x>=0?t:Math.PI-t},enumerable:!1,configurable:!0}),t.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},t.prototype.distance=function(e){var i=this.x-e.x,o=this.y-e.y;return t.dot(i,o)},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.rotate=function(t){var e=Math.sin(t),i=Math.cos(t);this.x=this.x*i+this.y*-e,this.y=this.x*e+this.y*i},t}(),a=function(){function t(){}return t.prototype.ready=function(){return!0},t}(),h=function(t){function e(e,i,o){var n=o.x,r=void 0===n?0:n,a=o.y,h=void 0===a?0:a,c=o.w,f=o.h,p=o.life,u=void 0===p?0:p,l=t.call(this)||this;return l.state=e,l.position=new s(r,h),l.vector=s.new(),l.width=c,l.height=f,l.life=u,l.image=i,l}return r(e,t),e.prototype.setVector=function(t,e){this.vector.set(t,e)},e.prototype.setVectorFromAngle=function(t){this.vector.setAngle(t)},e.prototype.draw=function(){var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)},e.prototype.rotationDraw=function(){this.state.ctx.save(),this.state.ctx.translate(this.position.x,this.position.y),this.state.ctx.rotate(this.vector.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.state.ctx.restore()},e.prototype.isInvincible=function(){return!1},e.prototype.destroyed=function(){},e.prototype.ready=function(){return!!this.image},e}(a),c=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),f=function(t){function e(e,i,o,n,r){var s=t.call(this,e,i,o)||this;return s.speed=3,s.frame=0,s.type="default",s.attackTarget=n,s.shotArray=r,s}return c(e,t),e.prototype.set=function(t,e,i,o){void 0===i&&(i=1),void 0===o&&(o="default"),this.position.set(t,e),this.life=i,this.type=o,this.frame=0},e.prototype.fire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=5);for(var o=0,n=this.shotArray;o<n.length;o++){var r=n[o];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.destroyed=function(){"large"===this.type?this.state.gameScore.add(1e3):this.state.gameScore.add(100)},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case"default":100==this.frame&&this.fire(),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed;break;case"wave":if(this.frame%60==0){var t=this.attackTarget.position.x-this.position.x,e=this.attackTarget.position.y-this.position.y,i=s.unit(t,e);this.fire(i.x,i.y,4)}this.position.x+=Math.sin(this.frame/10),this.position.y+=2;break;case"large":if(this.frame%50==0)for(var o=0;o<360;o+=45){var n=o*Math.PI/180;this.fire(Math.cos(n),Math.sin(n),3)}this.position.x+=2*Math.sin((this.frame+90)/50),this.position.y+=1}this.position.y-this.height>this.state.ctx.canvas.height&&(this.life=0),this.draw(),this.frame++}},e}(h),p=function(t){function e(e,i,o,n,r,s){var a=t.call(this,e,i,o,n,r)||this;return a.mode="",a.frame=0,a.speed=3,a.homingArray=s,a}return c(e,t),e.prototype.setMode=function(t){this.mode=t},e.prototype.fire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=5);for(var o=0,n=this.shotArray;o<n.length;o++){var r=n[o];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.homingFire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=3);for(var o=0,n=this.homingArray;o<n.length;o++){var r=n[o];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.destroyed=function(){this.state.gameScore.add(15e3)},e.prototype.update=function(){if(!(this.life<=0)){switch(this.mode){case"invade":this.position.y+=this.speed,this.position.y>100&&(this.position.y=100,this.mode="floating",this.frame=0);break;case"escape":this.position.y-=this.speed,this.position.y<-this.height&&(this.life=0);break;case"floating":if(this.frame%1e3<500){if(this.frame%200>140&&this.frame%10==0){var t=this.attackTarget.position.x-this.position.x,e=this.attackTarget.position.y-this.position.y,i=s.unit(t,e);this.fire(i.x,i.y,3)}}else this.frame%50==0&&this.homingFire(0,1,3.5);this.position.x+=2*Math.cos(this.frame/100)}this.draw(),this.frame++}},e}(f),u=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),l=function(t){function e(e,i,o,n,r,s){void 0===s&&(s="#ff1166");var a=t.call(this)||this;return a.life=!1,a.fires=[],a.startTime=0,a.ctx=e,a.radius=i,a.count=o,a.size=n,a.timeRange=r,a.color=s,a}return u(e,t),e.prototype.set=function(t,e){var i=this;this.fires=n(this.count,(function(){return{position:new s(t,e),vector:s.fromAngle(Math.random()*Math.PI*2),size:(.5*Math.random()+.5)*i.size}})),this.life=!0,this.startTime=Date.now()},e.prototype.update=function(){if(this.life){this.ctx.fillStyle=this.color,this.ctx.globalAlpha=.5;for(var t=(Date.now()-this.startTime)/1e3,e=1-(c=1-Math.min(t/this.timeRange,1))*c*c*c,i=1-e,o=0,n=this.fires;o<n.length;o++){var r=n[o],s=this.radius*e,a=r.position.x+r.vector.x*s,h=r.position.y+r.vector.y*s;this.ctx.fillRect(a-r.size*i/2,h-r.size*i/2,r.size*i,r.size*i)}e>=1&&(this.life=!1)}var c},e}(a),d=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),y=function(t){function e(e,i,o,n){var r=n.shot,s=n.singleShot,a=t.call(this,e,i,o)||this;return a.speed=3,a.shotCheckCounter=0,a.shotInterval=10,a.isComing=!1,a.state=e,a.shotArray=r,a.singleShotArray=s,a}return d(e,t),e.prototype.isInvincible=function(){return this.isComing},e.prototype.update=function(){if(!(this.life<=0)&&this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var e=(t-this.comingStart)/1e3,i=this.comingStartPosition.y-50*e;i<=this.comingEndPosition.y&&(this.isComing=!1,i=this.comingEndPosition.y),this.position.set(this.position.x,i),t%100<50&&(this.state.ctx.globalAlpha=.5)}else if(this.state.key.arrowLeft&&(this.position.x-=this.speed),this.state.key.arrowRight&&(this.position.x+=this.speed),this.state.key.arrowUp&&(this.position.y-=this.speed),this.state.key.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.state.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.state.ctx.canvas.height)),this.state.key.z&&this.shotCheckCounter>=0){for(var n=0,r=this.shotArray;n<r.length;n++){var s=r[n];if(s.life<=0){s.set(this.position.x,this.position.y),s.setPower(2),this.shotCheckCounter=-this.shotInterval;break}}for(var a=0;a<this.singleShotArray.length;a+=2)if(this.singleShotArray[a].life<=0&&this.singleShotArray[a+1].life<=0){var h=o(280),c=o(260);this.singleShotArray[a].set(this.position.x,this.position.y),this.singleShotArray[a].setVectorFromAngle(h),this.singleShotArray[a+1].set(this.position.x,this.position.y),this.singleShotArray[a+1].setVectorFromAngle(c),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.state.ctx.globalAlpha=1}},e.prototype.setComing=function(t,e,i,o){this.life=1,this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new s(t,e),this.comingEndPosition=new s(i,o)},e}(h),v=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),g=function(t){function e(e,i,o){var n=t.call(this,e,i,o)||this;return n.speed=7,n.power=1,n.targetArray=[],n.explosionArray=[],n}return v(e,t),e.prototype.set=function(t,e,i,o){void 0===i&&(i=7),void 0===o&&(o=1),this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.setExplosions=function(t){this.explosionArray=t},e.prototype.hasCollision=function(t){return this.position.distance(t.position)<=(this.width+t.width)/4},e.prototype.update=function(){var t=this;this.life<=0||((this.position.x+this.width<0||this.position.x-this.width>this.state.ctx.canvas.width||this.position.y+this.height<0||this.position.y-this.height>this.state.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){if(!(e.life<=0)&&t.hasCollision(e)&&!e.isInvincible()){if(e.life-=t.power,e.life<=0){for(var i=0,o=t.explosionArray;i<o.length;i++){var n=o[i];if(!n.life){n.set(e.position.x,e.position.y);break}}e.destroyed()}t.life=0}})),this.rotationDraw())},e}(h),m=function(t){function e(e,i,o){var n=t.call(this,e,i,o)||this;return n.frame=0,n}return v(e,t),e.prototype.set=function(e,i,o,n){t.prototype.set.call(this,e,i,o,n),this.frame=0},e.prototype.update=function(){var t=this;if(!(this.life<=0)){(this.position.x+this.width<0||this.position.x-this.width>this.state.ctx.canvas.width||this.position.y+this.height<0||this.position.y-this.height>this.state.ctx.canvas.height)&&(this.life=0);var e=this.targetArray[0];if(this.frame<100){var i=s.unit(e.position.x-this.position.x,e.position.y-this.position.y);this.vector=s.unit(this.vector.x,this.vector.y);var o=this.vector.cross(i),n=Math.PI/180;o>0?this.vector.rotate(n):o<0&&this.vector.rotate(-n)}this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.targetArray.forEach((function(e){if(!(t.life<=0||e.life<=0)&&t.position.distance(e.position)<=(t.width+e.width)/4){if(e instanceof y&&!0===e.isComing)return;if(e.life-=t.power,e.life<=0){for(var i=0;i<t.explosionArray.length;++i)if(!0!==t.explosionArray[i].life){t.explosionArray[i].set(e.position.x,e.position.y);break}if(e instanceof f){var o=100;"large"===e.type&&(o=1e3),t.state.gameScore.add(o)}}t.life=0}})),this.rotationDraw(),this.frame++}},e}(g),w=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),b=function(){function t(){this.score=0}return t.prototype.add=function(t){this.score=Math.min(this.score+t,99999)},t.prototype.reset=function(){this.score=0},t.prototype.display=function(){return t=this.score,(new Array(5).join("0")+t).slice(-5);var t},t}(),x=D(446),A=D(18),k=D(734),_=D(657),S=D(321),C=D(403),E=D(912),M=D(265),O=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),j=function(t){function e(e,i,o,n){void 0===n&&(n="#ffffff");var r=t.call(this)||this;return r.position=new s(0,0),r.state=e,r.size=i,r.speed=o,r.color=n,r}return O(e,t),e.prototype.set=function(t,e){this.position.set(t,e)},e.prototype.update=function(){this.state.ctx.globalAlpha=1,this.state.ctx.fillStyle=this.color,this.position.y+=this.speed,this.state.ctx.fillRect(this.position.x-this.size/2,this.position.y-this.size/2,this.size,this.size),this.position.y+this.size>this.state.ctx.canvas.height&&(this.position.y=-this.size)},e}(a),P=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var o=Array(t),n=0;for(e=0;e<i;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,n++)o[n]=r[s];return o},T=D(379),B=D.n(T),I=D(426),B()(I.Z,{insert:"head",singleton:!1}),I.Z.locals,window.addEventListener("load",(function(){return t=void 0,r=void 0,a=function(){function t(){var i,o,n;z.globalAlpha=1,i=z,o=r.width,n=r.height,i.fillStyle="#111122",i.fillRect(0,0,o,n),z.font="bold 24px monospace",e(z,R.gameScore.display(),30,50,"#ffffff"),J.update(),F.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var r,s,a,h,c,u,d,v,O,T,B,I,z,R,D,L,U,F,V,N,q,W,Y,Z,$,G,H,J;return function(t,e){var i,o,n,r,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,o&&(n=2&r[0]?o.return:r[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,r[1])).done)return n;switch(o=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,o=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){s.label=r[1];break}if(6===r[0]&&s.label<n[1]){s.label=n[1],n=r;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(r);break}n[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],o=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(X){switch(X.label){case 0:return r=document.querySelector("#screen"),s=640,a=480,h=10,c=20,u=5,d=50,v=50,O=10,T=100,B=3,I=4,r.width=s,r.height=a,z=r.getContext("2d"),R=function(t){return{ctx:t,gameScore:new b,key:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}}}(z),D=!1,[4,Promise.all([i(x),i(A),i(k)])];case 1:return L=X.sent(),[4,Promise.all([i(_),i(S),i(C),i(E),i(M)])];case 2:return U=X.sent(),F=[],V=n(h,(function(){return new g(R,L[1],{w:32,h:32})})),N=n(2*h,(function(){return new g(R,L[2],{w:32,h:32})})),F.push.apply(F,P(V,N)),q=new y(R,L[0],{w:64,h:64},{shot:V,singleShot:N}),F.push(q),q.setComing(s/2,a,s/2,a-100),W=n(v,(function(){return new m(R,U[4],{w:32,h:32})})),Y=P(n(d,(function(){return new g(R,U[2],{w:48,h:48})})),W),F.push.apply(F,Y),Z=new p(R,U[3],{w:128,h:128},q,Y,W),$=P(n(c,(function(){return new f(R,U[0],{w:48,h:48},q,Y)})),n(u,(function(){return new f(R,U[1],{w:64,h:64},q,Y)})),[Z]),F.push.apply(F,$),G=n(O,(function(){return new l(z,100,15,40,1)})),F.push.apply(F,G),P(V,N).forEach((function(t){t.setTargets($),t.setExplosions(G)})),Y.forEach((function(t){t.setTargets([q]),t.setExplosions(G)})),H=n(T,(function(){var t=1+Math.random()*(B-1),e=1+Math.random()*(I-1),i=new j(R,t,e);return i.set(Math.random()*s,Math.random()*a),i})),F.push.apply(F,H),(J=new w).add("intro",(function(t){t>3&&J.use("invade_default_type")})),J.add("invade_default_type",(function(t){if(J.frame%30==0)for(var e=0,i=$;e<i.length;e++){var n=i[e];if(n.life<=0){J.frame%60==0?(n.set(-n.width,30,2,"default"),n.setVectorFromAngle(o(30))):(n.set(s+n.width,30,2,"default"),n.setVectorFromAngle(o(150)));break}}270===J.frame&&J.use("blank"),q.life<=0&&J.use("gameover")})),J.add("blank",(function(t){150===J.frame&&J.use("invade_wave_move_type"),q.life<=0&&J.use("gameover")})),J.add("invade_wave_move_type",(function(t){if(J.frame%50==0)for(var e=0,i=$;e<i.length;e++){var o=i[e];if(o.life<=0){J.frame<=200?o.set(.2*s,-o.height,2,"wave"):o.set(.8*s,-o.height,2,"wave");break}}450===J.frame&&J.use("invade_large_type"),q.life<=0&&J.use("gameover")})),J.add("invade_large_type",(function(t){if(100===J.frame)for(var e=c+u,i=c;i<e;i++)if($[i].life<=0){var o=$[i];o.set(s/2,-o.height,50,"large");break}500===J.frame&&J.use("invade_boss"),q.life<=0&&J.use("gameover")})),J.add("invade_boss",(function(t){0===J.frame&&(Z.set(s/2,-Z.height,250),Z.setMode("invade")),q.life<=0&&(J.use("gameover"),Z.setMode("escape")),Z.life<=0&&J.use("intro")})),J.add("gameover",(function(t){var i=s/2,o=s+i,n=s-2*J.frame%o;z.font="bold 72px sans-serif",e(z,"GAME OVER",n,a/2,"#ff0000",i),D&&(D=!1,R.gameScore.reset(),q.setComing(s/2,a+50,s/2,a-100),J.use("intro"))})),J.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":R.key.arrowLeft=!0;break;case"ArrowRight":R.key.arrowRight=!0;break;case"ArrowUp":R.key.arrowUp=!0;break;case"ArrowDown":R.key.arrowDown=!0;break;case"z":R.key.z=!0;break;case"Enter":q.life<=0&&(D=!0)}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":R.key.arrowLeft=!1;break;case"ArrowRight":R.key.arrowRight=!1;break;case"ArrowUp":R.key.arrowUp=!1;break;case"ArrowDown":R.key.arrowDown=!1;break;case"z":R.key.z=!1}})),function e(){F.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,i){function o(t){try{h(a.next(t))}catch(t){i(t)}}function n(t){try{h(a.throw(t))}catch(t){i(t)}}function h(t){var i;t.done?e(t.value):(i=t.value,i instanceof s?i:new s((function(t){t(i)}))).then(o,n)}h((a=a.apply(t,r||[])).next())}));var t,r,s,a}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jYW52YXMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvY2hhcmFjdGVycy9iYXNlLnRzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL2NoYXJhY3RlcnMvZW5lbWllcy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jaGFyYWN0ZXJzL2V4cGxvc2lvbi50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jaGFyYWN0ZXJzL3BsYXllci50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jaGFyYWN0ZXJzL3Nob3QudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvc2NlbmUudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvc3RhdGUudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvY2hhcmFjdGVycy9iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2NhbnZhcy1nYW1lL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL2FwcC50cyJdLCJuYW1lcyI6WyJkcmF3VGV4dCIsImxvYWRJbWFnZSIsImRlZ1RvUmFkIiwiYXJyYXkiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwibWVtbyIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwiYmluZCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsImNvbnRleHQiLCJ0ZXh0IiwieCIsInkiLCJjb2xvciIsIndpZHRoIiwiZmlsbFN0eWxlIiwiZmlsbFRleHQiLCJ1cmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImltYWdlIiwiSW1hZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZGVncmVlcyIsIk1hdGgiLCJQSSIsImZuIiwic2V0IiwibmV3IiwiVmVjdG9yIiwidW5pdCIsImRvdCIsImZyb21BbmdsZSIsImFuZ2xlIiwiY29zIiwic2luIiwic3FydCIsImFzaW4iLCJzZXRBbmdsZSIsImRpc3RhbmNlIiwiY3Jvc3MiLCJyb3RhdGUiLCJyYWRpYW4iLCJzIiwiYyIsInJlYWR5Iiwic3RhdGUiLCJ3IiwiaCIsImxpZmUiLCJwb3NpdGlvbiIsInZlY3RvciIsImhlaWdodCIsInNldFZlY3RvciIsInNldFZlY3RvckZyb21BbmdsZSIsImRyYXciLCJvZmZzZXRYIiwib2Zmc2V0WSIsImN0eCIsImRyYXdJbWFnZSIsInJvdGF0aW9uRHJhdyIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyZXN0b3JlIiwiaXNJbnZpbmNpYmxlIiwiZGVzdHJveWVkIiwiT2JqZWN0QmFzZSIsIm9wdGlvbiIsInNob3RzIiwic3BlZWQiLCJmcmFtZSIsInR5cGUiLCJhdHRhY2tUYXJnZXQiLCJzaG90QXJyYXkiLCJmaXJlIiwic2V0U3BlZWQiLCJnYW1lU2NvcmUiLCJhZGQiLCJ0eCIsInR5IiwidHYiLCJyIiwiY2FudmFzIiwiQ2hhcmFjdGVyIiwiaG9taW5nU2hvdHMiLCJtb2RlIiwiaG9taW5nQXJyYXkiLCJzZXRNb2RlIiwiaG9taW5nRmlyZSIsIkVuZW15IiwicmFkaXVzIiwic2l6ZSIsInRpbWVSYW5nZSIsImZpcmVzIiwic3RhcnRUaW1lIiwicmFuZG9tIiwiRGF0ZSIsIm5vdyIsImdsb2JhbEFscGhhIiwidGltZSIsInByb2dyZXNzIiwidCIsIm1pbiIsImYiLCJmaWxsUmVjdCIsInNob3QiLCJzaW5nbGVTaG90Iiwic2hvdENoZWNrQ291bnRlciIsInNob3RJbnRlcnZhbCIsImlzQ29taW5nIiwic2luZ2xlU2hvdEFycmF5IiwiY29taW5nU3RhcnQiLCJjb21pbmdTdGFydFBvc2l0aW9uIiwiY29taW5nRW5kUG9zaXRpb24iLCJqdXN0VGltZSIsImNvbWluZ1RpbWUiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwiYXJyb3dVcCIsImFycm93RG93biIsIm1heCIsInoiLCJzZXRQb3dlciIsInJhZENXIiwicmFkQ0NXIiwic2V0Q29taW5nIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJwb3dlciIsInRhcmdldEFycmF5IiwiZXhwbG9zaW9uQXJyYXkiLCJzZXRUYXJnZXRzIiwidGFyZ2V0cyIsInNldEV4cGxvc2lvbnMiLCJleHBsb3Npb25zIiwiaGFzQ29sbGlzaW9uIiwibm9ybWFsaXplZFZlY3RvciIsInJhZCIsIlBsYXllciIsInNjb3JlIiwiU2hvdCIsInNjZW5lIiwiYWN0aXZlU2NlbmUiLCJ1cGRhdGVGdW5jdGlvbiIsInVzZSIsImFjdGl2ZVRpbWUiLCJudW0iLCJyZXNldCIsImRpc3BsYXkiLCJudW1iZXIiLCJyZW5kZXIiLCJmb250Iiwib2JqZWN0cyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkNBTlZBU19XSURUSCIsIkNBTlZBU19IRUlHSFQiLCJTSE9UX01BWF9DT1VOVCIsIkVORU1ZX1NNQUxMX01BWF9DT1VOVCIsIkVORU1ZX0xBUkdFX01BWF9DT1VOVCIsIkVORU1ZX1NIT1RfTUFYX0NPVU5UIiwiSE9NSU5HX01BWF9DT1VOVCIsIkVYUExPU0lPTl9NQVhfQ09VTlQiLCJCQUNLR1JPVU5EX1NUQVJfTUFYX0NPVU5UIiwiQkFDS0dST1VORF9TVEFSX01BWF9TSVpFIiwiQkFDS0dST1VORF9TVEFSX01BWF9TUEVFRCIsImdldENvbnRleHQiLCJHYW1lU2NvcmUiLCJpbml0U3RhdGUiLCJyZXN0YXJ0IiwidmlwZXIiLCJpbWFnZXMiLCJlbmVteUltYWdlcyIsInNpbmdsZVNob3RzIiwicGxheWVyIiwiaG9taW5ncyIsIkhvbWluZyIsImVuZW15U2hvdHMiLCJib3NzIiwiQm9zcyIsImVuZW1pZXMiLCJFeHBsb3Npb24iLCJiYWNrZ3JvdW5kU3RhcnMiLCJzdGFyIiwiQmFja2dyb3VuZFN0YXIiLCJTY2VuZU1hbmFnZXIiLCJ0ZXh0V2lkdGgiLCJsb29wV2lkdGgiLCJldmVudCIsIndhaXQiLCJldmVyeSIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiJ5QkFjYUEsRUNkQUMsRUFVQUMsRUFLQUMsRSxFQ1piLEVBMERBLEVBZ0JBLEUsRUN2RUEsRUEwRkEsRSxFQ3ZGQSxFLEVDSkEsRSxFQ0NBLEVBeUVBLEVDN0VBLEVDd0JBLEUsa0JDdkJBLEUsd0VDQUlDLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUksNlFBQWdSLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDZCQUE2QixNQUFRLEdBQUcsU0FBVyxvS0FBb0ssZUFBaUIsQ0FBQyw4UUFBZ1IsV0FBYSxNQUUxMUIsVyxRQ0NBRCxFQUFPRSxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0F1RFgsT0FyREFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3hCLElBQUlDLEVBQVVOLEVBQXVCSyxHQUVyQyxPQUFJQSxFQUFLLEdBQ0EsVUFBVUUsT0FBT0YsRUFBSyxHQUFJLE1BQU1FLE9BQU9ELEVBQVMsS0FHbERBLEtBQ05FLEtBQUssS0FLVlAsRUFBS1EsRUFBSSxTQUFVQyxFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxFQUFTLE1BRzdCLElBQUlHLEVBQXlCLEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJSCxFQUFJLEVBQUdBLEVBQUlOLEtBQUtXLE9BQVFMLElBQUssQ0FFcEMsSUFBSVgsRUFBS0ssS0FBS00sR0FBRyxHQUVQLE1BQU5YLElBQ0ZlLEVBQXVCZixJQUFNLEdBS25DLElBQUssSUFBSWlCLEVBQUssRUFBR0EsRUFBS0wsRUFBUUksT0FBUUMsSUFBTSxDQUMxQyxJQUFJVixFQUFPLEdBQUdFLE9BQU9HLEVBQVFLLElBRXpCSCxHQUFVQyxFQUF1QlIsRUFBSyxNQUt0Q00sSUFDR04sRUFBSyxHQUdSQSxFQUFLLEdBQUssR0FBR0UsT0FBT0ksRUFBWSxTQUFTSixPQUFPRixFQUFLLElBRnJEQSxFQUFLLEdBQUtNLEdBTWRWLEVBQUtMLEtBQUtTLE1BSVBKLEksT0N4RFQsU0FBU2UsRUFBa0JDLEVBQUtDLElBQWtCLE1BQVBBLEdBQWVBLEVBQU1ELEVBQUlILFVBQVFJLEVBQU1ELEVBQUlILFFBQVEsSUFBSyxJQUFJTCxFQUFJLEVBQUdVLEVBQU8sSUFBSUMsTUFBTUYsR0FBTVQsRUFBSVMsRUFBS1QsSUFBT1UsRUFBS1YsR0FBS1EsRUFBSVIsR0FBTSxPQUFPVSxFQU1oTHRCLEVBQU9FLFFBQVUsU0FBZ0NNLEdBQy9DLElBYnNCWSxFQUFLUixFQWF2QlksR0FidUJaLEVBYU0sRUFIbkMsU0FBeUJRLEdBQU8sR0FBSUcsTUFBTUUsUUFBUUwsR0FBTSxPQUFPQSxFQVZ0Qk0sQ0FBakJOLEVBYUtaLElBTDdCLFNBQStCWSxFQUFLUixHQUFLLEdBQXNCLG9CQUFYZSxRQUE0QkEsT0FBT0MsWUFBWUMsT0FBT1QsR0FBakUsQ0FBZ0YsSUFBSVUsRUFBTyxHQUFRQyxHQUFLLEVBQVVDLEdBQUssRUFBV0MsT0FBS0MsRUFBVyxJQUFNLElBQUssSUFBaUNDLEVBQTdCakIsRUFBS0UsRUFBSU8sT0FBT0MsY0FBbUJHLEdBQU1JLEVBQUtqQixFQUFHa0IsUUFBUUMsUUFBb0JQLEVBQUsvQixLQUFLb0MsRUFBR0csUUFBWTFCLEdBQUtrQixFQUFLYixTQUFXTCxHQUEzRG1CLEdBQUssSUFBb0UsTUFBT1EsR0FBT1AsR0FBSyxFQUFNQyxFQUFLTSxFQUFPLFFBQVUsSUFBV1IsR0FBc0IsTUFBaEJiLEVBQVcsUUFBV0EsRUFBVyxTQUFPLFFBQVUsR0FBSWMsRUFBSSxNQUFNQyxHQUFRLE9BQU9ILEdBUmphVSxDQUFzQnBCLEVBQUtSLElBSTVGLFNBQXFDNkIsRUFBR0MsR0FBVSxHQUFLRCxFQUFMLENBQWdCLEdBQWlCLGlCQUFOQSxFQUFnQixPQUFPdEIsRUFBa0JzQixFQUFHQyxHQUFTLElBQUlDLEVBQUlkLE9BQU9lLFVBQVV2QyxTQUFTd0MsS0FBS0osR0FBR0ssTUFBTSxHQUFJLEdBQWlFLE1BQW5ELFdBQU5ILEdBQWtCRixFQUFFTSxjQUFhSixFQUFJRixFQUFFTSxZQUFZQyxNQUFnQixRQUFOTCxHQUFxQixRQUFOQSxFQUFvQnBCLE1BQU0wQixLQUFLUixHQUFjLGNBQU5FLEdBQXFCLDJDQUEyQ08sS0FBS1AsR0FBV3hCLEVBQWtCc0IsRUFBR0MsUUFBekcsR0FKM01TLENBQTRCL0IsRUFBS1IsSUFFbkksV0FBOEIsTUFBTSxJQUFJd0MsVUFBVSw2SUFGdUZDLElBY25JNUMsRUFBVWUsRUFBTSxHQUNoQjhCLEVBQWE5QixFQUFNLEdBRXZCLEdBQW9CLG1CQUFUK0IsS0FBcUIsQ0FFOUIsSUFBSUMsRUFBU0QsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVTixNQUN6RE8sRUFBTywrREFBK0RuRCxPQUFPOEMsR0FDN0VNLEVBQWdCLE9BQU9wRCxPQUFPbUQsRUFBTSxPQUNwQ0UsRUFBYVQsRUFBV1UsUUFBUXpELEtBQUksU0FBVTBELEdBQ2hELE1BQU8saUJBQWlCdkQsT0FBTzRDLEVBQVdZLFlBQWMsSUFBSXhELE9BQU91RCxFQUFRLFVBRTdFLE1BQU8sQ0FBQ3hELEdBQVNDLE9BQU9xRCxHQUFZckQsT0FBTyxDQUFDb0QsSUFBZ0JuRCxLQUFLLE1BR25FLE1BQU8sQ0FBQ0YsR0FBU0UsS0FBSyxRLGNDNUJ4QixJQUNNd0QsRUFlRkMsRUFBWSxXQUNkLElBQUlELEVBQU8sR0FDWCxPQUFPLFNBQWtCRSxHQUN2QixRQUE0QixJQUFqQkYsRUFBS0UsR0FBeUIsQ0FDdkMsSUFBSUMsRUFBY0MsU0FBU0MsY0FBY0gsR0FFekMsR0FBSUksT0FBT0MsbUJBQXFCSixhQUF1QkcsT0FBT0Msa0JBQzVELElBR0VKLEVBQWNBLEVBQVlLLGdCQUFnQkMsS0FDMUMsTUFBT0MsR0FFUFAsRUFBYyxLQUlsQkgsRUFBS0UsR0FBVUMsRUFHakIsT0FBT0gsRUFBS0UsSUFwQkEsR0F3QlpTLEVBQWMsR0FFbEIsU0FBU0MsRUFBcUJDLEdBRzVCLElBRkEsSUFBSUMsR0FBVSxFQUVMckUsRUFBSSxFQUFHQSxFQUFJa0UsRUFBWTdELE9BQVFMLElBQ3RDLEdBQUlrRSxFQUFZbEUsR0FBR29FLGFBQWVBLEVBQVksQ0FDNUNDLEVBQVNyRSxFQUNULE1BSUosT0FBT3FFLEVBR1QsU0FBU0MsRUFBYTlFLEVBQU0rRSxHQUkxQixJQUhBLElBQUlDLEVBQWEsR0FDYkMsRUFBYyxHQUVUekUsRUFBSSxFQUFHQSxFQUFJUixFQUFLYSxPQUFRTCxJQUFLLENBQ3BDLElBQUlKLEVBQU9KLEVBQUtRLEdBQ1pYLEVBQUtrRixFQUFRRyxLQUFPOUUsRUFBSyxHQUFLMkUsRUFBUUcsS0FBTzlFLEVBQUssR0FDbEQrRSxFQUFRSCxFQUFXbkYsSUFBTyxFQUMxQitFLEVBQWEsR0FBR3RFLE9BQU9ULEVBQUksS0FBS1MsT0FBTzZFLEdBQzNDSCxFQUFXbkYsR0FBTXNGLEVBQVEsRUFDekIsSUFBSUMsRUFBUVQsRUFBcUJDLEdBQzdCUyxFQUFNLENBQ1JDLElBQUtsRixFQUFLLEdBQ1ZtRixNQUFPbkYsRUFBSyxHQUNab0YsVUFBV3BGLEVBQUssS0FHSCxJQUFYZ0YsR0FDRlYsRUFBWVUsR0FBT0ssYUFDbkJmLEVBQVlVLEdBQU9NLFFBQVFMLElBRTNCWCxFQUFZL0UsS0FBSyxDQUNmaUYsV0FBWUEsRUFDWmMsUUFBU0MsRUFBU04sRUFBS04sR0FDdkJVLFdBQVksSUFJaEJSLEVBQVl0RixLQUFLaUYsR0FHbkIsT0FBT0ssRUFHVCxTQUFTVyxFQUFtQmIsR0FDMUIsSUFBSWMsRUFBUTFCLFNBQVMyQixjQUFjLFNBQy9CQyxFQUFhaEIsRUFBUWdCLFlBQWMsR0FFdkMsUUFBZ0MsSUFBckJBLEVBQVdDLE1BQXVCLENBQzNDLElBQUlBLEVBQW1ELEtBRW5EQSxJQUNGRCxFQUFXQyxNQUFRQSxHQVF2QixHQUpBdkUsT0FBT3dFLEtBQUtGLEdBQVlHLFNBQVEsU0FBVUMsR0FDeENOLEVBQU1PLGFBQWFELEVBQUtKLEVBQVdJLE9BR1AsbUJBQW5CcEIsRUFBUXNCLE9BQ2pCdEIsRUFBUXNCLE9BQU9SLE9BQ1YsQ0FDTCxJQUFJNUIsRUFBU0QsRUFBVWUsRUFBUXNCLFFBQVUsUUFFekMsSUFBS3BDLEVBQ0gsTUFBTSxJQUFJcUMsTUFBTSwyR0FHbEJyQyxFQUFPc0MsWUFBWVYsR0FHckIsT0FBT0EsRUFjVCxJQUNNVyxFQURGQyxHQUNFRCxFQUFZLEdBQ1QsU0FBaUJwQixFQUFPc0IsR0FFN0IsT0FEQUYsRUFBVXBCLEdBQVNzQixFQUNaRixFQUFVRyxPQUFPQyxTQUFTckcsS0FBSyxRQUkxQyxTQUFTc0csRUFBb0JoQixFQUFPVCxFQUFPMEIsRUFBUXpCLEdBQ2pELElBQUlDLEVBQU13QixFQUFTLEdBQUt6QixFQUFJRSxNQUFRLFVBQVVqRixPQUFPK0UsRUFBSUUsTUFBTyxNQUFNakYsT0FBTytFLEVBQUlDLElBQUssS0FBT0QsRUFBSUMsSUFJakcsR0FBSU8sRUFBTWtCLFdBQ1JsQixFQUFNa0IsV0FBV0MsUUFBVVAsRUFBWXJCLEVBQU9FLE9BQ3pDLENBQ0wsSUFBSTJCLEVBQVU5QyxTQUFTK0MsZUFBZTVCLEdBQ2xDNkIsRUFBYXRCLEVBQU1zQixXQUVuQkEsRUFBVy9CLElBQ2JTLEVBQU11QixZQUFZRCxFQUFXL0IsSUFHM0IrQixFQUFXdEcsT0FDYmdGLEVBQU13QixhQUFhSixFQUFTRSxFQUFXL0IsSUFFdkNTLEVBQU1VLFlBQVlVLElBS3hCLFNBQVNLLEVBQVd6QixFQUFPZCxFQUFTTSxHQUNsQyxJQUFJQyxFQUFNRCxFQUFJQyxJQUNWQyxFQUFRRixFQUFJRSxNQUNaQyxFQUFZSCxFQUFJRyxVQWVwQixHQWJJRCxFQUNGTSxFQUFNTyxhQUFhLFFBQVNiLEdBRTVCTSxFQUFNMEIsZ0JBQWdCLFNBR3BCL0IsR0FBNkIsb0JBQVRyQyxPQUN0Qm1DLEdBQU8sdURBQXVEaEYsT0FBTzZDLEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVWdDLE1BQWUsUUFNbElLLEVBQU1rQixXQUNSbEIsRUFBTWtCLFdBQVdDLFFBQVUxQixNQUN0QixDQUNMLEtBQU9PLEVBQU0yQixZQUNYM0IsRUFBTXVCLFlBQVl2QixFQUFNMkIsWUFHMUIzQixFQUFNVSxZQUFZcEMsU0FBUytDLGVBQWU1QixLQUk5QyxJQUFJbUMsRUFBWSxLQUNaQyxFQUFtQixFQUV2QixTQUFTL0IsRUFBU04sRUFBS04sR0FDckIsSUFBSWMsRUFDQThCLEVBQ0FiLEVBRUosR0FBSS9CLEVBQVEwQyxVQUFXLENBQ3JCLElBQUlHLEVBQWFGLElBQ2pCN0IsRUFBUTRCLElBQWNBLEVBQVk3QixFQUFtQmIsSUFDckQ0QyxFQUFTZCxFQUFvQmdCLEtBQUssS0FBTWhDLEVBQU8rQixHQUFZLEdBQzNEZCxFQUFTRCxFQUFvQmdCLEtBQUssS0FBTWhDLEVBQU8rQixHQUFZLFFBRTNEL0IsRUFBUUQsRUFBbUJiLEdBQzNCNEMsRUFBU0wsRUFBV08sS0FBSyxLQUFNaEMsRUFBT2QsR0FFdEMrQixFQUFTLFlBeEZiLFNBQTRCakIsR0FFMUIsR0FBeUIsT0FBckJBLEVBQU1pQyxXQUNSLE9BQU8sRUFHVGpDLEVBQU1pQyxXQUFXVixZQUFZdkIsR0FtRnpCa0MsQ0FBbUJsQyxJQUt2QixPQURBOEIsRUFBT3RDLEdBQ0EsU0FBcUIyQyxHQUMxQixHQUFJQSxFQUFRLENBQ1YsR0FBSUEsRUFBTzFDLE1BQVFELEVBQUlDLEtBQU8wQyxFQUFPekMsUUFBVUYsRUFBSUUsT0FBU3lDLEVBQU94QyxZQUFjSCxFQUFJRyxVQUNuRixPQUdGbUMsRUFBT3RDLEVBQU0yQyxRQUVibEIsS0FLTmxILEVBQU9FLFFBQVUsU0FBVUUsRUFBTStFLElBQy9CQSxFQUFVQSxHQUFXLElBR1IwQyxXQUEwQyxrQkFBdEIxQyxFQUFRMEMsWUFDdkMxQyxFQUFRMEMsZ0JBck9ZLElBQVQxRCxJQU1UQSxFQUFPNkMsUUFBUXZDLFFBQVVGLFVBQVlBLFNBQVM4RCxNQUFRNUQsT0FBTzZELE9BR3hEbkUsSUFnT1QsSUFBSW9FLEVBQWtCckQsRUFEdEI5RSxFQUFPQSxHQUFRLEdBQzBCK0UsR0FDekMsT0FBTyxTQUFnQnFELEdBR3JCLEdBRkFBLEVBQVVBLEdBQVcsR0FFMkIsbUJBQTVDM0csT0FBT2UsVUFBVXZDLFNBQVN3QyxLQUFLMkYsR0FBbkMsQ0FJQSxJQUFLLElBQUk1SCxFQUFJLEVBQUdBLEVBQUkySCxFQUFnQnRILE9BQVFMLElBQUssQ0FDL0MsSUFDSTRFLEVBQVFULEVBREt3RCxFQUFnQjNILElBRWpDa0UsRUFBWVUsR0FBT0ssYUFLckIsSUFGQSxJQUFJNEMsRUFBcUJ2RCxFQUFhc0QsRUFBU3JELEdBRXRDakUsRUFBSyxFQUFHQSxFQUFLcUgsRUFBZ0J0SCxPQUFRQyxJQUFNLENBQ2xELElBRUl3SCxFQUFTM0QsRUFGS3dELEVBQWdCckgsSUFJSyxJQUFuQzRELEVBQVk0RCxHQUFRN0MsYUFDdEJmLEVBQVk0RCxHQUFRNUMsVUFFcEJoQixFQUFZNkQsT0FBT0QsRUFBUSxJQUkvQkgsRUFBa0JFLE0sZ2NDelFsQkcsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVTVJLFFBRzNDLElBQUlGLEVBQVM0SSxFQUF5QkUsR0FBWSxDQUNqRDdJLEdBQUk2SSxFQUVKNUksUUFBUyxJQU9WLE9BSEE2SSxFQUFvQkQsR0FBVTlJLEVBQVFBLEVBQU9FLFFBQVMySSxHQUcvQzdJLEVBQU9FLFFDbkJmMkksRUFBb0JsRyxFQUFLM0MsSUFDeEIsSUFBSWdKLEVBQVNoSixHQUFVQSxFQUFPaUosV0FDN0IsSUFBT2pKLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBNkksRUFBb0JLLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLEdDTFJILEVBQW9CSyxFQUFJLENBQUNoSixFQUFTa0osS0FDakMsSUFBSSxJQUFJN0MsS0FBTzZDLEVBQ1hQLEVBQW9CcEcsRUFBRTJHLEVBQVk3QyxLQUFTc0MsRUFBb0JwRyxFQUFFdkMsRUFBU3FHLElBQzVFMUUsT0FBT3dILGVBQWVuSixFQUFTcUcsRUFBSyxDQUFFK0MsWUFBWSxFQUFNQyxJQUFLSCxFQUFXN0MsTUNKM0VzQyxFQUFvQlcsRUFBSSxXQUN2QixHQUEwQixpQkFBZkMsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPbkosTUFBUSxJQUFJb0osU0FBUyxjQUFiLEdBQ2QsTUFBTzdFLEdBQ1IsR0FBc0IsaUJBQVhKLE9BQXFCLE9BQU9BLFFBTGpCLEdDQXhCb0UsRUFBb0JwRyxFQUFJLENBQUNnRCxFQUFLa0UsSUFBVTlILE9BQU9lLFVBQVVnSCxlQUFlL0csS0FBSzRDLEVBQUtrRSxHLE1DQWxGLElBQUlFLEVBQ0FoQixFQUFvQlcsRUFBRU0sZ0JBQWVELEVBQVloQixFQUFvQlcsRUFBRU8sU0FBVyxJQUN0RixJQUFJeEYsRUFBV3NFLEVBQW9CVyxFQUFFakYsU0FDckMsSUFBS3NGLEdBQWF0RixJQUNiQSxFQUFTeUYsZ0JBQ1pILEVBQVl0RixFQUFTeUYsY0FBY0MsTUFDL0JKLEdBQVcsQ0FDZixJQUFJSyxFQUFVM0YsRUFBUzRGLHFCQUFxQixVQUN6Q0QsRUFBUWpKLFNBQVE0SSxFQUFZSyxFQUFRQSxFQUFRakosT0FBUyxHQUFHZ0osS0FLN0QsSUFBS0osRUFBVyxNQUFNLElBQUluRCxNQUFNLHlEQUNoQ21ELEVBQVlBLEVBQVVPLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGdkIsRUFBb0J3QixFQUFJUixHLEduQkRYbkssRUFBVyxTQUN0QjRLLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBRWEsTUFBVEQsSUFDRkosRUFBUU0sVUFBWUYsR0FFdEJKLEVBQVFPLFNBQVNOLEVBQU1DLEVBQUdDLEVBQUdFLElDekJsQmhMLEVBQVksU0FBQ21MLEdBQ3hCLE9BQU8sSUFBSUMsU0FBUSxTQUFDQyxFQUFTQyxHQUMzQixJQUFNQyxFQUFRLElBQUlDLE1BQ2xCRCxFQUFNRSxpQkFBaUIsUUFBUSxXQUM3QkosRUFBUUUsTUFFVkEsRUFBTWpCLElBQU1hLE1BSUhsTCxFQUFXLFNBQUN5TCxHQUN2QixPQUFDQSxFQUFVLElBQU9DLEtBQUtDLEdBQUssR0FJakIxTCxFQUFRLFNBQUlvQixFQUFnQnVLLEdBQ3ZDLE9BQUFqSyxNQUFNMEIsS0FBSyxDQUFFaEMsT0FBTSxJQUFJVixJQUFJaUwsSSx3VUNiN0IsYUFJRSxXQUFZaEIsRUFBV0MsR0FDckJuSyxLQUFLa0ssRUFBSUEsRUFDVGxLLEtBQUttSyxFQUFJQSxFQWtEYixPQS9DRSxZQUFBZ0IsSUFBQSxTQUFJakIsRUFBV0MsR0FDYm5LLEtBQUtrSyxFQUFJQSxFQUNUbEssS0FBS21LLEVBQUlBLEdBR0osRUFBQWlCLElBQVAsU0FBV2xCLEVBQWlCQyxHQUMxQixZQURTLElBQUFELE1BQUEsUUFBaUIsSUFBQUMsT0FBYSxHQUNoQyxJQUFJa0IsRUFBT25CLEVBQUdDLElBR2hCLEVBQUFtQixLQUFQLFNBQVlwQixFQUFXQyxHQUNyQixJQUFNcEosRUFBTWYsS0FBS3VMLElBQUlyQixFQUFHQyxHQUN4QixPQUFPLElBQUlrQixFQUFPbkIsRUFBSW5KLEVBQUtvSixFQUFJcEosSUFHMUIsRUFBQXlLLFVBQVAsU0FBaUJDLEdBQ2YsT0FBTyxJQUFJSixFQUFPTCxLQUFLVSxJQUFJRCxHQUFRVCxLQUFLVyxJQUFJRixLQUd2QyxFQUFBRixJQUFQLFNBQVdyQixFQUFXQyxHQUNwQixPRGxCZSxTQUFDRCxFQUFXQyxHQUFzQixPQUFBYSxLQUFLWSxLQUFLMUIsRUFBSUEsRUFBSUMsRUFBSUEsR0NrQmhFb0IsQ0FBSXJCLEVBQUdDLElBR2hCLHNCQUFJLG9CQUFLLEMsSUFBVCxXQUNFLElBQU0wQixFQUFPYixLQUFLYSxLQUFLN0wsS0FBS21LLEdBQzVCLE9BQU9uSyxLQUFLa0ssR0FBSyxFQUFJMkIsRUFBT2IsS0FBS0MsR0FBS1ksRyxnQ0FHeEMsWUFBQUMsU0FBQSxTQUFTTCxHQUNQekwsS0FBS21MLElBQUlILEtBQUtVLElBQUlELEdBQVFULEtBQUtXLElBQUlGLEtBR3JDLFlBQUFNLFNBQUEsU0FBU2hJLEdBQ1AsSUFBTW1HLEVBQUlsSyxLQUFLa0ssRUFBSW5HLEVBQU9tRyxFQUNwQkMsRUFBSW5LLEtBQUttSyxFQUFJcEcsRUFBT29HLEVBQzFCLE9BQU9rQixFQUFPRSxJQUFJckIsRUFBR0MsSUFHdkIsWUFBQTZCLE1BQUEsU0FBTWpJLEdBQ0osT0FBTy9ELEtBQUtrSyxFQUFJbkcsRUFBT29HLEVBQUluSyxLQUFLbUssRUFBSXBHLEVBQU9tRyxHQUc3QyxZQUFBK0IsT0FBQSxTQUFPQyxHQUNMLElBQUlDLEVBQUluQixLQUFLVyxJQUFJTyxHQUNiRSxFQUFJcEIsS0FBS1UsSUFBSVEsR0FDakJsTSxLQUFLa0ssRUFBSWxLLEtBQUtrSyxFQUFJa0MsRUFBSXBNLEtBQUttSyxHQUFLZ0MsRUFDaENuTSxLQUFLbUssRUFBSW5LLEtBQUtrSyxFQUFJaUMsRUFBSW5NLEtBQUttSyxFQUFJaUMsR0FFbkMsRUF4REEsR0EwREEsMkJBTUEsT0FIRSxZQUFBQyxNQUFBLFdBQ0UsT0FBTyxHQUVYLEVBTkEsR0FnQkEsY0FTRSxXQUNFQyxFQUNBMUIsRUFDQSxHLElBQUUsSUFBQVYsU0FBQyxJQUFHLElBQUMsRUFBRSxJQUFBQyxTQUFDLElBQUcsSUFBQyxFQUFFb0MsRUFBQyxJQUFFQyxFQUFDLElBQUUsSUFBQUMsWUFBSSxJQUFHLElBQUMsRUFIaEMsRUFLRSxjQUFPLEssT0FDUCxFQUFLSCxNQUFRQSxFQUNiLEVBQUtJLFNBQVcsSUFBSXJCLEVBQU9uQixFQUFHQyxHQUM5QixFQUFLd0MsT0FBU3RCLEVBQU9ELE1BQ3JCLEVBQUtmLE1BQVFrQyxFQUNiLEVBQUtLLE9BQVNKLEVBQ2QsRUFBS0MsS0FBT0EsRUFDWixFQUFLN0IsTUFBUUEsRSxFQW9EakIsT0F6RXdDLE9Bd0J0QyxZQUFBaUMsVUFBQSxTQUFVM0MsRUFBV0MsR0FDbkJuSyxLQUFLMk0sT0FBT3hCLElBQUlqQixFQUFHQyxJQUdyQixZQUFBMkMsbUJBQUEsU0FBbUJyQixHQUNqQnpMLEtBQUsyTSxPQUFPYixTQUFTTCxJQUd2QixZQUFBc0IsS0FBQSxXQUNFLElBQU1DLEVBQVVoTixLQUFLcUssTUFBUSxFQUN2QjRDLEVBQVVqTixLQUFLNE0sT0FBUyxFQUM5QjVNLEtBQUtzTSxNQUFNWSxJQUFJQyxVQUNibk4sS0FBSzRLLE1BQ0w1SyxLQUFLME0sU0FBU3hDLEVBQUk4QyxFQUNsQmhOLEtBQUswTSxTQUFTdkMsRUFBSThDLEVBQ2xCak4sS0FBS3FLLE1BQ0xySyxLQUFLNE0sU0FJVCxZQUFBUSxhQUFBLFdBQ0VwTixLQUFLc00sTUFBTVksSUFBSUcsT0FDZnJOLEtBQUtzTSxNQUFNWSxJQUFJSSxVQUFVdE4sS0FBSzBNLFNBQVN4QyxFQUFHbEssS0FBSzBNLFNBQVN2QyxHQUN4RG5LLEtBQUtzTSxNQUFNWSxJQUFJakIsT0FBT2pNLEtBQUsyTSxPQUFPbEIsTUFBa0IsSUFBVlQsS0FBS0MsSUFFL0MsSUFBTStCLEVBQVVoTixLQUFLcUssTUFBUSxFQUN2QjRDLEVBQVVqTixLQUFLNE0sT0FBUyxFQUM5QjVNLEtBQUtzTSxNQUFNWSxJQUFJQyxVQUNibk4sS0FBSzRLLE9BQ0pvQyxHQUNBQyxFQUNEak4sS0FBS3FLLE1BQ0xySyxLQUFLNE0sUUFHUDVNLEtBQUtzTSxNQUFNWSxJQUFJSyxXQUdqQixZQUFBQyxhQUFBLFdBQ0UsT0FBTyxHQUdULFlBQUFDLFVBQUEsYUFJQSxZQUFBcEIsTUFBQSxXQUNFLFFBQVNyTSxLQUFLNEssT0FFbEIsRUF6RUEsQ0FBd0M4QyxHLGlXQ3ZFeEMsY0FPRSxXQUNFcEIsRUFDQTFCLEVBQ0ErQyxFQUNBNUosRUFDQTZKLEdBTEYsTUFPRSxZQUFNdEIsRUFBTzFCLEVBQU8rQyxJQUFPLEssT0FibkIsRUFBQUUsTUFBZ0IsRUFDaEIsRUFBQUMsTUFBUSxFQUNsQixFQUFBQyxLQUFrQixVQVloQixFQUFLQyxhQUFlakssRUFDcEIsRUFBS2tLLFVBQVlMLEUsRUFzRXJCLE9BdEYyQixPQW1CekIsWUFBQXpDLElBQUEsU0FBSWpCLEVBQVdDLEVBQVdzQyxFQUFrQnNCLFFBQWxCLElBQUF0QixNQUFBLFFBQWtCLElBQUFzQixNQUFBLFdBQzFDL04sS0FBSzBNLFNBQVN2QixJQUFJakIsRUFBR0MsR0FDckJuSyxLQUFLeU0sS0FBT0EsRUFDWnpNLEtBQUsrTixLQUFPQSxFQUNaL04sS0FBSzhOLE1BQVEsR0FHZixZQUFBSSxLQUFBLFNBQUtoRSxFQUFpQkMsRUFBaUIwRCxRQUFsQyxJQUFBM0QsTUFBQSxRQUFpQixJQUFBQyxNQUFBLFFBQWlCLElBQUEwRCxNQUFBLEdBQ3JDLElBQWdCLFVBQUE3TixLQUFLaU8sVUFBTCxlQUFnQixDQUEzQixJQUFNOUIsRUFBQyxLQUNWLEdBQUlBLEVBQUVNLE1BQVEsRUFBRyxDQUNmTixFQUFFaEIsSUFBSW5MLEtBQUswTSxTQUFTeEMsRUFBR2xLLEtBQUswTSxTQUFTdkMsR0FDckNnQyxFQUFFZ0MsU0FBU04sR0FDWDFCLEVBQUVVLFVBQVUzQyxFQUFHQyxHQUNmLFNBS04sWUFBQXNELFVBQUEsV0FDb0IsVUFBZHpOLEtBQUsrTixLQUNQL04sS0FBS3NNLE1BQU04QixVQUFVQyxJQUFJLEtBRXpCck8sS0FBS3NNLE1BQU04QixVQUFVQyxJQUFJLE1BSTdCLFlBQUE1RyxPQUFBLFdBQ0UsS0FBSXpILEtBQUt5TSxNQUFRLEdBQWpCLENBRUEsT0FBUXpNLEtBQUsrTixNQUNYLElBQUssVUFDZSxLQUFkL04sS0FBSzhOLE9BQ1A5TixLQUFLa08sT0FFUGxPLEtBQUswTSxTQUFTeEMsR0FBS2xLLEtBQUsyTSxPQUFPekMsRUFBSWxLLEtBQUs2TixNQUN4QzdOLEtBQUswTSxTQUFTdkMsR0FBS25LLEtBQUsyTSxPQUFPeEMsRUFBSW5LLEtBQUs2TixNQUN4QyxNQUNGLElBQUssT0FDSCxHQUFJN04sS0FBSzhOLE1BQVEsSUFBTyxFQUFHLENBQ3pCLElBQU1RLEVBQUt0TyxLQUFLZ08sYUFBYXRCLFNBQVN4QyxFQUFJbEssS0FBSzBNLFNBQVN4QyxFQUNsRHFFLEVBQUt2TyxLQUFLZ08sYUFBYXRCLFNBQVN2QyxFQUFJbkssS0FBSzBNLFNBQVN2QyxFQUNsRHFFLEVBQUtuRCxFQUFPQyxLQUFLZ0QsRUFBSUMsR0FDM0J2TyxLQUFLa08sS0FBS00sRUFBR3RFLEVBQUdzRSxFQUFHckUsRUFBRyxHQUV4Qm5LLEtBQUswTSxTQUFTeEMsR0FBS2MsS0FBS1csSUFBSTNMLEtBQUs4TixNQUFRLElBQ3pDOU4sS0FBSzBNLFNBQVN2QyxHQUFLLEVBQ25CLE1BQ0YsSUFBSyxRQUNILEdBQUluSyxLQUFLOE4sTUFBUSxJQUFPLEVBQ3RCLElBQUssSUFBSXhOLEVBQUksRUFBR0EsRUFBSSxJQUFLQSxHQUFLLEdBQUksQ0FDaEMsSUFBTW1PLEVBQUtuTyxFQUFJMEssS0FBS0MsR0FBTSxJQUMxQmpMLEtBQUtrTyxLQUFLbEQsS0FBS1UsSUFBSStDLEdBQUl6RCxLQUFLVyxJQUFJOEMsR0FBSSxHQUd4Q3pPLEtBQUswTSxTQUFTeEMsR0FBd0MsRUFBbkNjLEtBQUtXLEtBQUszTCxLQUFLOE4sTUFBUSxJQUFNLElBQ2hEOU4sS0FBSzBNLFNBQVN2QyxHQUFLLEVBS25CbkssS0FBSzBNLFNBQVN2QyxFQUFJbkssS0FBSzRNLE9BQVM1TSxLQUFLc00sTUFBTVksSUFBSXdCLE9BQU85QixTQUN4RDVNLEtBQUt5TSxLQUFPLEdBR2R6TSxLQUFLK00sT0FDTC9NLEtBQUs4TixVQUVULEVBdEZBLENBQTJCYSxHQTBGM0IsY0FNRSxXQUNFckMsRUFDQTFCLEVBQ0ErQyxFQUNBNUosRUFDQTZKLEVBQ0FnQixHQU5GLE1BUUUsWUFBTXRDLEVBQU8xQixFQUFPK0MsRUFBUTVKLEVBQVE2SixJQUFNLEssT0FDMUMsRUFBS2lCLEtBQU8sR0FDWixFQUFLZixNQUFRLEVBQ2IsRUFBS0QsTUFBUSxFQUNiLEVBQUtpQixZQUFjRixFLEVBeUV2QixPQTNGMEIsT0FxQnhCLFlBQUFHLFFBQUEsU0FBUUYsR0FDTjdPLEtBQUs2TyxLQUFPQSxHQUdkLFlBQUFYLEtBQUEsU0FBS2hFLEVBQWlCQyxFQUFpQjBELFFBQWxDLElBQUEzRCxNQUFBLFFBQWlCLElBQUFDLE1BQUEsUUFBaUIsSUFBQTBELE1BQUEsR0FDckMsSUFBZ0IsVUFBQTdOLEtBQUtpTyxVQUFMLGVBQWdCLENBQTNCLElBQU05QixFQUFDLEtBQ1YsR0FBSUEsRUFBRU0sTUFBUSxFQUFHLENBQ2ZOLEVBQUVoQixJQUFJbkwsS0FBSzBNLFNBQVN4QyxFQUFHbEssS0FBSzBNLFNBQVN2QyxHQUNyQ2dDLEVBQUVnQyxTQUFTTixHQUNYMUIsRUFBRVUsVUFBVTNDLEVBQUdDLEdBQ2YsU0FLTixZQUFBNkUsV0FBQSxTQUFXOUUsRUFBaUJDLEVBQWlCMEQsUUFBbEMsSUFBQTNELE1BQUEsUUFBaUIsSUFBQUMsTUFBQSxRQUFpQixJQUFBMEQsTUFBQSxHQUMzQyxJQUFnQixVQUFBN04sS0FBSzhPLFlBQUwsZUFBa0IsQ0FBN0IsSUFBTTNDLEVBQUMsS0FDVixHQUFJQSxFQUFFTSxNQUFRLEVBQUcsQ0FDZk4sRUFBRWhCLElBQUluTCxLQUFLME0sU0FBU3hDLEVBQUdsSyxLQUFLME0sU0FBU3ZDLEdBQ3JDZ0MsRUFBRWdDLFNBQVNOLEdBQ1gxQixFQUFFVSxVQUFVM0MsRUFBR0MsR0FDZixTQUtOLFlBQUFzRCxVQUFBLFdBQ0V6TixLQUFLc00sTUFBTThCLFVBQVVDLElBQUksT0FHM0IsWUFBQTVHLE9BQUEsV0FDRSxLQUFJekgsS0FBS3lNLE1BQVEsR0FBakIsQ0FFQSxPQUFRek0sS0FBSzZPLE1BQ1gsSUFBSyxTQUNIN08sS0FBSzBNLFNBQVN2QyxHQUFLbkssS0FBSzZOLE1BQ3BCN04sS0FBSzBNLFNBQVN2QyxFQUFJLE1BQ3BCbkssS0FBSzBNLFNBQVN2QyxFQUFJLElBQ2xCbkssS0FBSzZPLEtBQU8sV0FDWjdPLEtBQUs4TixNQUFRLEdBRWYsTUFDRixJQUFLLFNBQ0g5TixLQUFLME0sU0FBU3ZDLEdBQUtuSyxLQUFLNk4sTUFDcEI3TixLQUFLME0sU0FBU3ZDLEdBQUtuSyxLQUFLNE0sU0FDMUI1TSxLQUFLeU0sS0FBTyxHQUVkLE1BQ0YsSUFBSyxXQUNILEdBQUl6TSxLQUFLOE4sTUFBUSxJQUFPLEtBQ3RCLEdBQUk5TixLQUFLOE4sTUFBUSxJQUFNLEtBQU85TixLQUFLOE4sTUFBUSxJQUFPLEVBQUcsQ0FDbkQsSUFBTVEsRUFBS3RPLEtBQUtnTyxhQUFhdEIsU0FBU3hDLEVBQUlsSyxLQUFLME0sU0FBU3hDLEVBQ2xEcUUsRUFBS3ZPLEtBQUtnTyxhQUFhdEIsU0FBU3ZDLEVBQUluSyxLQUFLME0sU0FBU3ZDLEVBQ2xEcUUsRUFBS25ELEVBQU9DLEtBQUtnRCxFQUFJQyxHQUMzQnZPLEtBQUtrTyxLQUFLTSxFQUFHdEUsRUFBR3NFLEVBQUdyRSxFQUFHLFNBR3BCbkssS0FBSzhOLE1BQVEsSUFBTyxHQUN0QjlOLEtBQUtnUCxXQUFXLEVBQUcsRUFBRyxLQUcxQmhQLEtBQUswTSxTQUFTeEMsR0FBa0MsRUFBN0JjLEtBQUtVLElBQUkxTCxLQUFLOE4sTUFBUSxLQU03QzlOLEtBQUsrTSxPQUNML00sS0FBSzhOLFVBRVQsRUEzRkEsQ0FBMEJtQixHLGlXQ3ZGMUIsY0FXRSxXQUNFL0IsRUFDQWdDLEVBQ0FqSyxFQUNBa0ssRUFDQUMsRUFDQWhGLFFBQUEsSUFBQUEsTUFBQSxXQU5GLE1BUUUsY0FBTyxLLE9BakJULEVBQUFxQyxNQUFnQixFQUlSLEVBQUE0QyxNQUFnQixHQUNoQixFQUFBQyxVQUFZLEVBYWxCLEVBQUtwQyxJQUFNQSxFQUNYLEVBQUtnQyxPQUFTQSxFQUNkLEVBQUtqSyxNQUFRQSxFQUNiLEVBQUtrSyxLQUFPQSxFQUNaLEVBQUtDLFVBQVlBLEVBQ2pCLEVBQUtoRixNQUFRQSxFLEVBc0NqQixPQS9EK0IsT0E0QjdCLFlBQUFlLElBQUEsU0FBSWpCLEVBQVdDLEdBQWYsV0FDRW5LLEtBQUtxUCxNQUFROVAsRUFBTVMsS0FBS2lGLE9BQU8sV0FBTSxPQUNuQ3lILFNBQVUsSUFBSXJCLEVBQU9uQixFQUFHQyxHQUN4QndDLE9BQVF0QixFQUFPRyxVQUFVUixLQUFLdUUsU0FBV3ZFLEtBQUtDLEdBQUssR0FDbkRrRSxNQUF1QixHQUFoQm5FLEtBQUt1RSxTQUFpQixJQUFPLEVBQUtKLFNBRTNDblAsS0FBS3lNLE1BQU8sRUFDWnpNLEtBQUtzUCxVQUFZRSxLQUFLQyxPQUd4QixZQUFBaEksT0FBQSxXQUNFLEdBQUt6SCxLQUFLeU0sS0FBVixDQUNBek0sS0FBS2tOLElBQUk1QyxVQUFZdEssS0FBS29LLE1BQzFCcEssS0FBS2tOLElBQUl3QyxZQUFjLEdBTXZCLElBSkEsSUFBTUMsR0FBUUgsS0FBS0MsTUFBUXpQLEtBQUtzUCxXQUFhLElBRXZDTSxFQUFXLEdIakNFQyxFQUU4QixFRzhCNUI3RSxLQUFLOEUsSUFBSUgsRUFBTzNQLEtBQUtvUCxVQUFXLElIaENSUyxFQUFJQSxFQUFJQSxFR2tDL0MxRCxFQUFJLEVBQU15RCxFQUNBLE1BQUE1UCxLQUFLcVAsTUFBTCxlQUFZLENBQXZCLElBQU1VLEVBQUMsS0FDSm5ILEVBQUk1SSxLQUFLa1AsT0FBU1UsRUFDbEIxRixFQUFJNkYsRUFBRXJELFNBQVN4QyxFQUFJNkYsRUFBRXBELE9BQU96QyxFQUFJdEIsRUFDaEN1QixFQUFJNEYsRUFBRXJELFNBQVN2QyxFQUFJNEYsRUFBRXBELE9BQU94QyxFQUFJdkIsRUFDdEM1SSxLQUFLa04sSUFBSThDLFNBQ1A5RixFQUFLNkYsRUFBRVosS0FBT2hELEVBQUssRUFDbkJoQyxFQUFLNEYsRUFBRVosS0FBT2hELEVBQUssRUFDbkI0RCxFQUFFWixLQUFPaEQsRUFDVDRELEVBQUVaLEtBQU9oRCxHQUlUeUQsR0FBWSxJQUNkNVAsS0FBS3lNLE1BQU8sR0hoREksSUFBQ29ELEdHbUR2QixFQS9EQSxDQUErQm5DLEcsaVdDSi9CLGNBYUUsV0FDRXBCLEVBQ0ExQixFQUNBK0MsRUFDQSxHLElBQ0VzQyxFQUFJLE9BQ0pDLEVBQVUsYUFOZCxFQVlFLFlBQU01RCxFQUFPMUIsRUFBTytDLElBQU8sSyxPQXhCckIsRUFBQUUsTUFBZ0IsRUFJaEIsRUFBQXNDLGlCQUFtQixFQUNuQixFQUFBQyxhQUFlLEdBRXZCLEVBQUFDLFVBQW9CLEVBa0JsQixFQUFLL0QsTUFBUUEsRUFDYixFQUFLMkIsVUFBWWdDLEVBQ2pCLEVBQUtLLGdCQUFrQkosRSxFQTBGM0IsT0F0SDRCLE9BK0IxQixZQUFBMUMsYUFBQSxXQUNFLE9BQU94TixLQUFLcVEsVUFHZCxZQUFBNUksT0FBQSxXQUNFLEtBQUl6SCxLQUFLeU0sTUFBUSxJQUVkek0sS0FBS3VRLGFBQ0x2USxLQUFLd1EscUJBQ0x4USxLQUFLeVEsa0JBSFIsQ0FPQSxJQUFNQyxFQUFXbEIsS0FBS0MsTUFFdEIsR0FBSXpQLEtBQUtxUSxTQUFVLENBQ2pCLElBQU1NLEdBQWNELEVBQVcxUSxLQUFLdVEsYUFBZSxJQUMvQ3BHLEVBQUluSyxLQUFLd1Esb0JBQW9CckcsRUFBaUIsR0FBYndHLEVBQ2pDeEcsR0FBS25LLEtBQUt5USxrQkFBa0J0RyxJQUM5Qm5LLEtBQUtxUSxVQUFXLEVBQ2hCbEcsRUFBSW5LLEtBQUt5USxrQkFBa0J0RyxHQUc3Qm5LLEtBQUswTSxTQUFTdkIsSUFBSW5MLEtBQUswTSxTQUFTeEMsRUFBR0MsR0FDL0J1RyxFQUFXLElBQU0sS0FDbkIxUSxLQUFLc00sTUFBTVksSUFBSXdDLFlBQWMsU0FvQi9CLEdBakJJMVAsS0FBS3NNLE1BQU1yRyxJQUFJMkssWUFDakI1USxLQUFLME0sU0FBU3hDLEdBQUtsSyxLQUFLNk4sT0FFdEI3TixLQUFLc00sTUFBTXJHLElBQUk0SyxhQUNqQjdRLEtBQUswTSxTQUFTeEMsR0FBS2xLLEtBQUs2TixPQUV0QjdOLEtBQUtzTSxNQUFNckcsSUFBSTZLLFVBQ2pCOVEsS0FBSzBNLFNBQVN2QyxHQUFLbkssS0FBSzZOLE9BRXRCN04sS0FBS3NNLE1BQU1yRyxJQUFJOEssWUFDakIvUSxLQUFLME0sU0FBU3ZDLEdBQUtuSyxLQUFLNk4sT0FFMUI3TixLQUFLME0sU0FBU3ZCLElBQ1pILEtBQUs4RSxJQUFJOUUsS0FBS2dHLElBQUloUixLQUFLME0sU0FBU3hDLEVBQUcsR0FBSWxLLEtBQUtzTSxNQUFNWSxJQUFJd0IsT0FBT3JFLE9BQzdEVyxLQUFLOEUsSUFBSTlFLEtBQUtnRyxJQUFJaFIsS0FBSzBNLFNBQVN2QyxFQUFHLEdBQUluSyxLQUFLc00sTUFBTVksSUFBSXdCLE9BQU85QixTQUczRDVNLEtBQUtzTSxNQUFNckcsSUFBSWdMLEdBQ2JqUixLQUFLbVEsa0JBQW9CLEVBQUcsQ0FDOUIsSUFBZ0IsVUFBQW5RLEtBQUtpTyxVQUFMLGVBQWdCLENBQTNCLElBQU05QixFQUFDLEtBQ1YsR0FBSUEsRUFBRU0sTUFBUSxFQUFHLENBQ2ZOLEVBQUVoQixJQUFJbkwsS0FBSzBNLFNBQVN4QyxFQUFHbEssS0FBSzBNLFNBQVN2QyxHQUNyQ2dDLEVBQUUrRSxTQUFTLEdBQ1hsUixLQUFLbVEsa0JBQW9CblEsS0FBS29RLGFBQzlCLE9BR0osSUFBSyxJQUFJOVAsRUFBSSxFQUFHQSxFQUFJTixLQUFLc1EsZ0JBQWdCM1AsT0FBUUwsR0FBSyxFQUNwRCxHQUNFTixLQUFLc1EsZ0JBQWdCaFEsR0FBR21NLE1BQVEsR0FDaEN6TSxLQUFLc1EsZ0JBQWdCaFEsRUFBSSxHQUFHbU0sTUFBUSxFQUNwQyxDQUNBLElBQU0wRSxFQUFRN1IsRUFBUyxLQUNqQjhSLEVBQVM5UixFQUFTLEtBQ3hCVSxLQUFLc1EsZ0JBQWdCaFEsR0FBRzZLLElBQUluTCxLQUFLME0sU0FBU3hDLEVBQUdsSyxLQUFLME0sU0FBU3ZDLEdBQzNEbkssS0FBS3NRLGdCQUFnQmhRLEdBQUd3TSxtQkFBbUJxRSxHQUMzQ25SLEtBQUtzUSxnQkFBZ0JoUSxFQUFJLEdBQUc2SyxJQUFJbkwsS0FBSzBNLFNBQVN4QyxFQUFHbEssS0FBSzBNLFNBQVN2QyxHQUMvRG5LLEtBQUtzUSxnQkFBZ0JoUSxFQUFJLEdBQUd3TSxtQkFBbUJzRSxHQUMvQ3BSLEtBQUttUSxrQkFBb0JuUSxLQUFLb1EsYUFDOUIsT0FNVnBRLEtBQUttUSxtQkFFTG5RLEtBQUsrTSxPQUNML00sS0FBS3NNLE1BQU1ZLElBQUl3QyxZQUFjLElBRy9CLFlBQUEyQixVQUFBLFNBQVVDLEVBQWdCQyxFQUFnQkMsRUFBY0MsR0FDdER6UixLQUFLeU0sS0FBTyxFQUNaek0sS0FBS3FRLFVBQVcsRUFDaEJyUSxLQUFLdVEsWUFBY2YsS0FBS0MsTUFDeEJ6UCxLQUFLME0sU0FBU3ZCLElBQUltRyxFQUFRQyxHQUMxQnZSLEtBQUt3USxvQkFBc0IsSUFBSW5GLEVBQU9pRyxFQUFRQyxHQUM5Q3ZSLEtBQUt5USxrQkFBb0IsSUFBSXBGLEVBQU9tRyxFQUFNQyxJQUU5QyxFQXRIQSxDQUE0QjlDLEcsaVdDQzVCLGNBTUUsV0FBWXJDLEVBQWMxQixFQUF5QitDLEdBQW5ELE1BQ0UsWUFBTXJCLEVBQU8xQixFQUFPK0MsSUFBTyxLLE9BTm5CLEVBQUFFLE1BQWdCLEVBQ2hCLEVBQUE2RCxNQUFnQixFQUNoQixFQUFBQyxZQUEyQixHQUMzQixFQUFBQyxlQUE4QixHLEVBbUUxQyxPQXZFMEIsT0FVeEIsWUFBQXpHLElBQUEsU0FBSWpCLEVBQVdDLEVBQVcwRCxFQUFtQjZELFFBQW5CLElBQUE3RCxNQUFBLFFBQW1CLElBQUE2RCxNQUFBLEdBQzNDMVIsS0FBSzBNLFNBQVN2QixJQUFJakIsRUFBR0MsR0FDckJuSyxLQUFLeU0sS0FBTyxHQUdkLFlBQUEwQixTQUFBLFNBQVNOLEdBQ0hBLEdBQVMsSUFDYjdOLEtBQUs2TixNQUFRQSxJQUdmLFlBQUFxRCxTQUFBLFNBQVNRLEdBQ0hBLEdBQVMsSUFDYjFSLEtBQUswUixNQUFRQSxJQUdmLFlBQUFHLFdBQUEsU0FBV0MsR0FDVDlSLEtBQUsyUixZQUFjRyxHQUdyQixZQUFBQyxjQUFBLFNBQWNDLEdBQ1poUyxLQUFLNFIsZUFBaUJJLEdBR3hCLFlBQUFDLGFBQUEsU0FBYXBDLEdBRVgsT0FEYTdQLEtBQUswTSxTQUFTWCxTQUFTOEQsRUFBRW5ELFlBQ3RCMU0sS0FBS3FLLE1BQVF3RixFQUFFeEYsT0FBUyxHQUcxQyxZQUFBNUMsT0FBQSxzQkFDTXpILEtBQUt5TSxNQUFRLEtBRWZ6TSxLQUFLME0sU0FBU3hDLEVBQUlsSyxLQUFLcUssTUFBUSxHQUMvQnJLLEtBQUswTSxTQUFTeEMsRUFBSWxLLEtBQUtxSyxNQUFRckssS0FBS3NNLE1BQU1ZLElBQUl3QixPQUFPckUsT0FDckRySyxLQUFLME0sU0FBU3ZDLEVBQUluSyxLQUFLNE0sT0FBUyxHQUNoQzVNLEtBQUswTSxTQUFTdkMsRUFBSW5LLEtBQUs0TSxPQUFTNU0sS0FBS3NNLE1BQU1ZLElBQUl3QixPQUFPOUIsVUFFdEQ1TSxLQUFLeU0sS0FBTyxHQUVkek0sS0FBSzBNLFNBQVN4QyxHQUFLbEssS0FBSzJNLE9BQU96QyxFQUFJbEssS0FBSzZOLE1BQ3hDN04sS0FBSzBNLFNBQVN2QyxHQUFLbkssS0FBSzJNLE9BQU94QyxFQUFJbkssS0FBSzZOLE1BRXBDN04sS0FBS3lNLEtBQU8sR0FDZHpNLEtBQUsyUixZQUFZM0wsU0FBUSxTQUFDNkosR0FDeEIsS0FBSUEsRUFBRXBELE1BQVEsSUFDVixFQUFLd0YsYUFBYXBDLEtBQU9BLEVBQUVyQyxlQUFnQixDQUU3QyxHQURBcUMsRUFBRXBELE1BQVEsRUFBS2lGLE1BQ1g3QixFQUFFcEQsTUFBUSxFQUFHLENBQ2YsSUFBZ0IsWUFBS21GLGVBQUwsZUFBcUIsQ0FBaEMsSUFBTXJOLEVBQUMsS0FDVixJQUFLQSxFQUFFa0ksS0FBTSxDQUNYbEksRUFBRTRHLElBQUkwRSxFQUFFbkQsU0FBU3hDLEVBQUcyRixFQUFFbkQsU0FBU3ZDLEdBQy9CLE9BR0owRixFQUFFcEMsWUFFSixFQUFLaEIsS0FBTyxNQUlsQnpNLEtBQUtvTixpQkFFVCxFQXZFQSxDQUEwQnVCLEdBeUUxQixjQUdFLFdBQVlyQyxFQUFjMUIsRUFBeUIrQyxHQUFuRCxNQUNFLFlBQU1yQixFQUFPMUIsRUFBTytDLElBQU8sSyxPQUg3QixFQUFBRyxNQUFnQixFLEVBd0VsQixPQXpFNEIsT0FPMUIsWUFBQTNDLElBQUEsU0FBSWpCLEVBQVdDLEVBQVcwRCxFQUFlNkQsR0FDdkMsWUFBTXZHLElBQUcsVUFBQ2pCLEVBQUdDLEVBQUcwRCxFQUFPNkQsR0FDdkIxUixLQUFLOE4sTUFBUSxHQUdmLFlBQUFyRyxPQUFBLHNCQUNFLEtBQUl6SCxLQUFLeU0sTUFBUSxHQUFqQixFQUVFek0sS0FBSzBNLFNBQVN4QyxFQUFJbEssS0FBS3FLLE1BQVEsR0FDL0JySyxLQUFLME0sU0FBU3hDLEVBQUlsSyxLQUFLcUssTUFBUXJLLEtBQUtzTSxNQUFNWSxJQUFJd0IsT0FBT3JFLE9BQ3JEckssS0FBSzBNLFNBQVN2QyxFQUFJbkssS0FBSzRNLE9BQVMsR0FDaEM1TSxLQUFLME0sU0FBU3ZDLEVBQUluSyxLQUFLNE0sT0FBUzVNLEtBQUtzTSxNQUFNWSxJQUFJd0IsT0FBTzlCLFVBRXRENU0sS0FBS3lNLEtBQU8sR0FFZCxJQUFJMUksRUFBUy9ELEtBQUsyUixZQUFZLEdBQzlCLEdBQUkzUixLQUFLOE4sTUFBUSxJQUFLLENBQ3BCLElBQU1vRSxFQUFtQjdHLEVBQU9DLEtBQzlCdkgsRUFBTzJJLFNBQVN4QyxFQUFJbEssS0FBSzBNLFNBQVN4QyxFQUNsQ25HLEVBQU8ySSxTQUFTdkMsRUFBSW5LLEtBQUswTSxTQUFTdkMsR0FFcENuSyxLQUFLMk0sT0FBU3RCLEVBQU9DLEtBQUt0TCxLQUFLMk0sT0FBT3pDLEVBQUdsSyxLQUFLMk0sT0FBT3hDLEdBQ3JELElBQU02QixFQUFRaE0sS0FBSzJNLE9BQU9YLE1BQU1rRyxHQUMxQkMsRUFBTW5ILEtBQUtDLEdBQUssSUFDbEJlLEVBQVEsRUFDVmhNLEtBQUsyTSxPQUFPVixPQUFPa0csR0FDVm5HLEVBQVEsR0FDakJoTSxLQUFLMk0sT0FBT1YsUUFBUWtHLEdBR3hCblMsS0FBSzBNLFNBQVN4QyxHQUFLbEssS0FBSzJNLE9BQU96QyxFQUFJbEssS0FBSzZOLE1BQ3hDN04sS0FBSzBNLFNBQVN2QyxHQUFLbkssS0FBSzJNLE9BQU94QyxFQUFJbkssS0FBSzZOLE1BRXhDN04sS0FBSzJSLFlBQVkzTCxTQUFRLFNBQUM2SixHQUN4QixLQUFJLEVBQUtwRCxNQUFRLEdBQUtvRCxFQUFFcEQsTUFBUSxJQUdyQixFQUFLQyxTQUFTWCxTQUFTOEQsRUFBRW5ELFlBQ3ZCLEVBQUtyQyxNQUFRd0YsRUFBRXhGLE9BQVMsRUFBRyxDQUN0QyxHQUFJd0YsYUFBYXVDLElBQ0ksSUFBZnZDLEVBQUVRLFNBQ0osT0FJSixHQURBUixFQUFFcEQsTUFBUSxFQUFLaUYsTUFDWDdCLEVBQUVwRCxNQUFRLEVBQUcsQ0FDZixJQUFLLElBQUluTSxFQUFJLEVBQUdBLEVBQUksRUFBS3NSLGVBQWVqUixTQUFVTCxFQUNoRCxJQUFvQyxJQUFoQyxFQUFLc1IsZUFBZXRSLEdBQUdtTSxLQUFlLENBQ3hDLEVBQUttRixlQUFldFIsR0FBRzZLLElBQUkwRSxFQUFFbkQsU0FBU3hDLEVBQUcyRixFQUFFbkQsU0FBU3ZDLEdBQ3BELE1BR0osR0FBSTBGLGFBQWFaLEVBQU8sQ0FDdEIsSUFBSW9ELEVBQVEsSUFDRyxVQUFYeEMsRUFBRTlCLE9BQ0pzRSxFQUFRLEtBRVYsRUFBSy9GLE1BQU04QixVQUFVQyxJQUFJZ0UsSUFHN0IsRUFBSzVGLEtBQU8sTUFHaEJ6TSxLQUFLb04sZUFDTHBOLEtBQUs4TixVQUVULEVBekVBLENBQTRCd0UsR0M3RTVCLDBCQUNFLEtBQUFDLE1BQWtDLEdBQ2xDLEtBQUFDLFlBQTRCLEtBQzVCLEtBQUFsRCxVQUFvQkUsS0FBS0MsTUFDekIsS0FBQTNCLE9BQWlCLEVBa0JuQixPQWhCRSxZQUFBTyxJQUFBLFNBQUkzTCxFQUFjK1AsR0FDaEJ6UyxLQUFLdVMsTUFBTTdQLEdBQVErUCxHQUdyQixZQUFBQyxJQUFBLFNBQUloUSxHQUNJQSxLQUFRMUMsS0FBS3VTLFFBQ25CdlMsS0FBS3dTLFlBQWN4UyxLQUFLdVMsTUFBTTdQLEdBQzlCMUMsS0FBS3NQLFVBQVlFLEtBQUtDLE1BQ3RCelAsS0FBSzhOLE9BQVMsSUFHaEIsWUFBQXJHLE9BQUEsVyxNQUNRa0wsR0FBY25ELEtBQUtDLE1BQVF6UCxLQUFLc1AsV0FBYSxJQUNuQyxRQUFoQixFQUFBdFAsS0FBS3dTLG1CQUFXLGNBQWhCeFMsS0FBbUIyUyxHQUNuQjNTLEtBQUs4TixTQUVULEVBdEJBLEdDd0JBLDBCQUNFLEtBQUF1RSxNQUFnQixFQWFsQixPQVhFLFlBQUFoRSxJQUFBLFNBQUl1RSxHQUNGNVMsS0FBS3FTLE1BQVFySCxLQUFLOEUsSUFBSTlQLEtBQUtxUyxNQUFRTyxFQUFLLFFBRzFDLFlBQUFDLE1BQUEsV0FDRTdTLEtBQUtxUyxNQUFRLEdBR2YsWUFBQVMsUUFBQSxXQUNFLE9QcEJ3QkMsRU9vQkwvUyxLQUFLcVMsT1BuQnpCLElBQUlwUixNT21CNEIsR1BuQmZaLEtBQUssS0FBTzBTLEdBQVF2USxPT21CTCxHUHBCUixJQUFDdVEsR09zQjVCLEVBZEEsRyx3YUN2QkEsY0FPRSxXQUFZekcsRUFBYzZDLEVBQWN0QixFQUFlekQsUUFBQSxJQUFBQSxNQUFBLFdBQXZELE1BQ0UsY0FBTyxLLE9BSEQsRUFBQXNDLFNBQW1CLElBQUlyQixFQUFPLEVBQUcsR0FJdkMsRUFBS2lCLE1BQVFBLEVBQ2IsRUFBSzZDLEtBQU9BLEVBQ1osRUFBS3RCLE1BQVFBLEVBQ2IsRUFBS3pELE1BQVFBLEUsRUFxQmpCLE9BakNvQyxPQWVsQyxZQUFBZSxJQUFBLFNBQUlqQixFQUFXQyxHQUNibkssS0FBSzBNLFNBQVN2QixJQUFJakIsRUFBR0MsSUFHdkIsWUFBQTFDLE9BQUEsV0FDRXpILEtBQUtzTSxNQUFNWSxJQUFJd0MsWUFBYyxFQUM3QjFQLEtBQUtzTSxNQUFNWSxJQUFJNUMsVUFBWXRLLEtBQUtvSyxNQUNoQ3BLLEtBQUswTSxTQUFTdkMsR0FBS25LLEtBQUs2TixNQUN4QjdOLEtBQUtzTSxNQUFNWSxJQUFJOEMsU0FDYmhRLEtBQUswTSxTQUFTeEMsRUFBSWxLLEtBQUttUCxLQUFPLEVBQzlCblAsS0FBSzBNLFNBQVN2QyxFQUFJbkssS0FBS21QLEtBQU8sRUFDOUJuUCxLQUFLbVAsS0FDTG5QLEtBQUttUCxNQUVIblAsS0FBSzBNLFNBQVN2QyxFQUFJbkssS0FBS21QLEtBQU9uUCxLQUFLc00sTUFBTVksSUFBSXdCLE9BQU85QixTQUN0RDVNLEtBQUswTSxTQUFTdkMsR0FBS25LLEtBQUttUCxPQUc5QixFQWpDQSxDQUFvQ3pCLEcsbU5XS3ZCLElBQUksSUFMSCxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLElBTUwsV0NUZnZKLE9BQU8yRyxpQkFBaUIsUUNvQkosa0IsT0FBQSxFLE9BQUEsRSxFQUFBLFdBa1NsQixTQUFTa0ksSXRCelRhLElBQ3RCaEosRUFHQUssRUFDQXVDLEVzQnFURU0sRUFBSXdDLFlBQWMsRXRCelRwQjFGLEVzQjBUZ0JrRCxFdEJ2VGhCN0MsRXNCdVQyQnFFLEVBQU9yRSxNdEJ0VGxDdUMsRXNCc1R5QzhCLEVBQU85QixPdEJsVDlDNUMsRUFBUU0sVXNCa1Q4QyxVdEJoVHhETixFQUFRZ0csU3NCZ1RhLEVBQUcsRXRCaFREM0YsRUFBT3VDLEdzQmtUNUJNLEVBQUkrRixLQUFPLHNCQUNYLEVBQWMvRixFQUFLWixFQUFNOEIsVUFBVTBFLFVBQVcsR0FBSSxHQUFJLFdBRXREUCxFQUFNOUssU0FFTnlMLEVBQVFsTixTQUFRLFNBQUNvRyxHQUFNLE9BQUFBLEVBQUUzRSxZQUN6QjBMLHNCQUFzQkgsRyxpcENBcFJULE9BdkJUdEUsRUFBU3pLLFNBQVNDLGNBQWMsV0FFaENrUCxFQUFlLElBQ2ZDLEVBQWdCLElBRWhCQyxFQUFpQixHQUNqQkMsRUFBd0IsR0FDeEJDLEVBQXdCLEVBQ3hCQyxFQUF1QixHQUN2QkMsRUFBbUIsR0FFbkJDLEVBQXNCLEdBRXRCQyxFQUE0QixJQUM1QkMsRUFBMkIsRUFDM0JDLEVBQTRCLEVBRWxDcEYsRUFBT3JFLE1BQVErSSxFQUNmMUUsRUFBTzlCLE9BQVN5RyxFQUNWbkcsRUFBTXdCLEVBQU9xRixXQUFXLE1BQ3hCekgsRWQxQ2lCLFNBQUNZLEdBQXlDLE9BQ2pFQSxJQUFHLEVBQ0hrQixVQUFXLElBQUk0RixFQUNmL04sSUFBSyxDQUNIMkssV0FBVyxFQUNYQyxZQUFZLEVBQ1pFLFdBQVcsRUFDWEQsU0FBUyxFQUNURyxHQUFHLElja0NTZ0QsQ0FBVS9HLEdBQ3BCZ0gsR0FBbUIsRUFFUixHQUFNekosUUFBUTFDLElBQUksQ0FDL0IxSSxFQUFVOFUsR0FDVjlVLEVBQVUsR0FDVkEsRUFBVSxNLE9BRVEsT0FMZCtVLEVBQVMsU0FLSyxHQUFNM0osUUFBUTFDLElBQUksQ0FDcEMxSSxFQUFVLEdBQ1ZBLEVBQVUsR0FDVkEsRUFBVSxHQUNWQSxFQUFVLEdBQ1ZBLEVBQVUsTSxjQUxOZ1YsRUFBYyxTQVFkbkIsRUFBd0IsR0FFeEJ0RixFQUFRck8sRUFDWitULEdBQ0EsV0FBTSxXQUFJaEIsRUFBS2hHLEVBQU84SCxFQUFPLEdBQUksQ0FBRTdILEVBQUcsR0FBSUMsRUFBRyxRQUd6QzhILEVBQWMvVSxFQUNELEVBQWpCK1QsR0FDQSxXQUFNLFdBQUloQixFQUFLaEcsRUFBTzhILEVBQU8sR0FBSSxDQUFFN0gsRUFBRyxHQUFJQyxFQUFHLFFBRS9DMEcsRUFBUXpULEtBQUksTUFBWnlULEVBQU8sRUFBU3RGLEVBQVUwRyxJQUVwQkMsRUFBUyxJQUFJbkMsRUFDakI5RixFQUNBOEgsRUFBTyxHQUNQLENBQUU3SCxFQUFHLEdBQUlDLEVBQUcsSUFDWixDQUFFeUQsS0FBTXJDLEVBQU9zQyxXQUFZb0UsSUFFN0JwQixFQUFRelQsS0FBSzhVLEdBQ2JBLEVBQU9sRCxVQUNMK0IsRUFBZSxFQUNmQyxFQUNBRCxFQUFlLEVBQ2ZDLEVBQWdCLEtBR1ptQixFQUFValYsRUFDZG1VLEdBQ0EsV0FBTSxXQUFJZSxFQUFPbkksRUFBTytILEVBQVksR0FBSSxDQUFFOUgsRUFBRyxHQUFJQyxFQUFHLFFBRWhEa0ksRUFBYSxFQUNkblYsRUFDRGtVLEdBQ0EsV0FBTSxXQUFJbkIsRUFBS2hHLEVBQU8rSCxFQUFZLEdBQUksQ0FBRTlILEVBQUcsR0FBSUMsRUFBRyxRQUVqRGdJLEdBRUx0QixFQUFRelQsS0FBSSxNQUFaeVQsRUFBZ0J3QixHQUVWQyxFQUFPLElBQUlDLEVBQ2Z0SSxFQUNBK0gsRUFBWSxHQUNaLENBQUU5SCxFQUFHLElBQUtDLEVBQUcsS0FDYitILEVBQ0FHLEVBQ0FGLEdBRUlLLEVBQVUsRUFDWHRWLEVBQ0RnVSxHQUNBLFdBQ0UsV0FBSXRFLEVBQU0zQyxFQUFPK0gsRUFBWSxHQUFJLENBQUU5SCxFQUFHLEdBQUlDLEVBQUcsSUFBTStILEVBQVFHLE1BRTVEblYsRUFDRGlVLEdBQ0EsV0FDRSxXQUFJdkUsRUFBTTNDLEVBQU8rSCxFQUFZLEdBQUksQ0FBRTlILEVBQUcsR0FBSUMsRUFBRyxJQUFNK0gsRUFBUUcsTUFDOUQsQ0FDREMsSUFFRnpCLEVBQVF6VCxLQUFJLE1BQVp5VCxFQUFnQjJCLEdBRVY3QyxFQUFhelMsRUFDakJvVSxHQUNBLFdBQU0sV0FBSW1CLEVBQVU1SCxFQUFLLElBQU8sR0FBSSxHQUFNLE1BRTVDZ0csRUFBUXpULEtBQUksTUFBWnlULEVBQWdCbEIsR0FFaEIsRUFBSXBFLEVBQVUwRyxHQUFhdE8sU0FBUSxTQUFDbUcsR0FDbENBLEVBQUUwRixXQUFXZ0QsR0FDYjFJLEVBQUU0RixjQUFjQyxNQUVsQjBDLEVBQVcxTyxTQUFRLFNBQUNtRyxHQUNsQkEsRUFBRTBGLFdBQVcsQ0FBQzBDLElBQ2RwSSxFQUFFNEYsY0FBY0MsTUFHWitDLEVBQWtCeFYsRUFBTXFVLEdBQTJCLFdBQ3ZELElBQU16RSxFQUFPLEVBQUluRSxLQUFLdUUsVUFBWXNFLEVBQTJCLEdBQ3ZEaEcsRUFBUSxFQUFJN0MsS0FBS3VFLFVBQVl1RSxFQUE0QixHQUN6RGtCLEVBQU8sSUFBSUMsRUFBZTNJLEVBQU82QyxFQUFNdEIsR0FFN0MsT0FEQW1ILEVBQUs3SixJQUFJSCxLQUFLdUUsU0FBVzZELEVBQWNwSSxLQUFLdUUsU0FBVzhELEdBQ2hEMkIsS0FFVDlCLEVBQVF6VCxLQUFJLE1BQVp5VCxFQUFnQjZCLElBRVZ4QyxFQUFRLElBQUkyQyxHQUNaN0csSUFBSSxTQUFTLFNBQUNzQixHQUNkQSxFQUFPLEdBQ1Q0QyxFQUFNRyxJQUFJLDBCQUdkSCxFQUFNbEUsSUFBSSx1QkFBdUIsU0FBQ3NCLEdBQ2hDLEdBQUk0QyxFQUFNekUsTUFBUSxJQUFNLEVBQ3RCLElBQWdCLFVBQUErRyxFQUFBLGVBQVMsQ0FBcEIsSUFBTXRRLEVBQUMsS0FDVixHQUFJQSxFQUFFa0ksTUFBUSxFQUFHLENBQ1g4RixFQUFNekUsTUFBUSxJQUFPLEdBQ3ZCdkosRUFBRTRHLEtBQUs1RyxFQUFFOEYsTUFBTyxHQUFJLEVBQUcsV0FDdkI5RixFQUFFdUksbUJBQW1CeE4sRUFBUyxPQUU5QmlGLEVBQUU0RyxJQUFJaUksRUFBZTdPLEVBQUU4RixNQUFPLEdBQUksRUFBRyxXQUNyQzlGLEVBQUV1SSxtQkFBbUJ4TixFQUFTLE9BRWhDLE9BSWMsTUFBaEJpVCxFQUFNekUsT0FDUnlFLEVBQU1HLElBQUksU0FFUjZCLEVBQU85SCxNQUFRLEdBQ2pCOEYsRUFBTUcsSUFBSSxlQUdkSCxFQUFNbEUsSUFBSSxTQUFTLFNBQUNzQixHQUNFLE1BQWhCNEMsRUFBTXpFLE9BQ1J5RSxFQUFNRyxJQUFJLHlCQUVSNkIsRUFBTzlILE1BQVEsR0FDakI4RixFQUFNRyxJQUFJLGVBR2RILEVBQU1sRSxJQUFJLHlCQUF5QixTQUFDc0IsR0FDbEMsR0FBSTRDLEVBQU16RSxNQUFRLElBQU8sRUFDdkIsSUFBZ0IsVUFBQStHLEVBQUEsZUFBUyxDQUFwQixJQUFNdFEsRUFBQyxLQUNWLEdBQUlBLEVBQUVrSSxNQUFRLEVBQUcsQ0FDWDhGLEVBQU16RSxPQUFTLElBQ2pCdkosRUFBRTRHLElBQW1CLEdBQWZpSSxHQUFxQjdPLEVBQUVxSSxPQUFRLEVBQUcsUUFFeENySSxFQUFFNEcsSUFBbUIsR0FBZmlJLEdBQXFCN08sRUFBRXFJLE9BQVEsRUFBRyxRQUUxQyxPQUljLE1BQWhCMkYsRUFBTXpFLE9BQ1J5RSxFQUFNRyxJQUFJLHFCQUVSNkIsRUFBTzlILE1BQVEsR0FDakI4RixFQUFNRyxJQUFJLGVBR2RILEVBQU1sRSxJQUFJLHFCQUFxQixTQUFDc0IsR0FDOUIsR0FBb0IsTUFBaEI0QyxFQUFNekUsTUFFUixJQURBLElBQUlrRCxFQUFNdUMsRUFBd0JDLEVBQ3pCbFQsRUFBSWlULEVBQXVCalQsRUFBSTBRLEVBQUsxUSxJQUMzQyxHQUFJdVUsRUFBUXZVLEdBQUdtTSxNQUFRLEVBQUcsQ0FDeEIsSUFBSWxJLEVBQUlzUSxFQUFRdlUsR0FDaEJpRSxFQUFFNEcsSUFBSWlJLEVBQWUsR0FBSTdPLEVBQUVxSSxPQUFRLEdBQUksU0FDdkMsTUFJYyxNQUFoQjJGLEVBQU16RSxPQUNSeUUsRUFBTUcsSUFBSSxlQUVSNkIsRUFBTzlILE1BQVEsR0FDakI4RixFQUFNRyxJQUFJLGVBR2RILEVBQU1sRSxJQUFJLGVBQWUsU0FBQ3NCLEdBQ0osSUFBaEI0QyxFQUFNekUsUUFDUjZHLEVBQUt4SixJQUFJaUksRUFBZSxHQUFJdUIsRUFBSy9ILE9BQVEsS0FDekMrSCxFQUFLNUYsUUFBUSxXQUVYd0YsRUFBTzlILE1BQVEsSUFDakI4RixFQUFNRyxJQUFJLFlBQ1ZpQyxFQUFLNUYsUUFBUSxXQUVYNEYsRUFBS2xJLE1BQVEsR0FDZjhGLEVBQU1HLElBQUksWUFHZEgsRUFBTWxFLElBQUksWUFBWSxTQUFDc0IsR0FDckIsSUFBTXdGLEVBQVkvQixFQUFlLEVBQzNCZ0MsRUFBWWhDLEVBQWUrQixFQUMzQmpMLEVBQUlrSixFQUErQixFQUFkYixFQUFNekUsTUFBYXNILEVBQzlDbEksRUFBSStGLEtBQU8sdUJBQ1gsRUFBYy9GLEVBQUssWUFBYWhELEVBQUdtSixFQUFnQixFQUFHLFVBQVc4QixHQUM3RGpCLElBQ0ZBLEdBQVUsRUFDVjVILEVBQU04QixVQUFVeUUsUUFDaEIwQixFQUFPbEQsVUFDTCtCLEVBQWUsRUFDZkMsRUFBZ0IsR0FDaEJELEVBQWUsRUFDZkMsRUFBZ0IsS0FFbEJkLEVBQU1HLElBQUksYUFHZEgsRUFBTUcsSUFBSSxTQUVWdk8sT0FBTzJHLGlCQUFpQixXQUFXLFNBQUN1SyxHQUNsQyxPQUFRQSxFQUFNcFAsS0FDWixJQUFLLFlBQ0hxRyxFQUFNckcsSUFBSTJLLFdBQVksRUFDdEIsTUFDRixJQUFLLGFBQ0h0RSxFQUFNckcsSUFBSTRLLFlBQWEsRUFDdkIsTUFDRixJQUFLLFVBQ0h2RSxFQUFNckcsSUFBSTZLLFNBQVUsRUFDcEIsTUFDRixJQUFLLFlBQ0h4RSxFQUFNckcsSUFBSThLLFdBQVksRUFDdEIsTUFDRixJQUFLLElBQ0h6RSxFQUFNckcsSUFBSWdMLEdBQUksRUFDZCxNQUNGLElBQUssUUFDQ3NELEVBQU85SCxNQUFRLElBQ2pCeUgsR0FBVSxPQU9sQi9QLE9BQU8yRyxpQkFBaUIsU0FBUyxTQUFDdUssR0FDaEMsT0FBUUEsRUFBTXBQLEtBQ1osSUFBSyxZQUNIcUcsRUFBTXJHLElBQUkySyxXQUFZLEVBQ3RCLE1BQ0YsSUFBSyxhQUNIdEUsRUFBTXJHLElBQUk0SyxZQUFhLEVBQ3ZCLE1BQ0YsSUFBSyxVQUNIdkUsRUFBTXJHLElBQUk2SyxTQUFVLEVBQ3BCLE1BQ0YsSUFBSyxZQUNIeEUsRUFBTXJHLElBQUk4SyxXQUFZLEVBQ3RCLE1BQ0YsSUFBSyxJQUNIekUsRUFBTXJHLElBQUlnTCxHQUFJLE1BUXBCLFNBQVVxRSxJQUNRcEMsRUFBUXFDLE9BQU0sU0FBQ25KLEdBQU0sT0FBQUEsRUFBRUMsWUFLM0JtRCxLQUFLQyxNQUNqQnVELEtBSkV3QyxXQUFXRixFQUFNLEtBSHJCLEcscUJBeFJrQixLIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkcmF3UmVjdCA9IChcbiAgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICB4OiBudW1iZXIsXG4gIHk6IG51bWJlcixcbiAgd2lkdGg6IG51bWJlcixcbiAgaGVpZ2h0OiBudW1iZXIsXG4gIGNvbG9yOiBzdHJpbmdcbikgPT4ge1xuICBpZiAoY29sb3IgIT0gbnVsbCkge1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3I7XG4gIH1cbiAgY29udGV4dC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBkcmF3VGV4dCA9IChcbiAgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICB0ZXh0OiBzdHJpbmcsXG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxuICBjb2xvcjogc3RyaW5nLFxuICB3aWR0aD86IG51bWJlclxuKSA9PiB7XG4gIGlmIChjb2xvciAhPSBudWxsKSB7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgfVxuICBjb250ZXh0LmZpbGxUZXh0KHRleHQsIHgsIHksIHdpZHRoKTtcbn07XG4iLCJleHBvcnQgY29uc3QgbG9hZEltYWdlID0gKHVybDogc3RyaW5nKTogUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICByZXNvbHZlKGltYWdlKTtcbiAgICB9KTtcbiAgICBpbWFnZS5zcmMgPSB1cmw7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZ1RvUmFkID0gKGRlZ3JlZXM6IG51bWJlcik6IG51bWJlciA9PlxuICAoZGVncmVlcyAvIDM2MCkgKiBNYXRoLlBJICogMjtcblxuZXhwb3J0IGNvbnN0IGRvdCA9ICh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciA9PiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG5cbmV4cG9ydCBjb25zdCBhcnJheSA9IDxUPihsZW5ndGg6IG51bWJlciwgZm46ICgpID0+IFQpID0+XG4gIEFycmF5LmZyb20oeyBsZW5ndGggfSkubWFwKGZuKTtcblxuZXhwb3J0IGNvbnN0IHplcm9QYWRkaW5nID0gKG51bWJlcjogbnVtYmVyLCBjb3VudDogbnVtYmVyKTogc3RyaW5nID0+XG4gIChuZXcgQXJyYXkoY291bnQpLmpvaW4oXCIwXCIpICsgbnVtYmVyKS5zbGljZSgtY291bnQpO1xuXG5leHBvcnQgY29uc3QgZWFzZUluID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB0ICogdCAqIHQgKiB0O1xuXG5leHBvcnQgY29uc3QgZWFzZU91dCA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4gZWFzZUluKDEuMCAtIHQpO1xuIiwiaW1wb3J0IHsgU3RhdGUgfSBmcm9tIFwiLi4vc3RhdGVcIjtcbmltcG9ydCB7IGRvdCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgVmVjdG9yIHtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBzdGF0aWMgbmV3KHg6IG51bWJlciA9IDAuMCwgeTogbnVtYmVyID0gLTEuMCk6IFZlY3RvciB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IoeCwgeSk7XG4gIH1cblxuICBzdGF0aWMgdW5pdCh4OiBudW1iZXIsIHk6IG51bWJlcik6IFZlY3RvciB7XG4gICAgY29uc3QgbGVuID0gdGhpcy5kb3QoeCwgeSk7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IoeCAvIGxlbiwgeSAvIGxlbik7XG4gIH1cblxuICBzdGF0aWMgZnJvbUFuZ2xlKGFuZ2xlOiBudW1iZXIpOiBWZWN0b3Ige1xuICAgIHJldHVybiBuZXcgVmVjdG9yKE1hdGguY29zKGFuZ2xlKSwgTWF0aC5zaW4oYW5nbGUpKTtcbiAgfVxuXG4gIHN0YXRpYyBkb3QoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBkb3QoeCwgeSk7XG4gIH1cblxuICBnZXQgYW5nbGUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBhc2luID0gTWF0aC5hc2luKHRoaXMueSk7XG4gICAgcmV0dXJuIHRoaXMueCA+PSAwID8gYXNpbiA6IE1hdGguUEkgLSBhc2luO1xuICB9XG5cbiAgc2V0QW5nbGUoYW5nbGU6IG51bWJlcikge1xuICAgIHRoaXMuc2V0KE1hdGguY29zKGFuZ2xlKSwgTWF0aC5zaW4oYW5nbGUpKTtcbiAgfVxuXG4gIGRpc3RhbmNlKHRhcmdldDogVmVjdG9yKTogbnVtYmVyIHtcbiAgICBjb25zdCB4ID0gdGhpcy54IC0gdGFyZ2V0Lng7XG4gICAgY29uc3QgeSA9IHRoaXMueSAtIHRhcmdldC55O1xuICAgIHJldHVybiBWZWN0b3IuZG90KHgsIHkpO1xuICB9XG5cbiAgY3Jvc3ModGFyZ2V0OiBWZWN0b3IpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKiB0YXJnZXQueSAtIHRoaXMueSAqIHRhcmdldC54O1xuICB9XG5cbiAgcm90YXRlKHJhZGlhbjogbnVtYmVyKSB7XG4gICAgbGV0IHMgPSBNYXRoLnNpbihyYWRpYW4pO1xuICAgIGxldCBjID0gTWF0aC5jb3MocmFkaWFuKTtcbiAgICB0aGlzLnggPSB0aGlzLnggKiBjICsgdGhpcy55ICogLXM7XG4gICAgdGhpcy55ID0gdGhpcy54ICogcyArIHRoaXMueSAqIGM7XG4gIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE9iamVjdEJhc2Uge1xuICBhYnN0cmFjdCB1cGRhdGUoKTogdm9pZDtcblxuICByZWFkeSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBDaGFyYWN0ZXJPcHQgPSB7XG4gIHg/OiBudW1iZXI7XG4gIHk/OiBudW1iZXI7XG4gIHc6IG51bWJlcjtcbiAgaDogbnVtYmVyO1xuICBsaWZlPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENoYXJhY3RlciBleHRlbmRzIE9iamVjdEJhc2Uge1xuICBwcm90ZWN0ZWQgc3RhdGU6IFN0YXRlO1xuICBwb3NpdGlvbjogVmVjdG9yO1xuICBwcm90ZWN0ZWQgdmVjdG9yOiBWZWN0b3I7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICBsaWZlOiBudW1iZXI7XG4gIHByaXZhdGUgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc3RhdGU6IFN0YXRlLFxuICAgIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50LFxuICAgIHsgeCA9IDAsIHkgPSAwLCB3LCBoLCBsaWZlID0gMCB9OiBDaGFyYWN0ZXJPcHRcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWN0b3IoeCwgeSk7XG4gICAgdGhpcy52ZWN0b3IgPSBWZWN0b3IubmV3KCk7XG4gICAgdGhpcy53aWR0aCA9IHc7XG4gICAgdGhpcy5oZWlnaHQgPSBoO1xuICAgIHRoaXMubGlmZSA9IGxpZmU7XG4gICAgdGhpcy5pbWFnZSA9IGltYWdlO1xuICB9XG5cbiAgc2V0VmVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy52ZWN0b3Iuc2V0KHgsIHkpO1xuICB9XG5cbiAgc2V0VmVjdG9yRnJvbUFuZ2xlKGFuZ2xlOiBudW1iZXIpIHtcbiAgICB0aGlzLnZlY3Rvci5zZXRBbmdsZShhbmdsZSk7XG4gIH1cblxuICBkcmF3KCkge1xuICAgIGNvbnN0IG9mZnNldFggPSB0aGlzLndpZHRoIC8gMjtcbiAgICBjb25zdCBvZmZzZXRZID0gdGhpcy5oZWlnaHQgLyAyO1xuICAgIHRoaXMuc3RhdGUuY3R4LmRyYXdJbWFnZShcbiAgICAgIHRoaXMuaW1hZ2UsXG4gICAgICB0aGlzLnBvc2l0aW9uLnggLSBvZmZzZXRYLFxuICAgICAgdGhpcy5wb3NpdGlvbi55IC0gb2Zmc2V0WSxcbiAgICAgIHRoaXMud2lkdGgsXG4gICAgICB0aGlzLmhlaWdodFxuICAgICk7XG4gIH1cblxuICByb3RhdGlvbkRyYXcoKSB7XG4gICAgdGhpcy5zdGF0ZS5jdHguc2F2ZSgpO1xuICAgIHRoaXMuc3RhdGUuY3R4LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSk7XG4gICAgdGhpcy5zdGF0ZS5jdHgucm90YXRlKHRoaXMudmVjdG9yLmFuZ2xlIC0gTWF0aC5QSSAqIDEuNSk7XG5cbiAgICBjb25zdCBvZmZzZXRYID0gdGhpcy53aWR0aCAvIDI7XG4gICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICB0aGlzLnN0YXRlLmN0eC5kcmF3SW1hZ2UoXG4gICAgICB0aGlzLmltYWdlLFxuICAgICAgLW9mZnNldFgsXG4gICAgICAtb2Zmc2V0WSxcbiAgICAgIHRoaXMud2lkdGgsXG4gICAgICB0aGlzLmhlaWdodFxuICAgICk7XG5cbiAgICB0aGlzLnN0YXRlLmN0eC5yZXN0b3JlKCk7XG4gIH1cblxuICBpc0ludmluY2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVzdHJveWVkKCkge31cblxuICBhYnN0cmFjdCB1cGRhdGUoKTogdm9pZDtcblxuICByZWFkeSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLmltYWdlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDaGFyYWN0ZXIsIENoYXJhY3Rlck9wdCwgVmVjdG9yIH0gZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0IHsgSG9taW5nLCBTaG90IH0gZnJvbSBcIi4vc2hvdFwiO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tIFwiLi4vc3RhdGVcIjtcblxudHlwZSBFbmVteVR5cGUgPSBcImRlZmF1bHRcIiB8IFwid2F2ZVwiIHwgXCJsYXJnZVwiO1xuXG5leHBvcnQgY2xhc3MgRW5lbXkgZXh0ZW5kcyBDaGFyYWN0ZXIge1xuICBwcm90ZWN0ZWQgc3BlZWQ6IG51bWJlciA9IDM7XG4gIHByb3RlY3RlZCBmcmFtZSA9IDA7XG4gIHR5cGU6IEVuZW15VHlwZSA9IFwiZGVmYXVsdFwiO1xuICBwcm90ZWN0ZWQgYXR0YWNrVGFyZ2V0OiBDaGFyYWN0ZXI7XG4gIHByb3RlY3RlZCBzaG90QXJyYXk6IFNob3RbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzdGF0ZTogU3RhdGUsXG4gICAgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsXG4gICAgb3B0aW9uOiBDaGFyYWN0ZXJPcHQsXG4gICAgdGFyZ2V0OiBDaGFyYWN0ZXIsXG4gICAgc2hvdHM6IFNob3RbXVxuICApIHtcbiAgICBzdXBlcihzdGF0ZSwgaW1hZ2UsIG9wdGlvbik7XG4gICAgdGhpcy5hdHRhY2tUYXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5zaG90QXJyYXkgPSBzaG90cztcbiAgfVxuXG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlciwgbGlmZTogbnVtYmVyID0gMSwgdHlwZTogRW5lbXlUeXBlID0gXCJkZWZhdWx0XCIpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnNldCh4LCB5KTtcbiAgICB0aGlzLmxpZmUgPSBsaWZlO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5mcmFtZSA9IDA7XG4gIH1cblxuICBmaXJlKHg6IG51bWJlciA9IDAuMCwgeTogbnVtYmVyID0gMS4wLCBzcGVlZDogbnVtYmVyID0gNS4wKSB7XG4gICAgZm9yIChjb25zdCBzIG9mIHRoaXMuc2hvdEFycmF5KSB7XG4gICAgICBpZiAocy5saWZlIDw9IDApIHtcbiAgICAgICAgcy5zZXQodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuICAgICAgICBzLnNldFNwZWVkKHNwZWVkKTtcbiAgICAgICAgcy5zZXRWZWN0b3IoeCwgeSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3llZCgpIHtcbiAgICBpZiAodGhpcy50eXBlID09PSBcImxhcmdlXCIpIHtcbiAgICAgIHRoaXMuc3RhdGUuZ2FtZVNjb3JlLmFkZCgxMDAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZS5nYW1lU2NvcmUuYWRkKDEwMCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmxpZmUgPD0gMCkgcmV0dXJuO1xuXG4gICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJkZWZhdWx0XCI6XG4gICAgICAgIGlmICh0aGlzLmZyYW1lID09IDEwMCkge1xuICAgICAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zaXRpb24ueCArPSB0aGlzLnZlY3Rvci54ICogdGhpcy5zcGVlZDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IHRoaXMudmVjdG9yLnkgKiB0aGlzLnNwZWVkO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ3YXZlXCI6XG4gICAgICAgIGlmICh0aGlzLmZyYW1lICUgNjAgPT09IDApIHtcbiAgICAgICAgICBjb25zdCB0eCA9IHRoaXMuYXR0YWNrVGFyZ2V0LnBvc2l0aW9uLnggLSB0aGlzLnBvc2l0aW9uLng7XG4gICAgICAgICAgY29uc3QgdHkgPSB0aGlzLmF0dGFja1RhcmdldC5wb3NpdGlvbi55IC0gdGhpcy5wb3NpdGlvbi55O1xuICAgICAgICAgIGNvbnN0IHR2ID0gVmVjdG9yLnVuaXQodHgsIHR5KTtcbiAgICAgICAgICB0aGlzLmZpcmUodHYueCwgdHYueSwgNC4wKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvc2l0aW9uLnggKz0gTWF0aC5zaW4odGhpcy5mcmFtZSAvIDEwKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IDIuMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibGFyZ2VcIjpcbiAgICAgICAgaWYgKHRoaXMuZnJhbWUgJSA1MCA9PT0gMCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzYwOyBpICs9IDQ1KSB7XG4gICAgICAgICAgICBjb25zdCByID0gKGkgKiBNYXRoLlBJKSAvIDE4MDtcbiAgICAgICAgICAgIHRoaXMuZmlyZShNYXRoLmNvcyhyKSwgTWF0aC5zaW4ociksIDMuMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zaXRpb24ueCArPSBNYXRoLnNpbigodGhpcy5mcmFtZSArIDkwKSAvIDUwKSAqIDIuMDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IDEuMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMucG9zaXRpb24ueSAtIHRoaXMuaGVpZ2h0ID4gdGhpcy5zdGF0ZS5jdHguY2FudmFzLmhlaWdodCkge1xuICAgICAgdGhpcy5saWZlID0gMDtcbiAgICB9XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgICB0aGlzLmZyYW1lKys7XG4gIH1cbn1cblxudHlwZSBCb3NzTW9kZSA9IFwiaW52YWRlXCIgfCBcImVzY2FwZVwiIHwgXCJmbG9hdGluZ1wiIHwgXCJcIjtcblxuZXhwb3J0IGNsYXNzIEJvc3MgZXh0ZW5kcyBFbmVteSB7XG4gIG1vZGU6IEJvc3NNb2RlO1xuICBmcmFtZTogbnVtYmVyO1xuICBzcGVlZDogbnVtYmVyO1xuICBob21pbmdBcnJheTogU2hvdFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHN0YXRlOiBTdGF0ZSxcbiAgICBpbWFnZTogSFRNTEltYWdlRWxlbWVudCxcbiAgICBvcHRpb246IENoYXJhY3Rlck9wdCxcbiAgICB0YXJnZXQ6IENoYXJhY3RlcixcbiAgICBzaG90czogU2hvdFtdLFxuICAgIGhvbWluZ1Nob3RzOiBIb21pbmdbXVxuICApIHtcbiAgICBzdXBlcihzdGF0ZSwgaW1hZ2UsIG9wdGlvbiwgdGFyZ2V0LCBzaG90cyk7XG4gICAgdGhpcy5tb2RlID0gXCJcIjtcbiAgICB0aGlzLmZyYW1lID0gMDtcbiAgICB0aGlzLnNwZWVkID0gMztcbiAgICB0aGlzLmhvbWluZ0FycmF5ID0gaG9taW5nU2hvdHM7XG4gIH1cblxuICBzZXRNb2RlKG1vZGU6IEJvc3NNb2RlKSB7XG4gICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgfVxuXG4gIGZpcmUoeDogbnVtYmVyID0gMC4wLCB5OiBudW1iZXIgPSAxLjAsIHNwZWVkOiBudW1iZXIgPSA1LjApIHtcbiAgICBmb3IgKGNvbnN0IHMgb2YgdGhpcy5zaG90QXJyYXkpIHtcbiAgICAgIGlmIChzLmxpZmUgPD0gMCkge1xuICAgICAgICBzLnNldCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSk7XG4gICAgICAgIHMuc2V0U3BlZWQoc3BlZWQpO1xuICAgICAgICBzLnNldFZlY3Rvcih4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaG9taW5nRmlyZSh4OiBudW1iZXIgPSAwLjAsIHk6IG51bWJlciA9IDEuMCwgc3BlZWQ6IG51bWJlciA9IDMuMCkge1xuICAgIGZvciAoY29uc3QgcyBvZiB0aGlzLmhvbWluZ0FycmF5KSB7XG4gICAgICBpZiAocy5saWZlIDw9IDApIHtcbiAgICAgICAgcy5zZXQodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuICAgICAgICBzLnNldFNwZWVkKHNwZWVkKTtcbiAgICAgICAgcy5zZXRWZWN0b3IoeCwgeSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3llZCgpIHtcbiAgICB0aGlzLnN0YXRlLmdhbWVTY29yZS5hZGQoMTUwMDApO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmxpZmUgPD0gMCkgcmV0dXJuO1xuXG4gICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgIGNhc2UgXCJpbnZhZGVcIjpcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IHRoaXMuc3BlZWQ7XG4gICAgICAgIGlmICh0aGlzLnBvc2l0aW9uLnkgPiAxMDApIHtcbiAgICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSAxMDA7XG4gICAgICAgICAgdGhpcy5tb2RlID0gXCJmbG9hdGluZ1wiO1xuICAgICAgICAgIHRoaXMuZnJhbWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVzY2FwZVwiOlxuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgLT0gdGhpcy5zcGVlZDtcbiAgICAgICAgaWYgKHRoaXMucG9zaXRpb24ueSA8IC10aGlzLmhlaWdodCkge1xuICAgICAgICAgIHRoaXMubGlmZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZmxvYXRpbmdcIjpcbiAgICAgICAgaWYgKHRoaXMuZnJhbWUgJSAxMDAwIDwgNTAwKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZnJhbWUgJSAyMDAgPiAxNDAgJiYgdGhpcy5mcmFtZSAlIDEwID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IHRoaXMuYXR0YWNrVGFyZ2V0LnBvc2l0aW9uLnggLSB0aGlzLnBvc2l0aW9uLng7XG4gICAgICAgICAgICBjb25zdCB0eSA9IHRoaXMuYXR0YWNrVGFyZ2V0LnBvc2l0aW9uLnkgLSB0aGlzLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICBjb25zdCB0diA9IFZlY3Rvci51bml0KHR4LCB0eSk7XG4gICAgICAgICAgICB0aGlzLmZpcmUodHYueCwgdHYueSwgMy4wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuZnJhbWUgJSA1MCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5ob21pbmdGaXJlKDAsIDEsIDMuNSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zaXRpb24ueCArPSBNYXRoLmNvcyh0aGlzLmZyYW1lIC8gMTAwKSAqIDIuMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgICB0aGlzLmZyYW1lKys7XG4gIH1cbn1cbiIsImltcG9ydCB7IE9iamVjdEJhc2UsIFZlY3RvciB9IGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCB7IGFycmF5LCBlYXNlT3V0IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbnR5cGUgRmlyZSA9IHtcbiAgcG9zaXRpb246IFZlY3RvcjtcbiAgdmVjdG9yOiBWZWN0b3I7XG4gIHNpemU6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjbGFzcyBFeHBsb3Npb24gZXh0ZW5kcyBPYmplY3RCYXNlIHtcbiAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgbGlmZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIHJhZGl1czogbnVtYmVyO1xuICBwcml2YXRlIGNvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgc2l6ZTogbnVtYmVyO1xuICBwcml2YXRlIGZpcmVzOiBGaXJlW10gPSBbXTtcbiAgcHJpdmF0ZSBzdGFydFRpbWUgPSAwO1xuICBwcml2YXRlIHRpbWVSYW5nZTogbnVtYmVyO1xuICBwcml2YXRlIGNvbG9yOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgcmFkaXVzOiBudW1iZXIsXG4gICAgY291bnQ6IG51bWJlcixcbiAgICBzaXplOiBudW1iZXIsXG4gICAgdGltZVJhbmdlOiBudW1iZXIsXG4gICAgY29sb3I6IHN0cmluZyA9IFwiI2ZmMTE2NlwiXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jdHggPSBjdHg7XG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXM7XG4gICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgdGhpcy50aW1lUmFuZ2UgPSB0aW1lUmFuZ2U7XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICB9XG5cbiAgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy5maXJlcyA9IGFycmF5KHRoaXMuY291bnQsICgpID0+ICh7XG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3Rvcih4LCB5KSxcbiAgICAgIHZlY3RvcjogVmVjdG9yLmZyb21BbmdsZShNYXRoLnJhbmRvbSgpICogTWF0aC5QSSAqIDIuMCksXG4gICAgICBzaXplOiAoTWF0aC5yYW5kb20oKSAqIDAuNSArIDAuNSkgKiB0aGlzLnNpemUsXG4gICAgfSkpO1xuICAgIHRoaXMubGlmZSA9IHRydWU7XG4gICAgdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICghdGhpcy5saWZlKSByZXR1cm47XG4gICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcbiAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IDAuNTtcblxuICAgIGNvbnN0IHRpbWUgPSAoRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRUaW1lKSAvIDEwMDA7XG4gICAgY29uc3QgZWFzZSA9IGVhc2VPdXQoTWF0aC5taW4odGltZSAvIHRoaXMudGltZVJhbmdlLCAxLjApKTtcbiAgICBjb25zdCBwcm9ncmVzcyA9IDEuMCAtIGVhc2U7XG4gICAgY29uc3QgcyA9IDEuMCAtIHByb2dyZXNzO1xuICAgIGZvciAoY29uc3QgZiBvZiB0aGlzLmZpcmVzKSB7XG4gICAgICBjb25zdCBkID0gdGhpcy5yYWRpdXMgKiBwcm9ncmVzcztcbiAgICAgIGNvbnN0IHggPSBmLnBvc2l0aW9uLnggKyBmLnZlY3Rvci54ICogZDtcbiAgICAgIGNvbnN0IHkgPSBmLnBvc2l0aW9uLnkgKyBmLnZlY3Rvci55ICogZDtcbiAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KFxuICAgICAgICB4IC0gKGYuc2l6ZSAqIHMpIC8gMixcbiAgICAgICAgeSAtIChmLnNpemUgKiBzKSAvIDIsXG4gICAgICAgIGYuc2l6ZSAqIHMsXG4gICAgICAgIGYuc2l6ZSAqIHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHByb2dyZXNzID49IDEuMCkge1xuICAgICAgdGhpcy5saWZlID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDaGFyYWN0ZXIsIFZlY3RvciwgQ2hhcmFjdGVyT3B0IH0gZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0IHsgU2hvdCB9IGZyb20gXCIuL3Nob3RcIjtcbmltcG9ydCB7IGRlZ1RvUmFkIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gXCIuLi9zdGF0ZVwiO1xuXG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgcHJpdmF0ZSBzcGVlZDogbnVtYmVyID0gMztcblxuICBwcml2YXRlIHNob3RBcnJheTogU2hvdFtdO1xuICBwcml2YXRlIHNpbmdsZVNob3RBcnJheTogU2hvdFtdO1xuICBwcml2YXRlIHNob3RDaGVja0NvdW50ZXIgPSAwO1xuICBwcml2YXRlIHNob3RJbnRlcnZhbCA9IDEwO1xuXG4gIGlzQ29taW5nOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgY29taW5nU3RhcnQ/OiBudW1iZXI7XG4gIHByaXZhdGUgY29taW5nU3RhcnRQb3NpdGlvbj86IFZlY3RvcjtcbiAgcHJpdmF0ZSBjb21pbmdFbmRQb3NpdGlvbj86IFZlY3RvcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzdGF0ZTogU3RhdGUsXG4gICAgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsXG4gICAgb3B0aW9uOiBDaGFyYWN0ZXJPcHQsXG4gICAge1xuICAgICAgc2hvdCxcbiAgICAgIHNpbmdsZVNob3QsXG4gICAgfToge1xuICAgICAgc2hvdDogU2hvdFtdO1xuICAgICAgc2luZ2xlU2hvdDogU2hvdFtdO1xuICAgIH1cbiAgKSB7XG4gICAgc3VwZXIoc3RhdGUsIGltYWdlLCBvcHRpb24pO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLnNob3RBcnJheSA9IHNob3Q7XG4gICAgdGhpcy5zaW5nbGVTaG90QXJyYXkgPSBzaW5nbGVTaG90O1xuICB9XG5cbiAgaXNJbnZpbmNpYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzQ29taW5nO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmxpZmUgPD0gMCkgcmV0dXJuO1xuICAgIGlmIChcbiAgICAgICF0aGlzLmNvbWluZ1N0YXJ0IHx8XG4gICAgICAhdGhpcy5jb21pbmdTdGFydFBvc2l0aW9uIHx8XG4gICAgICAhdGhpcy5jb21pbmdFbmRQb3NpdGlvblxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBqdXN0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICBpZiAodGhpcy5pc0NvbWluZykge1xuICAgICAgY29uc3QgY29taW5nVGltZSA9IChqdXN0VGltZSAtIHRoaXMuY29taW5nU3RhcnQpIC8gMTAwMDtcbiAgICAgIGxldCB5ID0gdGhpcy5jb21pbmdTdGFydFBvc2l0aW9uLnkgLSBjb21pbmdUaW1lICogNTA7XG4gICAgICBpZiAoeSA8PSB0aGlzLmNvbWluZ0VuZFBvc2l0aW9uLnkpIHtcbiAgICAgICAgdGhpcy5pc0NvbWluZyA9IGZhbHNlO1xuICAgICAgICB5ID0gdGhpcy5jb21pbmdFbmRQb3NpdGlvbi55O1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBvc2l0aW9uLnNldCh0aGlzLnBvc2l0aW9uLngsIHkpO1xuICAgICAgaWYgKGp1c3RUaW1lICUgMTAwIDwgNTApIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5jdHguZ2xvYmFsQWxwaGEgPSAwLjU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmtleS5hcnJvd0xlZnQpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54IC09IHRoaXMuc3BlZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZS5rZXkuYXJyb3dSaWdodCkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uLnggKz0gdGhpcy5zcGVlZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlLmtleS5hcnJvd1VwKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24ueSAtPSB0aGlzLnNwZWVkO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUua2V5LmFycm93RG93bikge1xuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgKz0gdGhpcy5zcGVlZDtcbiAgICAgIH1cbiAgICAgIHRoaXMucG9zaXRpb24uc2V0KFxuICAgICAgICBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnBvc2l0aW9uLngsIDApLCB0aGlzLnN0YXRlLmN0eC5jYW52YXMud2lkdGgpLFxuICAgICAgICBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnBvc2l0aW9uLnksIDApLCB0aGlzLnN0YXRlLmN0eC5jYW52YXMuaGVpZ2h0KVxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUua2V5LnopIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdENoZWNrQ291bnRlciA+PSAwKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBzIG9mIHRoaXMuc2hvdEFycmF5KSB7XG4gICAgICAgICAgICBpZiAocy5saWZlIDw9IDApIHtcbiAgICAgICAgICAgICAgcy5zZXQodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICBzLnNldFBvd2VyKDIpO1xuICAgICAgICAgICAgICB0aGlzLnNob3RDaGVja0NvdW50ZXIgPSAtdGhpcy5zaG90SW50ZXJ2YWw7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2luZ2xlU2hvdEFycmF5Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRoaXMuc2luZ2xlU2hvdEFycmF5W2ldLmxpZmUgPD0gMCAmJlxuICAgICAgICAgICAgICB0aGlzLnNpbmdsZVNob3RBcnJheVtpICsgMV0ubGlmZSA8PSAwXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3QgcmFkQ1cgPSBkZWdUb1JhZCgyODApO1xuICAgICAgICAgICAgICBjb25zdCByYWRDQ1cgPSBkZWdUb1JhZCgyNjApO1xuICAgICAgICAgICAgICB0aGlzLnNpbmdsZVNob3RBcnJheVtpXS5zZXQodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICB0aGlzLnNpbmdsZVNob3RBcnJheVtpXS5zZXRWZWN0b3JGcm9tQW5nbGUocmFkQ1cpO1xuICAgICAgICAgICAgICB0aGlzLnNpbmdsZVNob3RBcnJheVtpICsgMV0uc2V0KHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaSArIDFdLnNldFZlY3RvckZyb21BbmdsZShyYWRDQ1cpO1xuICAgICAgICAgICAgICB0aGlzLnNob3RDaGVja0NvdW50ZXIgPSAtdGhpcy5zaG90SW50ZXJ2YWw7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNob3RDaGVja0NvdW50ZXIrKztcblxuICAgIHRoaXMuZHJhdygpO1xuICAgIHRoaXMuc3RhdGUuY3R4Lmdsb2JhbEFscGhhID0gMS4wO1xuICB9XG5cbiAgc2V0Q29taW5nKHN0YXJ0WDogbnVtYmVyLCBzdGFydFk6IG51bWJlciwgZW5kWDogbnVtYmVyLCBlbmRZOiBudW1iZXIpIHtcbiAgICB0aGlzLmxpZmUgPSAxO1xuICAgIHRoaXMuaXNDb21pbmcgPSB0cnVlO1xuICAgIHRoaXMuY29taW5nU3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMucG9zaXRpb24uc2V0KHN0YXJ0WCwgc3RhcnRZKTtcbiAgICB0aGlzLmNvbWluZ1N0YXJ0UG9zaXRpb24gPSBuZXcgVmVjdG9yKHN0YXJ0WCwgc3RhcnRZKTtcbiAgICB0aGlzLmNvbWluZ0VuZFBvc2l0aW9uID0gbmV3IFZlY3RvcihlbmRYLCBlbmRZKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ2hhcmFjdGVyLCBDaGFyYWN0ZXJPcHQsIFZlY3RvciB9IGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCB7IEJvc3MsIEVuZW15IH0gZnJvbSBcIi4vZW5lbWllc1wiO1xuaW1wb3J0IHsgRXhwbG9zaW9uIH0gZnJvbSBcIi4vZXhwbG9zaW9uXCI7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlXCI7XG5cbmV4cG9ydCBjbGFzcyBTaG90IGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgcHJvdGVjdGVkIHNwZWVkOiBudW1iZXIgPSA3O1xuICBwcm90ZWN0ZWQgcG93ZXI6IG51bWJlciA9IDE7XG4gIHByb3RlY3RlZCB0YXJnZXRBcnJheTogQ2hhcmFjdGVyW10gPSBbXTtcbiAgcHJvdGVjdGVkIGV4cGxvc2lvbkFycmF5OiBFeHBsb3Npb25bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHN0YXRlOiBTdGF0ZSwgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsIG9wdGlvbjogQ2hhcmFjdGVyT3B0KSB7XG4gICAgc3VwZXIoc3RhdGUsIGltYWdlLCBvcHRpb24pO1xuICB9XG5cbiAgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyLCBzcGVlZDogbnVtYmVyID0gNywgcG93ZXI6IG51bWJlciA9IDEpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnNldCh4LCB5KTtcbiAgICB0aGlzLmxpZmUgPSAxO1xuICB9XG5cbiAgc2V0U3BlZWQoc3BlZWQ6IG51bWJlcikge1xuICAgIGlmIChzcGVlZCA8PSAwKSByZXR1cm47XG4gICAgdGhpcy5zcGVlZCA9IHNwZWVkO1xuICB9XG5cbiAgc2V0UG93ZXIocG93ZXI6IG51bWJlcikge1xuICAgIGlmIChwb3dlciA8PSAwKSByZXR1cm47XG4gICAgdGhpcy5wb3dlciA9IHBvd2VyO1xuICB9XG5cbiAgc2V0VGFyZ2V0cyh0YXJnZXRzOiBDaGFyYWN0ZXJbXSkge1xuICAgIHRoaXMudGFyZ2V0QXJyYXkgPSB0YXJnZXRzO1xuICB9XG5cbiAgc2V0RXhwbG9zaW9ucyhleHBsb3Npb25zOiBFeHBsb3Npb25bXSkge1xuICAgIHRoaXMuZXhwbG9zaW9uQXJyYXkgPSBleHBsb3Npb25zO1xuICB9XG5cbiAgaGFzQ29sbGlzaW9uKHQ6IENoYXJhY3Rlcik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGRpc3QgPSB0aGlzLnBvc2l0aW9uLmRpc3RhbmNlKHQucG9zaXRpb24pO1xuICAgIHJldHVybiBkaXN0IDw9ICh0aGlzLndpZHRoICsgdC53aWR0aCkgLyA0O1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmxpZmUgPD0gMCkgcmV0dXJuO1xuICAgIGlmIChcbiAgICAgIHRoaXMucG9zaXRpb24ueCArIHRoaXMud2lkdGggPCAwIHx8XG4gICAgICB0aGlzLnBvc2l0aW9uLnggLSB0aGlzLndpZHRoID4gdGhpcy5zdGF0ZS5jdHguY2FudmFzLndpZHRoIHx8XG4gICAgICB0aGlzLnBvc2l0aW9uLnkgKyB0aGlzLmhlaWdodCA8IDAgfHxcbiAgICAgIHRoaXMucG9zaXRpb24ueSAtIHRoaXMuaGVpZ2h0ID4gdGhpcy5zdGF0ZS5jdHguY2FudmFzLmhlaWdodFxuICAgICkge1xuICAgICAgdGhpcy5saWZlID0gMDtcbiAgICB9XG4gICAgdGhpcy5wb3NpdGlvbi54ICs9IHRoaXMudmVjdG9yLnggKiB0aGlzLnNwZWVkO1xuICAgIHRoaXMucG9zaXRpb24ueSArPSB0aGlzLnZlY3Rvci55ICogdGhpcy5zcGVlZDtcblxuICAgIGlmICh0aGlzLmxpZmUgPiAwKSB7XG4gICAgICB0aGlzLnRhcmdldEFycmF5LmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgaWYgKHQubGlmZSA8PSAwKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLmhhc0NvbGxpc2lvbih0KSAmJiAhdC5pc0ludmluY2libGUoKSkge1xuICAgICAgICAgIHQubGlmZSAtPSB0aGlzLnBvd2VyO1xuICAgICAgICAgIGlmICh0LmxpZmUgPD0gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZXhwbG9zaW9uQXJyYXkpIHtcbiAgICAgICAgICAgICAgaWYgKCFlLmxpZmUpIHtcbiAgICAgICAgICAgICAgICBlLnNldCh0LnBvc2l0aW9uLngsIHQucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHQuZGVzdHJveWVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubGlmZSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnJvdGF0aW9uRHJhdygpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIb21pbmcgZXh0ZW5kcyBTaG90IHtcbiAgZnJhbWU6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3Ioc3RhdGU6IFN0YXRlLCBpbWFnZTogSFRNTEltYWdlRWxlbWVudCwgb3B0aW9uOiBDaGFyYWN0ZXJPcHQpIHtcbiAgICBzdXBlcihzdGF0ZSwgaW1hZ2UsIG9wdGlvbik7XG4gIH1cblxuICBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHNwZWVkOiBudW1iZXIsIHBvd2VyOiBudW1iZXIpIHtcbiAgICBzdXBlci5zZXQoeCwgeSwgc3BlZWQsIHBvd2VyKTtcbiAgICB0aGlzLmZyYW1lID0gMDtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5saWZlIDw9IDApIHJldHVybjtcbiAgICBpZiAoXG4gICAgICB0aGlzLnBvc2l0aW9uLnggKyB0aGlzLndpZHRoIDwgMCB8fFxuICAgICAgdGhpcy5wb3NpdGlvbi54IC0gdGhpcy53aWR0aCA+IHRoaXMuc3RhdGUuY3R4LmNhbnZhcy53aWR0aCB8fFxuICAgICAgdGhpcy5wb3NpdGlvbi55ICsgdGhpcy5oZWlnaHQgPCAwIHx8XG4gICAgICB0aGlzLnBvc2l0aW9uLnkgLSB0aGlzLmhlaWdodCA+IHRoaXMuc3RhdGUuY3R4LmNhbnZhcy5oZWlnaHRcbiAgICApIHtcbiAgICAgIHRoaXMubGlmZSA9IDA7XG4gICAgfVxuICAgIGxldCB0YXJnZXQgPSB0aGlzLnRhcmdldEFycmF5WzBdO1xuICAgIGlmICh0aGlzLmZyYW1lIDwgMTAwKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkVmVjdG9yID0gVmVjdG9yLnVuaXQoXG4gICAgICAgIHRhcmdldC5wb3NpdGlvbi54IC0gdGhpcy5wb3NpdGlvbi54LFxuICAgICAgICB0YXJnZXQucG9zaXRpb24ueSAtIHRoaXMucG9zaXRpb24ueVxuICAgICAgKTtcbiAgICAgIHRoaXMudmVjdG9yID0gVmVjdG9yLnVuaXQodGhpcy52ZWN0b3IueCwgdGhpcy52ZWN0b3IueSk7XG4gICAgICBjb25zdCBjcm9zcyA9IHRoaXMudmVjdG9yLmNyb3NzKG5vcm1hbGl6ZWRWZWN0b3IpO1xuICAgICAgY29uc3QgcmFkID0gTWF0aC5QSSAvIDE4MC4wO1xuICAgICAgaWYgKGNyb3NzID4gMC4wKSB7XG4gICAgICAgIHRoaXMudmVjdG9yLnJvdGF0ZShyYWQpO1xuICAgICAgfSBlbHNlIGlmIChjcm9zcyA8IDAuMCkge1xuICAgICAgICB0aGlzLnZlY3Rvci5yb3RhdGUoLXJhZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucG9zaXRpb24ueCArPSB0aGlzLnZlY3Rvci54ICogdGhpcy5zcGVlZDtcbiAgICB0aGlzLnBvc2l0aW9uLnkgKz0gdGhpcy52ZWN0b3IueSAqIHRoaXMuc3BlZWQ7XG5cbiAgICB0aGlzLnRhcmdldEFycmF5LmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmICh0aGlzLmxpZmUgPD0gMCB8fCB0LmxpZmUgPD0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgZGlzdCA9IHRoaXMucG9zaXRpb24uZGlzdGFuY2UodC5wb3NpdGlvbik7XG4gICAgICBpZiAoZGlzdCA8PSAodGhpcy53aWR0aCArIHQud2lkdGgpIC8gNCkge1xuICAgICAgICBpZiAodCBpbnN0YW5jZW9mIFBsYXllcikge1xuICAgICAgICAgIGlmICh0LmlzQ29taW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHQubGlmZSAtPSB0aGlzLnBvd2VyO1xuICAgICAgICBpZiAodC5saWZlIDw9IDApIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXhwbG9zaW9uQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmV4cGxvc2lvbkFycmF5W2ldLmxpZmUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgdGhpcy5leHBsb3Npb25BcnJheVtpXS5zZXQodC5wb3NpdGlvbi54LCB0LnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBFbmVteSkge1xuICAgICAgICAgICAgbGV0IHNjb3JlID0gMTAwO1xuICAgICAgICAgICAgaWYgKHQudHlwZSA9PT0gXCJsYXJnZVwiKSB7XG4gICAgICAgICAgICAgIHNjb3JlID0gMTAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZ2FtZVNjb3JlLmFkZChzY29yZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGlmZSA9IDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5yb3RhdGlvbkRyYXcoKTtcbiAgICB0aGlzLmZyYW1lKys7XG4gIH1cbn1cbiIsInR5cGUgU2NlbmUgPSAodGltZTogbnVtYmVyKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgU2NlbmVNYW5hZ2VyIHtcbiAgc2NlbmU6IHsgW2tleTogc3RyaW5nXTogU2NlbmUgfSA9IHt9O1xuICBhY3RpdmVTY2VuZTogU2NlbmUgfCBudWxsID0gbnVsbDtcbiAgc3RhcnRUaW1lOiBudW1iZXIgPSBEYXRlLm5vdygpO1xuICBmcmFtZTogbnVtYmVyID0gLTE7XG5cbiAgYWRkKG5hbWU6IHN0cmluZywgdXBkYXRlRnVuY3Rpb246IFNjZW5lKSB7XG4gICAgdGhpcy5zY2VuZVtuYW1lXSA9IHVwZGF0ZUZ1bmN0aW9uO1xuICB9XG5cbiAgdXNlKG5hbWU6IHN0cmluZykge1xuICAgIGlmICghKG5hbWUgaW4gdGhpcy5zY2VuZSkpIHJldHVybjtcbiAgICB0aGlzLmFjdGl2ZVNjZW5lID0gdGhpcy5zY2VuZVtuYW1lXTtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgdGhpcy5mcmFtZSA9IC0xO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IGFjdGl2ZVRpbWUgPSAoRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRUaW1lKSAvIDEwMDA7XG4gICAgdGhpcy5hY3RpdmVTY2VuZT8uKGFjdGl2ZVRpbWUpO1xuICAgIHRoaXMuZnJhbWUrKztcbiAgfVxufVxuIiwiaW1wb3J0IHsgemVyb1BhZGRpbmcgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgaW5pdFN0YXRlID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogU3RhdGUgPT4gKHtcbiAgY3R4LFxuICBnYW1lU2NvcmU6IG5ldyBHYW1lU2NvcmUoKSxcbiAga2V5OiB7XG4gICAgYXJyb3dMZWZ0OiBmYWxzZSxcbiAgICBhcnJvd1JpZ2h0OiBmYWxzZSxcbiAgICBhcnJvd0Rvd246IGZhbHNlLFxuICAgIGFycm93VXA6IGZhbHNlLFxuICAgIHo6IGZhbHNlLFxuICB9LFxufSk7XG5cbmV4cG9ydCB0eXBlIFN0YXRlID0ge1xuICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgZ2FtZVNjb3JlOiBHYW1lU2NvcmU7XG4gIGtleToge1xuICAgIGFycm93TGVmdDogYm9vbGVhbjtcbiAgICBhcnJvd1JpZ2h0OiBib29sZWFuO1xuICAgIGFycm93VXA6IGJvb2xlYW47XG4gICAgYXJyb3dEb3duOiBib29sZWFuO1xuICAgIHo6IGJvb2xlYW47XG4gIH07XG59O1xuXG5jbGFzcyBHYW1lU2NvcmUge1xuICBzY29yZTogbnVtYmVyID0gMDtcblxuICBhZGQobnVtOiBudW1iZXIpIHtcbiAgICB0aGlzLnNjb3JlID0gTWF0aC5taW4odGhpcy5zY29yZSArIG51bSwgOTk5OTkpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5zY29yZSA9IDA7XG4gIH1cblxuICBkaXNwbGF5KCkge1xuICAgIHJldHVybiB6ZXJvUGFkZGluZyh0aGlzLnNjb3JlLCA1KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU3RhdGUgfSBmcm9tIFwiLi4vc3RhdGVcIjtcbmltcG9ydCB7IE9iamVjdEJhc2UsIFZlY3RvciB9IGZyb20gXCIuL2Jhc2VcIjtcblxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRTdGFyIGV4dGVuZHMgT2JqZWN0QmFzZSB7XG4gIHByaXZhdGUgc3RhdGU6IFN0YXRlO1xuICBwcml2YXRlIHNpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSBzcGVlZDogbnVtYmVyO1xuICBwcml2YXRlIGNvbG9yOiBzdHJpbmc7XG4gIHByaXZhdGUgcG9zaXRpb246IFZlY3RvciA9IG5ldyBWZWN0b3IoMCwgMCk7XG5cbiAgY29uc3RydWN0b3Ioc3RhdGU6IFN0YXRlLCBzaXplOiBudW1iZXIsIHNwZWVkOiBudW1iZXIsIGNvbG9yID0gXCIjZmZmZmZmXCIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gIH1cblxuICBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLnBvc2l0aW9uLnNldCh4LCB5KTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLnN0YXRlLmN0eC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgICB0aGlzLnN0YXRlLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xuICAgIHRoaXMucG9zaXRpb24ueSArPSB0aGlzLnNwZWVkO1xuICAgIHRoaXMuc3RhdGUuY3R4LmZpbGxSZWN0KFxuICAgICAgdGhpcy5wb3NpdGlvbi54IC0gdGhpcy5zaXplIC8gMixcbiAgICAgIHRoaXMucG9zaXRpb24ueSAtIHRoaXMuc2l6ZSAvIDIsXG4gICAgICB0aGlzLnNpemUsXG4gICAgICB0aGlzLnNpemVcbiAgICApO1xuICAgIGlmICh0aGlzLnBvc2l0aW9uLnkgKyB0aGlzLnNpemUgPiB0aGlzLnN0YXRlLmN0eC5jYW52YXMuaGVpZ2h0KSB7XG4gICAgICB0aGlzLnBvc2l0aW9uLnkgPSAtdGhpcy5zaXplO1xuICAgIH1cbiAgfVxufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAY2hhcnNldCBcXFwidXRmLThcXFwiO1xcblxcbioge1xcbiAgbWFyZ2luOiAwcHg7XFxuICBwYWRkaW5nOiAwcHg7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1NTU1O1xcbiAgY29sb3I6ICNmMGYwZjA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuXFxuY2FudmFzIHtcXG4gIG1hcmdpbjogMHB4IGF1dG87XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsZ0JBQWdCOztBQUVoQjtFQUNFLFdBQVc7RUFDWCxZQUFZO0FBQ2Q7O0FBRUE7O0VBRUUseUJBQXlCO0VBQ3pCLGNBQWM7RUFDZCxrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFlBQVk7RUFDWixnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBjaGFyc2V0IFxcXCJ1dGYtOFxcXCI7XFxuXFxuKiB7XFxuICBtYXJnaW46IDBweDtcXG4gIHBhZGRpbmc6IDBweDtcXG59XFxuXFxuaHRtbCxcXG5ib2R5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NTU1NTU7XFxuICBjb2xvcjogI2YwZjBmMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xcbn1cXG5cXG5jYW52YXMge1xcbiAgbWFyZ2luOiAwcHggYXV0bztcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgeyBpbml0IH0gZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgXCIuL3N0eWxlLmNzc1wiO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgaW5pdCk7XG4iLCJpbXBvcnQgKiBhcyB1dGlsIGZyb20gXCIuL2NhbnZhc1wiO1xuaW1wb3J0IHtcbiAgUGxheWVyLFxuICBTaG90LFxuICBFbmVteSxcbiAgRXhwbG9zaW9uLFxuICBPYmplY3RCYXNlLFxuICBCb3NzLFxuICBIb21pbmcsXG59IGZyb20gXCIuL2NoYXJhY3RlcnNcIjtcbmltcG9ydCB7IFNjZW5lTWFuYWdlciB9IGZyb20gXCIuL3NjZW5lXCI7XG5pbXBvcnQgeyBpbml0U3RhdGUgfSBmcm9tIFwiLi9zdGF0ZVwiO1xuaW1wb3J0IHsgYXJyYXksIGRlZ1RvUmFkLCBsb2FkSW1hZ2UgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHZpcGVySW1hZ2UgZnJvbSBcIi4vYXNzZXRzL2ltYWdlcy92aXBlci5wbmdcIjtcbmltcG9ydCB2aXBlclNob3RJbWFnZSBmcm9tIFwiLi9hc3NldHMvaW1hZ2VzL3ZpcGVyX3Nob3QucG5nXCI7XG5pbXBvcnQgdmlwZXJTaW5nbGVTaG90SW1hZ2UgZnJvbSBcIi4vYXNzZXRzL2ltYWdlcy92aXBlcl9zaW5nbGVfc2hvdC5wbmdcIjtcbmltcG9ydCBlbmVteVNtYWxsSW1hZ2UgZnJvbSBcIi4vYXNzZXRzL2ltYWdlcy9lbmVteV9zbWFsbC5wbmdcIjtcbmltcG9ydCBlbmVteUxhcmdlSW1hZ2UgZnJvbSBcIi4vYXNzZXRzL2ltYWdlcy9lbmVteV9sYXJnZS5wbmdcIjtcbmltcG9ydCBlbmVteVNob3RJbWFnZSBmcm9tIFwiLi9hc3NldHMvaW1hZ2VzL2VuZW15X3Nob3QucG5nXCI7XG5pbXBvcnQgYm9zc0ltYWdlIGZyb20gXCIuL2Fzc2V0cy9pbWFnZXMvYm9zcy5wbmdcIjtcbmltcG9ydCBob21pbmdJbWFnZSBmcm9tIFwiLi9hc3NldHMvaW1hZ2VzL2hvbWluZ19zaG90LnBuZ1wiO1xuaW1wb3J0IHsgQmFja2dyb3VuZFN0YXIgfSBmcm9tIFwiLi9jaGFyYWN0ZXJzL2JhY2tncm91bmRcIjtcblxuZXhwb3J0IGNvbnN0IGluaXQgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2NyZWVuXCIpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuXG4gIGNvbnN0IENBTlZBU19XSURUSCA9IDY0MDtcbiAgY29uc3QgQ0FOVkFTX0hFSUdIVCA9IDQ4MDtcblxuICBjb25zdCBTSE9UX01BWF9DT1VOVCA9IDEwO1xuICBjb25zdCBFTkVNWV9TTUFMTF9NQVhfQ09VTlQgPSAyMDtcbiAgY29uc3QgRU5FTVlfTEFSR0VfTUFYX0NPVU5UID0gNTtcbiAgY29uc3QgRU5FTVlfU0hPVF9NQVhfQ09VTlQgPSA1MDtcbiAgY29uc3QgSE9NSU5HX01BWF9DT1VOVCA9IDUwO1xuXG4gIGNvbnN0IEVYUExPU0lPTl9NQVhfQ09VTlQgPSAxMDtcblxuICBjb25zdCBCQUNLR1JPVU5EX1NUQVJfTUFYX0NPVU5UID0gMTAwO1xuICBjb25zdCBCQUNLR1JPVU5EX1NUQVJfTUFYX1NJWkUgPSAzO1xuICBjb25zdCBCQUNLR1JPVU5EX1NUQVJfTUFYX1NQRUVEID0gNDtcblxuICBjYW52YXMud2lkdGggPSBDQU5WQVNfV0lEVEg7XG4gIGNhbnZhcy5oZWlnaHQgPSBDQU5WQVNfSEVJR0hUO1xuICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpITtcbiAgY29uc3Qgc3RhdGUgPSBpbml0U3RhdGUoY3R4KTtcbiAgbGV0IHJlc3RhcnQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdCBpbWFnZXMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgbG9hZEltYWdlKHZpcGVySW1hZ2UpLFxuICAgIGxvYWRJbWFnZSh2aXBlclNob3RJbWFnZSksXG4gICAgbG9hZEltYWdlKHZpcGVyU2luZ2xlU2hvdEltYWdlKSxcbiAgXSk7XG4gIGNvbnN0IGVuZW15SW1hZ2VzID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGxvYWRJbWFnZShlbmVteVNtYWxsSW1hZ2UpLFxuICAgIGxvYWRJbWFnZShlbmVteUxhcmdlSW1hZ2UpLFxuICAgIGxvYWRJbWFnZShlbmVteVNob3RJbWFnZSksXG4gICAgbG9hZEltYWdlKGJvc3NJbWFnZSksXG4gICAgbG9hZEltYWdlKGhvbWluZ0ltYWdlKSxcbiAgXSk7XG5cbiAgY29uc3Qgb2JqZWN0czogT2JqZWN0QmFzZVtdID0gW107XG5cbiAgY29uc3Qgc2hvdHMgPSBhcnJheShcbiAgICBTSE9UX01BWF9DT1VOVCxcbiAgICAoKSA9PiBuZXcgU2hvdChzdGF0ZSwgaW1hZ2VzWzFdLCB7IHc6IDMyLCBoOiAzMiB9KVxuICApO1xuXG4gIGNvbnN0IHNpbmdsZVNob3RzID0gYXJyYXkoXG4gICAgU0hPVF9NQVhfQ09VTlQgKiAyLFxuICAgICgpID0+IG5ldyBTaG90KHN0YXRlLCBpbWFnZXNbMl0sIHsgdzogMzIsIGg6IDMyIH0pXG4gICk7XG4gIG9iamVjdHMucHVzaCguLi5zaG90cywgLi4uc2luZ2xlU2hvdHMpO1xuXG4gIGNvbnN0IHBsYXllciA9IG5ldyBQbGF5ZXIoXG4gICAgc3RhdGUsXG4gICAgaW1hZ2VzWzBdLFxuICAgIHsgdzogNjQsIGg6IDY0IH0sXG4gICAgeyBzaG90OiBzaG90cywgc2luZ2xlU2hvdDogc2luZ2xlU2hvdHMgfVxuICApO1xuICBvYmplY3RzLnB1c2gocGxheWVyKTtcbiAgcGxheWVyLnNldENvbWluZyhcbiAgICBDQU5WQVNfV0lEVEggLyAyLFxuICAgIENBTlZBU19IRUlHSFQsXG4gICAgQ0FOVkFTX1dJRFRIIC8gMixcbiAgICBDQU5WQVNfSEVJR0hUIC0gMTAwXG4gICk7XG5cbiAgY29uc3QgaG9taW5ncyA9IGFycmF5KFxuICAgIEhPTUlOR19NQVhfQ09VTlQsXG4gICAgKCkgPT4gbmV3IEhvbWluZyhzdGF0ZSwgZW5lbXlJbWFnZXNbNF0sIHsgdzogMzIsIGg6IDMyIH0pXG4gICk7XG4gIGNvbnN0IGVuZW15U2hvdHMgPSBbXG4gICAgLi4uYXJyYXkoXG4gICAgICBFTkVNWV9TSE9UX01BWF9DT1VOVCxcbiAgICAgICgpID0+IG5ldyBTaG90KHN0YXRlLCBlbmVteUltYWdlc1syXSwgeyB3OiA0OCwgaDogNDggfSlcbiAgICApLFxuICAgIC4uLmhvbWluZ3MsXG4gIF07XG4gIG9iamVjdHMucHVzaCguLi5lbmVteVNob3RzKTtcblxuICBjb25zdCBib3NzID0gbmV3IEJvc3MoXG4gICAgc3RhdGUsXG4gICAgZW5lbXlJbWFnZXNbM10sXG4gICAgeyB3OiAxMjgsIGg6IDEyOCB9LFxuICAgIHBsYXllcixcbiAgICBlbmVteVNob3RzLFxuICAgIGhvbWluZ3NcbiAgKTtcbiAgY29uc3QgZW5lbWllcyA9IFtcbiAgICAuLi5hcnJheShcbiAgICAgIEVORU1ZX1NNQUxMX01BWF9DT1VOVCxcbiAgICAgICgpID0+XG4gICAgICAgIG5ldyBFbmVteShzdGF0ZSwgZW5lbXlJbWFnZXNbMF0sIHsgdzogNDgsIGg6IDQ4IH0sIHBsYXllciwgZW5lbXlTaG90cylcbiAgICApLFxuICAgIC4uLmFycmF5KFxuICAgICAgRU5FTVlfTEFSR0VfTUFYX0NPVU5ULFxuICAgICAgKCkgPT5cbiAgICAgICAgbmV3IEVuZW15KHN0YXRlLCBlbmVteUltYWdlc1sxXSwgeyB3OiA2NCwgaDogNjQgfSwgcGxheWVyLCBlbmVteVNob3RzKVxuICAgICksXG4gICAgYm9zcyxcbiAgXTtcbiAgb2JqZWN0cy5wdXNoKC4uLmVuZW1pZXMpO1xuXG4gIGNvbnN0IGV4cGxvc2lvbnMgPSBhcnJheShcbiAgICBFWFBMT1NJT05fTUFYX0NPVU5ULFxuICAgICgpID0+IG5ldyBFeHBsb3Npb24oY3R4LCAxMDAuMCwgMTUsIDQwLjAsIDEuMClcbiAgKTtcbiAgb2JqZWN0cy5wdXNoKC4uLmV4cGxvc2lvbnMpO1xuXG4gIFsuLi5zaG90cywgLi4uc2luZ2xlU2hvdHNdLmZvckVhY2goKHMpID0+IHtcbiAgICBzLnNldFRhcmdldHMoZW5lbWllcyk7XG4gICAgcy5zZXRFeHBsb3Npb25zKGV4cGxvc2lvbnMpO1xuICB9KTtcbiAgZW5lbXlTaG90cy5mb3JFYWNoKChzKSA9PiB7XG4gICAgcy5zZXRUYXJnZXRzKFtwbGF5ZXJdKTtcbiAgICBzLnNldEV4cGxvc2lvbnMoZXhwbG9zaW9ucyk7XG4gIH0pO1xuXG4gIGNvbnN0IGJhY2tncm91bmRTdGFycyA9IGFycmF5KEJBQ0tHUk9VTkRfU1RBUl9NQVhfQ09VTlQsICgpID0+IHtcbiAgICBjb25zdCBzaXplID0gMSArIE1hdGgucmFuZG9tKCkgKiAoQkFDS0dST1VORF9TVEFSX01BWF9TSVpFIC0gMSk7XG4gICAgY29uc3Qgc3BlZWQgPSAxICsgTWF0aC5yYW5kb20oKSAqIChCQUNLR1JPVU5EX1NUQVJfTUFYX1NQRUVEIC0gMSk7XG4gICAgY29uc3Qgc3RhciA9IG5ldyBCYWNrZ3JvdW5kU3RhcihzdGF0ZSwgc2l6ZSwgc3BlZWQpO1xuICAgIHN0YXIuc2V0KE1hdGgucmFuZG9tKCkgKiBDQU5WQVNfV0lEVEgsIE1hdGgucmFuZG9tKCkgKiBDQU5WQVNfSEVJR0hUKTtcbiAgICByZXR1cm4gc3RhcjtcbiAgfSk7XG4gIG9iamVjdHMucHVzaCguLi5iYWNrZ3JvdW5kU3RhcnMpO1xuXG4gIGNvbnN0IHNjZW5lID0gbmV3IFNjZW5lTWFuYWdlcigpO1xuICBzY2VuZS5hZGQoXCJpbnRyb1wiLCAodGltZSkgPT4ge1xuICAgIGlmICh0aW1lID4gMy4wKSB7XG4gICAgICBzY2VuZS51c2UoXCJpbnZhZGVfZGVmYXVsdF90eXBlXCIpO1xuICAgIH1cbiAgfSk7XG4gIHNjZW5lLmFkZChcImludmFkZV9kZWZhdWx0X3R5cGVcIiwgKHRpbWUpID0+IHtcbiAgICBpZiAoc2NlbmUuZnJhbWUgJSAzMCA9PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IGUgb2YgZW5lbWllcykge1xuICAgICAgICBpZiAoZS5saWZlIDw9IDApIHtcbiAgICAgICAgICBpZiAoc2NlbmUuZnJhbWUgJSA2MCA9PT0gMCkge1xuICAgICAgICAgICAgZS5zZXQoLWUud2lkdGgsIDMwLCAyLCBcImRlZmF1bHRcIik7XG4gICAgICAgICAgICBlLnNldFZlY3RvckZyb21BbmdsZShkZWdUb1JhZCgzMCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnNldChDQU5WQVNfV0lEVEggKyBlLndpZHRoLCAzMCwgMiwgXCJkZWZhdWx0XCIpO1xuICAgICAgICAgICAgZS5zZXRWZWN0b3JGcm9tQW5nbGUoZGVnVG9SYWQoMTUwKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzY2VuZS5mcmFtZSA9PT0gMjcwKSB7XG4gICAgICBzY2VuZS51c2UoXCJibGFua1wiKTtcbiAgICB9XG4gICAgaWYgKHBsYXllci5saWZlIDw9IDApIHtcbiAgICAgIHNjZW5lLnVzZShcImdhbWVvdmVyXCIpO1xuICAgIH1cbiAgfSk7XG4gIHNjZW5lLmFkZChcImJsYW5rXCIsICh0aW1lKSA9PiB7XG4gICAgaWYgKHNjZW5lLmZyYW1lID09PSAxNTApIHtcbiAgICAgIHNjZW5lLnVzZShcImludmFkZV93YXZlX21vdmVfdHlwZVwiKTtcbiAgICB9XG4gICAgaWYgKHBsYXllci5saWZlIDw9IDApIHtcbiAgICAgIHNjZW5lLnVzZShcImdhbWVvdmVyXCIpO1xuICAgIH1cbiAgfSk7XG4gIHNjZW5lLmFkZChcImludmFkZV93YXZlX21vdmVfdHlwZVwiLCAodGltZSkgPT4ge1xuICAgIGlmIChzY2VuZS5mcmFtZSAlIDUwID09PSAwKSB7XG4gICAgICBmb3IgKGNvbnN0IGUgb2YgZW5lbWllcykge1xuICAgICAgICBpZiAoZS5saWZlIDw9IDApIHtcbiAgICAgICAgICBpZiAoc2NlbmUuZnJhbWUgPD0gMjAwKSB7XG4gICAgICAgICAgICBlLnNldChDQU5WQVNfV0lEVEggKiAwLjIsIC1lLmhlaWdodCwgMiwgXCJ3YXZlXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlLnNldChDQU5WQVNfV0lEVEggKiAwLjgsIC1lLmhlaWdodCwgMiwgXCJ3YXZlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NlbmUuZnJhbWUgPT09IDQ1MCkge1xuICAgICAgc2NlbmUudXNlKFwiaW52YWRlX2xhcmdlX3R5cGVcIik7XG4gICAgfVxuICAgIGlmIChwbGF5ZXIubGlmZSA8PSAwKSB7XG4gICAgICBzY2VuZS51c2UoXCJnYW1lb3ZlclwiKTtcbiAgICB9XG4gIH0pO1xuICBzY2VuZS5hZGQoXCJpbnZhZGVfbGFyZ2VfdHlwZVwiLCAodGltZSkgPT4ge1xuICAgIGlmIChzY2VuZS5mcmFtZSA9PT0gMTAwKSB7XG4gICAgICBsZXQgbWF4ID0gRU5FTVlfU01BTExfTUFYX0NPVU5UICsgRU5FTVlfTEFSR0VfTUFYX0NPVU5UO1xuICAgICAgZm9yIChsZXQgaSA9IEVORU1ZX1NNQUxMX01BWF9DT1VOVDsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgIGlmIChlbmVtaWVzW2ldLmxpZmUgPD0gMCkge1xuICAgICAgICAgIGxldCBlID0gZW5lbWllc1tpXTtcbiAgICAgICAgICBlLnNldChDQU5WQVNfV0lEVEggLyAyLCAtZS5oZWlnaHQsIDUwLCBcImxhcmdlXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzY2VuZS5mcmFtZSA9PT0gNTAwKSB7XG4gICAgICBzY2VuZS51c2UoXCJpbnZhZGVfYm9zc1wiKTtcbiAgICB9XG4gICAgaWYgKHBsYXllci5saWZlIDw9IDApIHtcbiAgICAgIHNjZW5lLnVzZShcImdhbWVvdmVyXCIpO1xuICAgIH1cbiAgfSk7XG4gIHNjZW5lLmFkZChcImludmFkZV9ib3NzXCIsICh0aW1lKSA9PiB7XG4gICAgaWYgKHNjZW5lLmZyYW1lID09PSAwKSB7XG4gICAgICBib3NzLnNldChDQU5WQVNfV0lEVEggLyAyLCAtYm9zcy5oZWlnaHQsIDI1MCk7XG4gICAgICBib3NzLnNldE1vZGUoXCJpbnZhZGVcIik7XG4gICAgfVxuICAgIGlmIChwbGF5ZXIubGlmZSA8PSAwKSB7XG4gICAgICBzY2VuZS51c2UoXCJnYW1lb3ZlclwiKTtcbiAgICAgIGJvc3Muc2V0TW9kZShcImVzY2FwZVwiKTtcbiAgICB9XG4gICAgaWYgKGJvc3MubGlmZSA8PSAwKSB7XG4gICAgICBzY2VuZS51c2UoXCJpbnRyb1wiKTtcbiAgICB9XG4gIH0pO1xuICBzY2VuZS5hZGQoXCJnYW1lb3ZlclwiLCAodGltZSkgPT4ge1xuICAgIGNvbnN0IHRleHRXaWR0aCA9IENBTlZBU19XSURUSCAvIDI7XG4gICAgY29uc3QgbG9vcFdpZHRoID0gQ0FOVkFTX1dJRFRIICsgdGV4dFdpZHRoO1xuICAgIGNvbnN0IHggPSBDQU5WQVNfV0lEVEggLSAoKHNjZW5lLmZyYW1lICogMikgJSBsb29wV2lkdGgpO1xuICAgIGN0eC5mb250ID0gXCJib2xkIDcycHggc2Fucy1zZXJpZlwiO1xuICAgIHV0aWwuZHJhd1RleHQoY3R4LCBcIkdBTUUgT1ZFUlwiLCB4LCBDQU5WQVNfSEVJR0hUIC8gMiwgXCIjZmYwMDAwXCIsIHRleHRXaWR0aCk7XG4gICAgaWYgKHJlc3RhcnQpIHtcbiAgICAgIHJlc3RhcnQgPSBmYWxzZTtcbiAgICAgIHN0YXRlLmdhbWVTY29yZS5yZXNldCgpO1xuICAgICAgcGxheWVyLnNldENvbWluZyhcbiAgICAgICAgQ0FOVkFTX1dJRFRIIC8gMixcbiAgICAgICAgQ0FOVkFTX0hFSUdIVCArIDUwLFxuICAgICAgICBDQU5WQVNfV0lEVEggLyAyLFxuICAgICAgICBDQU5WQVNfSEVJR0hUIC0gMTAwXG4gICAgICApO1xuICAgICAgc2NlbmUudXNlKFwiaW50cm9cIik7XG4gICAgfVxuICB9KTtcbiAgc2NlbmUudXNlKFwiaW50cm9cIik7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgIHN0YXRlLmtleS5hcnJvd0xlZnQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG4gICAgICAgIHN0YXRlLmtleS5hcnJvd1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICBzdGF0ZS5rZXkuYXJyb3dVcCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICBzdGF0ZS5rZXkuYXJyb3dEb3duID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwielwiOlxuICAgICAgICBzdGF0ZS5rZXkueiA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICAgIGlmIChwbGF5ZXIubGlmZSA8PSAwKSB7XG4gICAgICAgICAgcmVzdGFydCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0pO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChldmVudCkgPT4ge1xuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgIHN0YXRlLmtleS5hcnJvd0xlZnQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICBzdGF0ZS5rZXkuYXJyb3dSaWdodCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICAgIHN0YXRlLmtleS5hcnJvd1VwID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICBzdGF0ZS5rZXkuYXJyb3dEb3duID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInpcIjpcbiAgICAgICAgc3RhdGUua2V5LnogPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0pO1xuXG4gIGxldCBzdGFydFRpbWU6IG51bWJlcjtcbiAgKGZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgY29uc3QgaXNSZWFkeSA9IG9iamVjdHMuZXZlcnkoKGMpID0+IGMucmVhZHkoKSk7XG4gICAgaWYgKCFpc1JlYWR5KSB7XG4gICAgICBzZXRUaW1lb3V0KHdhaXQsIDEwMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgcmVuZGVyKCk7XG4gIH0pKCk7XG5cbiAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgICB1dGlsLmRyYXdSZWN0KGN0eCwgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0LCBcIiMxMTExMjJcIik7XG5cbiAgICBjdHguZm9udCA9IFwiYm9sZCAyNHB4IG1vbm9zcGFjZVwiO1xuICAgIHV0aWwuZHJhd1RleHQoY3R4LCBzdGF0ZS5nYW1lU2NvcmUuZGlzcGxheSgpLCAzMCwgNTAsIFwiI2ZmZmZmZlwiKTtcblxuICAgIHNjZW5lLnVwZGF0ZSgpO1xuXG4gICAgb2JqZWN0cy5mb3JFYWNoKChjKSA9PiBjLnVwZGF0ZSgpKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=