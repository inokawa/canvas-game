(()=>{"use strict";var t,e,n,o,i,r,s,a,c,h,u,f,p,l,d,y,w,v,g,m,b,A,x,S,C={426:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),i=n.n(o),r=n(645),s=n.n(r)()(i());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(o)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(i[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);o&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,i=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,i=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(t){i=!0,r=t}finally{try{o||null==a.return||a.return()}finally{if(i)throw r}}return n}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=i[1],s=i[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[r].concat(u).concat([h]).join("\n")}return[r].join("\n")}},379:(t,e,n)=>{var o,i=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),r=[];function s(t){for(var e=-1,n=0;n<r.length;n++)if(r[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],i=0;i<t.length;i++){var a=t[i],c=e.base?a[0]+e.base:a[0],h=n[c]||0,u="".concat(c," ").concat(h);n[c]=h+1;var f=s(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(r[f].references++,r[f].updater(p)):r.push({identifier:u,updater:y(p,e),references:1}),o.push(u)}return o}function c(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var r=n.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var s=i(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function f(t,e,n,o){var i=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=u(e,i);else{var r=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function p(t,e,n){var o=n.css,i=n.media,r=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var l=null,d=0;function y(t,e){var n,o,i;if(e.singleton){var r=d++;n=l||(l=c(e)),o=f.bind(null,n,r,!1),i=f.bind(null,n,r,!0)}else n=c(e),o=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var i=s(n[o]);r[i].references--}for(var c=a(t,e),h=0;h<n.length;h++){var u=s(n[h]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}n=c}}}},403:(t,e,n)=>{t.exports=n.p+"557374f791944ecf6c01.png"},657:(t,e,n)=>{t.exports=n.p+"a98f39017db8c62ba701.png"},446:(t,e,n)=>{t.exports=n.p+"82300f5733384f973929.png"},18:(t,e,n)=>{t.exports=n.p+"4233d78f478d9acd0230.png"},734:(t,e,n)=>{t.exports=n.p+"ff33312c29e171e364d7.png"}},E={};function k(t){if(E[t])return E[t].exports;var e=E[t]={id:t,exports:{}};return C[t](e,e.exports,k),e.exports}k.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return k.d(e,{a:e}),e},k.d=(t,e)=>{for(var n in e)k.o(e,n)&&!k.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},k.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),k.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;k.g.importScripts&&(t=k.g.location+"");var e=k.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),k.p=t})(),e=function(t){return t/360*Math.PI*2},n=function(t,e){return Array.from({length:t}).map(e)},t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},o=function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)},i=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t}(),r=function(t){function e(e,n){return t.call(this,e,n)||this}return o(e,t),e.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},e}(i),s=function(){function t(t,n,o){var s,a,c,h,u=o.x,f=void 0===u?0:u,p=o.y,l=void 0===p?0:p,d=o.w,y=o.h,w=o.life,v=void 0===w?0:w;this.ctx=t,this.position=new i(f,l),this.vector=new r(0,-1),this.width=d,this.height=y,this.angle=e(270),this.life=v,s=this,a=void 0,h=function(){var t;return function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,o=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){s.label=r[1];break}if(6===r[0]&&s.label<i[1]){s.label=i[1],i=r;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(r);break}i[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,(o=n,new Promise((function(t,e){var n=new Image;n.addEventListener("load",(function(){t(n)})),n.src=o})))];case 1:return t.image=e.sent(),[2]}var o}))},new((c=void 0)||(c=Promise))((function(t,e){function n(t){try{i(h.next(t))}catch(t){e(t)}}function o(t){try{i(h.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof c?i:new c((function(t){t(i)}))).then(n,o)}i((h=h.apply(s,a||[])).next())}))}return t.prototype.setVector=function(t,e){this.vector.set(t,e)},t.prototype.setVectorFromAngle=function(t){this.angle=t,this.vector.setAngle(t)},t.prototype.draw=function(){if(this.image){var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)}},t.prototype.rotationDraw=function(){if(this.image){this.ctx.save(),this.ctx.translate(this.position.x,this.position.y),this.ctx.rotate(this.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.ctx.restore()}},t.prototype.update=function(){},t.prototype.ready=function(){return!!this.image},t}(),a=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),c="default",h=function(t){function e(e,n,o,i){var r=t.call(this,e,n,o)||this;return r.speed=3,r.frame=0,r.type=c,r.shotArray=i,r}return a(e,t),e.prototype.set=function(t,e,n,o){void 0===n&&(n=1),void 0===o&&(o=c),this.position.set(t,e),this.life=n,this.type=o,this.frame=0},e.prototype.fire=function(t,e){void 0===t&&(t=0),void 0===e&&(e=1);for(var n=0;n<this.shotArray.length;n++)if(this.shotArray[n].life<=0){this.shotArray[n].set(this.position.x,this.position.y),this.shotArray[n].setSpeed(5),this.shotArray[n].setVector(t,e);break}},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case c:50==this.frame&&this.fire(),this.position.y-this.height>this.ctx.canvas.height&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed}this.draw(),this.frame++}},e}(s),u=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),f=function(t){function n(e,n,o,i,r){var s=r.shot,a=r.singleShot,c=t.call(this,n,o,i)||this;return c.speed=3,c.shotCheckCounter=0,c.shotInterval=10,c.isComing=!1,c.state=e,c.shotArray=s,c.singleShotArray=a,c}return u(n,t),n.prototype.update=function(){if(this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var n=(t-this.comingStart)/1e3,o=this.comingStartPosition.y-50*n;o<=this.comingEndPosition.y&&(this.isComing=!1,o=this.comingEndPosition.y),this.position.set(this.position.x,o),t%100<50&&(this.ctx.globalAlpha=.5)}else if(this.state.isKeyDown.arrowLeft&&(this.position.x-=this.speed),this.state.isKeyDown.arrowRight&&(this.position.x+=this.speed),this.state.isKeyDown.arrowUp&&(this.position.y-=this.speed),this.state.isKeyDown.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.ctx.canvas.height)),this.state.isKeyDown.z&&this.shotCheckCounter>=0){for(var i=0;i<this.shotArray.length;i++)if(this.shotArray[i].life<=0){this.shotArray[i].set(this.position.x,this.position.y),this.shotArray[i].setPower(2),this.shotCheckCounter=-this.shotInterval;break}for(i=0;i<this.singleShotArray.length;i+=2)if(this.singleShotArray[i].life<=0&&this.singleShotArray[i+1].life<=0){var r=e(280),s=e(260);this.singleShotArray[i].set(this.position.x,this.position.y),this.singleShotArray[i].setVectorFromAngle(r),this.singleShotArray[i+1].set(this.position.x,this.position.y),this.singleShotArray[i+1].setVectorFromAngle(s),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.ctx.globalAlpha=1}},n.prototype.setComing=function(t,e,n,o){this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new i(t,e),this.comingEndPosition=new i(n,o)},n}(s),p=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),l=function(t){function e(e,n,o){var i=t.call(this,e,n,o)||this;return i.speed=7,i.power=1,i.targetArray=[],i}return p(e,t),e.prototype.set=function(t,e){this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.update=function(){var t=this;this.life<=0||((this.position.y+this.height<0||this.position.y-this.height>this.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){e.life<=0||t.position.distance(e.position)<=(t.width+e.width)/4&&(e.life-=t.power,t.life=0)})),this.rotationDraw())},e}(s),d=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),y=k(446),w=k(18),v=k(734),g=k(657),m=k(403),b=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var o=Array(t),i=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,i++)o[i]=r[s];return o},A=k(379),x=k.n(A),S=k(426),x()(S.Z,{insert:"head",singleton:!1}),S.Z.locals,window.addEventListener("load",(function(){return t=void 0,e=void 0,i=function(){function t(){var n,o,s;i.globalAlpha=1,n=i,o=e.width,s=e.height,n.fillStyle="#eeeeee",n.fillRect(0,0,o,s),A.update(),r.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var e,o,i,r,s,a,c,u,p,A;return function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,o=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){s.label=r[1];break}if(6===r[0]&&s.label<i[1]){s.label=i[1],i=r;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(r);break}i[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(x){return e=document.querySelector("#screen"),o={isKeyDown:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}},e.width=640,e.height=480,i=e.getContext("2d"),r=[],s=n(10,(function(){return new l(i,w,{w:32,h:32})})),a=n(20,(function(){return new l(i,v,{w:32,h:32})})),r.push.apply(r,b(s,a)),c=new f(o,i,y,{w:64,h:64},{shot:s,singleShot:a}),r.push(c),c.setComing(320,480,320,380),u=n(50,(function(){return new l(i,m,{w:48,h:48})})),r.push.apply(r,u),p=n(10,(function(){return new h(i,g,{w:48,h:48},u)})),r.push.apply(r,p),b(s,a).forEach((function(t){return t.setTargets(p)})),(A=new d).add("intro",(function(t){t>2&&A.use("invade")})),A.add("invade",(function(t){if(0==A.frame){for(var e=0;e<10;e++)if(p[e].life<=0){var n=p[e];n.set(320,-n.height,2,"default"),n.setVector(0,1);break}}else 100===A.frame&&A.use("invade")})),A.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":o.isKeyDown.arrowLeft=!0;break;case"ArrowRight":o.isKeyDown.arrowRight=!0;break;case"ArrowUp":o.isKeyDown.arrowUp=!0;break;case"ArrowDown":o.isKeyDown.arrowDown=!0;break;case"z":o.isKeyDown.z=!0}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":o.isKeyDown.arrowLeft=!1;break;case"ArrowRight":o.isKeyDown.arrowRight=!1;break;case"ArrowUp":o.isKeyDown.arrowUp=!1;break;case"ArrowDown":o.isKeyDown.arrowDown=!1;break;case"z":o.isKeyDown.z=!1}})),function e(){r.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}))},new((o=void 0)||(o=Promise))((function(n,r){function s(t){try{c(i.next(t))}catch(t){r(t)}}function a(t){try{c(i.throw(t))}catch(t){r(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}));var t,e,o,i}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,