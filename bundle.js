(()=>{"use strict";var t,e,i,o,n,r,s,a,h,c,f,p,u,l,d,y,v,g,m,w,b,x,A,k,_,S,C,E,M,O,j,P,T,B,I,z={426:(t,e,i)=>{i.d(e,{Z:()=>a});var o=i(15),n=i.n(o),r=i(645),s=i.n(r)()(n());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,o){"string"==typeof t&&(t=[[null,t,""]]);var n={};if(o)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(n[s]=!0)}for(var a=0;a<t.length;a++){var h=[].concat(t[a]);o&&n[h[0]]||(i&&(h[2]?h[2]="".concat(i," and ").concat(h[2]):h[2]=i),e.push(h))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}t.exports=function(t){var i,o,n=(o=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var i=[],o=!0,n=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(i.push(s.value),!e||i.length!==e);o=!0);}catch(t){n=!0,r=t}finally{try{o||null==a.return||a.return()}finally{if(n)throw r}}return i}}(i,o)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,i):void 0}}(i,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=n[1],s=n[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),h="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(h," */"),f=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[r].concat(f).concat([c]).join("\n")}return[r].join("\n")}},379:(t,e,i)=>{var o,n=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),r=[];function s(t){for(var e=-1,i=0;i<r.length;i++)if(r[i].identifier===t){e=i;break}return e}function a(t,e){for(var i={},o=[],n=0;n<t.length;n++){var a=t[n],h=e.base?a[0]+e.base:a[0],c=i[h]||0,f="".concat(h," ").concat(c);i[h]=c+1;var p=s(f),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(r[p].references++,r[p].updater(u)):r.push({identifier:f,updater:y(u,e),references:1}),o.push(f)}return o}function h(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var r=i.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var s=n(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,f=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function p(t,e,i,o){var n=i?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=f(e,n);else{var r=document.createTextNode(n),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function u(t,e,i){var o=i.css,n=i.media,r=i.sourceMap;if(n?t.setAttribute("media",n):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var l=null,d=0;function y(t,e){var i,o,n;if(e.singleton){var r=d++;i=l||(l=h(e)),o=p.bind(null,i,r,!1),n=p.bind(null,i,r,!0)}else i=h(e),o=u.bind(null,i,e),n=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else n()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var i=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<i.length;o++){var n=s(i[o]);r[n].references--}for(var h=a(t,e),c=0;c<i.length;c++){var f=s(i[c]);0===r[f].references&&(r[f].updater(),r.splice(f,1))}i=h}}}},912:(t,e,i)=>{t.exports=i.p+"a22c11e4c60818a27c90.png"},321:(t,e,i)=>{t.exports=i.p+"f4a1ccee5877de288df2.png"},403:(t,e,i)=>{t.exports=i.p+"557374f791944ecf6c01.png"},657:(t,e,i)=>{t.exports=i.p+"a98f39017db8c62ba701.png"},265:(t,e,i)=>{t.exports=i.p+"fa038d64bc176df871b8.png"},446:(t,e,i)=>{t.exports=i.p+"82300f5733384f973929.png"},18:(t,e,i)=>{t.exports=i.p+"4233d78f478d9acd0230.png"},734:(t,e,i)=>{t.exports=i.p+"ff33312c29e171e364d7.png"}},R={};function D(t){if(R[t])return R[t].exports;var e=R[t]={id:t,exports:{}};return z[t](e,e.exports,D),e.exports}D.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return D.d(e,{a:e}),e},D.d=(t,e)=>{for(var i in e)D.o(e,i)&&!D.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},D.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),D.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;D.g.importScripts&&(t=D.g.location+"");var e=D.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),D.p=t})(),e=function(t,e,i,o,n,r){null!=n&&(t.fillStyle=n),t.fillText(e,i,o,r)},i=function(t){return new Promise((function(e,i){var o=new Image;o.addEventListener("load",(function(){e(o)})),o.src=t}))},o=function(t){return t/360*Math.PI*2},n=function(t,e){return Array.from({length:t}).map(e)},t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)},r=function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)},s=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.new=function(e,i){return void 0===e&&(e=0),void 0===i&&(i=-1),new t(e,i)},t.unit=function(e,i){var o=this.dot(e,i);return new t(e/o,i/o)},t.fromAngle=function(e){return new t(Math.cos(e),Math.sin(e))},t.dot=function(t,e){return function(t,e){return Math.sqrt(t*t+e*e)}(t,e)},Object.defineProperty(t.prototype,"angle",{get:function(){var t=Math.asin(this.y);return this.x>=0?t:Math.PI-t},enumerable:!1,configurable:!0}),t.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},t.prototype.distance=function(e){var i=this.x-e.x,o=this.y-e.y;return t.dot(i,o)},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.rotate=function(t){var e=Math.sin(t),i=Math.cos(t);this.x=this.x*i+this.y*-e,this.y=this.x*e+this.y*i},t}(),a=function(){function t(){}return t.prototype.ready=function(){return!0},t}(),h=function(t){function e(e,i,o){var n=o.x,r=void 0===n?0:n,a=o.y,h=void 0===a?0:a,c=o.w,f=o.h,p=o.life,u=void 0===p?0:p,l=t.call(this)||this;return l.state=e,l.position=new s(r,h),l.vector=s.new(),l.width=c,l.height=f,l.life=u,l.image=i,l}return r(e,t),e.prototype.setVector=function(t,e){this.vector.set(t,e)},e.prototype.setVectorFromAngle=function(t){this.vector.setAngle(t)},e.prototype.draw=function(){var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)},e.prototype.rotationDraw=function(){this.state.ctx.save(),this.state.ctx.translate(this.position.x,this.position.y),this.state.ctx.rotate(this.vector.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.state.ctx.restore()},e.prototype.isInvincible=function(){return!1},e.prototype.destroyed=function(){},e.prototype.ready=function(){return!!this.image},e}(a),c=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),f=function(t){function e(e,i,o,n,r){var s=t.call(this,e,i,o)||this;return s.speed=3,s.frame=0,s.type="default",s.attackTarget=n,s.shotArray=r,s}return c(e,t),e.prototype.set=function(t,e,i,o){void 0===i&&(i=1),void 0===o&&(o="default"),this.position.set(t,e),this.life=i,this.type=o,this.frame=0},e.prototype.fire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=5);for(var o=0,n=this.shotArray;o<n.length;o++){var r=n[o];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.destroyed=function(){"large"===this.type?this.state.gameScore.add(1e3):this.state.gameScore.add(100)},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case"default":100==this.frame&&this.fire(),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed;break;case"wave":if(this.frame%60==0){var t=this.attackTarget.position.x-this.position.x,e=this.attackTarget.position.y-this.position.y,i=s.unit(t,e);this.fire(i.x,i.y,4)}this.position.x+=Math.sin(this.frame/10),this.position.y+=2;break;case"large":if(this.frame%50==0)for(var o=0;o<360;o+=45){var n=o*Math.PI/180;this.fire(Math.cos(n),Math.sin(n),3)}this.position.x+=2*Math.sin((this.frame+90)/50),this.position.y+=1}this.position.y-this.height>this.state.ctx.canvas.height&&(this.life=0),this.draw(),this.frame++}},e}(h),p=function(t){function e(e,i,o,n,r,s){var a=t.call(this,e,i,o,n,r)||this;return a.mode="",a.frame=0,a.speed=3,a.homingArray=s,a}return c(e,t),e.prototype.setMode=function(t){this.mode=t},e.prototype.fire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=5);for(var o=0,n=this.shotArray;o<n.length;o++){var r=n[o];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.homingFire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=3);for(var o=0,n=this.homingArray;o<n.length;o++){var r=n[o];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.destroyed=function(){this.state.gameScore.add(15e3)},e.prototype.update=function(){if(!(this.life<=0)){switch(this.mode){case"invade":this.position.y+=this.speed,this.position.y>100&&(this.position.y=100,this.mode="floating",this.frame=0);break;case"escape":this.position.y-=this.speed,this.position.y<-this.height&&(this.life=0);break;case"floating":if(this.frame%1e3<500){if(this.frame%200>140&&this.frame%10==0){var t=this.attackTarget.position.x-this.position.x,e=this.attackTarget.position.y-this.position.y,i=s.unit(t,e);this.fire(i.x,i.y,3)}}else this.frame%50==0&&this.homingFire(0,1,3.5);this.position.x+=2*Math.cos(this.frame/100)}this.draw(),this.frame++}},e}(f),u=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),l=function(t){function e(e,i,o,n,r,s){void 0===s&&(s="#ff1166");var a=t.call(this)||this;return a.life=!1,a.fires=[],a.startTime=0,a.ctx=e,a.radius=i,a.count=o,a.size=n,a.timeRange=r,a.color=s,a}return u(e,t),e.prototype.set=function(t,e){var i=this;this.fires=n(this.count,(function(){return{position:new s(t,e),vector:s.fromAngle(Math.random()*Math.PI*2),size:(.5*Math.random()+.5)*i.size}})),this.life=!0,this.startTime=Date.now()},e.prototype.update=function(){if(this.life){this.ctx.fillStyle=this.color,this.ctx.globalAlpha=.5;for(var t=(Date.now()-this.startTime)/1e3,e=1-(c=1-Math.min(t/this.timeRange,1))*c*c*c,i=1-e,o=0,n=this.fires;o<n.length;o++){var r=n[o],s=this.radius*e,a=r.position.x+r.vector.x*s,h=r.position.y+r.vector.y*s;this.ctx.fillRect(a-r.size*i/2,h-r.size*i/2,r.size*i,r.size*i)}e>=1&&(this.life=!1)}var c},e}(a),d=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),y=function(t){function e(e,i,o,n){var r=n.shot,s=n.singleShot,a=t.call(this,e,i,o)||this;return a.speed=3,a.shotCheckCounter=0,a.shotInterval=10,a.isComing=!1,a.state=e,a.shotArray=r,a.singleShotArray=s,a}return d(e,t),e.prototype.isInvincible=function(){return this.isComing},e.prototype.update=function(){if(!(this.life<=0)&&this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var e=(t-this.comingStart)/1e3,i=this.comingStartPosition.y-50*e;i<=this.comingEndPosition.y&&(this.isComing=!1,i=this.comingEndPosition.y),this.position.set(this.position.x,i),t%100<50&&(this.state.ctx.globalAlpha=.5)}else if(this.state.key.arrowLeft&&(this.position.x-=this.speed),this.state.key.arrowRight&&(this.position.x+=this.speed),this.state.key.arrowUp&&(this.position.y-=this.speed),this.state.key.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.state.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.state.ctx.canvas.height)),this.state.key.z&&this.shotCheckCounter>=0){for(var n=0,r=this.shotArray;n<r.length;n++){var s=r[n];if(s.life<=0){s.set(this.position.x,this.position.y),s.setPower(2),this.shotCheckCounter=-this.shotInterval;break}}for(var a=0;a<this.singleShotArray.length;a+=2)if(this.singleShotArray[a].life<=0&&this.singleShotArray[a+1].life<=0){var h=o(280),c=o(260);this.singleShotArray[a].set(this.position.x,this.position.y),this.singleShotArray[a].setVectorFromAngle(h),this.singleShotArray[a+1].set(this.position.x,this.position.y),this.singleShotArray[a+1].setVectorFromAngle(c),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.state.ctx.globalAlpha=1}},e.prototype.setComing=function(t,e,i,o){this.life=1,this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new s(t,e),this.comingEndPosition=new s(i,o)},e}(h),v=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),g=function(t){function e(e,i,o){var n=t.call(this,e,i,o)||this;return n.speed=7,n.power=1,n.targetArray=[],n.explosionArray=[],n}return v(e,t),e.prototype.set=function(t,e,i,o){void 0===i&&(i=7),void 0===o&&(o=1),this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.setExplosions=function(t){this.explosionArray=t},e.prototype.hasCollision=function(t){return this.position.distance(t.position)<=(this.width+t.width)/4},e.prototype.update=function(){var t=this;this.life<=0||((this.position.x+this.width<0||this.position.x-this.width>this.state.ctx.canvas.width||this.position.y+this.height<0||this.position.y-this.height>this.state.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){if(!(e.life<=0)&&t.hasCollision(e)&&!e.isInvincible()){if(e.life-=t.power,e.life<=0){for(var i=0,o=t.explosionArray;i<o.length;i++){var n=o[i];if(!n.life){n.set(e.position.x,e.position.y);break}}e.destroyed()}t.life=0}})),this.rotationDraw())},e}(h),m=function(t){function e(e,i,o){var n=t.call(this,e,i,o)||this;return n.frame=0,n}return v(e,t),e.prototype.set=function(e,i,o,n){t.prototype.set.call(this,e,i,o,n),this.frame=0},e.prototype.update=function(){var t=this;if(!(this.life<=0)){(this.position.x+this.width<0||this.position.x-this.width>this.state.ctx.canvas.width||this.position.y+this.height<0||this.position.y-this.height>this.state.ctx.canvas.height)&&(this.life=0);var e=this.targetArray[0];if(this.frame<100){var i=s.unit(e.position.x-this.position.x,e.position.y-this.position.y);this.vector=s.unit(this.vector.x,this.vector.y);var o=this.vector.cross(i),n=Math.PI/180;o>0?this.vector.rotate(n):o<0&&this.vector.rotate(-n)}this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.targetArray.forEach((function(e){if(!(t.life<=0||e.life<=0)&&t.position.distance(e.position)<=(t.width+e.width)/4){if(e instanceof y&&!0===e.isComing)return;if(e.life-=t.power,e.life<=0){for(var i=0;i<t.explosionArray.length;++i)if(!0!==t.explosionArray[i].life){t.explosionArray[i].set(e.position.x,e.position.y);break}if(e instanceof f){var o=100;"large"===e.type&&(o=1e3),t.state.gameScore.add(o)}}t.life=0}})),this.rotationDraw(),this.frame++}},e}(g),w=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),b=function(){function t(){this.score=0}return t.prototype.add=function(t){this.score=Math.min(this.score+t,99999)},t.prototype.reset=function(){this.score=0},t.prototype.display=function(){return t=this.score,(new Array(5).join("0")+t).slice(-5);var t},t}(),x=D(446),A=D(18),k=D(734),_=D(657),S=D(321),C=D(403),E=D(912),M=D(265),O=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function o(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(o.prototype=i.prototype,new o)}}(),j=function(t){function e(e,i,o,n){void 0===n&&(n="#ffffff");var r=t.call(this)||this;return r.position=new s(0,0),r.state=e,r.size=i,r.speed=o,r.color=n,r}return O(e,t),e.prototype.set=function(t,e){this.position.set(t,e)},e.prototype.update=function(){this.state.ctx.globalAlpha=1,this.state.ctx.fillStyle=this.color,this.position.y+=this.speed,this.state.ctx.fillRect(this.position.x-this.size/2,this.position.y-this.size/2,this.size,this.size),this.position.y+this.size>this.state.ctx.canvas.height&&(this.position.y=-this.size)},e}(a),P=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var o=Array(t),n=0;for(e=0;e<i;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,n++)o[n]=r[s];return o},T=D(379),B=D.n(T),I=D(426),B()(I.Z,{insert:"head",singleton:!1}),I.Z.locals,window.addEventListener("load",(function(){return t=void 0,r=void 0,a=function(){function t(){var i,o,n;z.globalAlpha=1,i=z,o=r.width,n=r.height,i.fillStyle="#111122",i.fillRect(0,0,o,n),z.font="bold 24px monospace",e(z,R.gameScore.display(),30,50,"#ffffff"),J.update(),F.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var r,s,a,h,c,u,d,v,O,T,B,I,z,R,D,L,U,F,V,N,q,W,Y,Z,$,G,H,J;return function(t,e){var i,o,n,r,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,o&&(n=2&r[0]?o.return:r[0]?o.throw||((n=o.return)&&n.call(o),0):o.next)&&!(n=n.call(o,r[1])).done)return n;switch(o=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,o=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((n=(n=s.trys).length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){s.label=r[1];break}if(6===r[0]&&s.label<n[1]){s.label=n[1],n=r;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(r);break}n[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],o=0}finally{i=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(X){switch(X.label){case 0:return r=document.querySelector("#screen"),s=640,a=480,h=10,c=20,u=5,d=50,v=50,O=10,T=100,B=3,I=4,r.width=s,r.height=a,z=r.getContext("2d"),R=function(t){return{ctx:t,gameScore:new b,key:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}}}(z),D=!1,[4,Promise.all([i(x),i(A),i(k)])];case 1:return L=X.sent(),[4,Promise.all([i(_),i(S),i(C),i(E),i(M)])];case 2:return U=X.sent(),F=[],V=n(h,(function(){return new g(R,L[1],{w:32,h:32})})),N=n(2*h,(function(){return new g(R,L[2],{w:32,h:32})})),F.push.apply(F,P(V,N)),q=new y(R,L[0],{w:64,h:64},{shot:V,singleShot:N}),F.push(q),q.setComing(s/2,a,s/2,a-100),W=n(v,(function(){return new m(R,U[4],{w:32,h:32})})),Y=P(n(d,(function(){return new g(R,U[2],{w:48,h:48})})),W),F.push.apply(F,Y),Z=new p(R,U[3],{w:128,h:128},q,Y,W),$=P(n(c,(function(){return new f(R,U[0],{w:48,h:48},q,Y)})),n(u,(function(){return new f(R,U[1],{w:64,h:64},q,Y)})),[Z]),F.push.apply(F,$),G=n(O,(function(){return new l(z,100,15,40,1)})),F.push.apply(F,G),P(V,N).forEach((function(t){t.setTargets($),t.setExplosions(G)})),Y.forEach((function(t){t.setTargets([q]),t.setExplosions(G)})),H=n(T,(function(){var t=1+Math.random()*(B-1),e=1+Math.random()*(I-1),i=new j(R,t,e);return i.set(Math.random()*s,Math.random()*a),i})),F.push.apply(F,H),(J=new w).add("intro",(function(t){t>3&&J.use("invade_default_type")})),J.add("invade_default_type",(function(t){if(J.frame%30==0)for(var e=0,i=$;e<i.length;e++){var n=i[e];if(n.life<=0){J.frame%60==0?(n.set(-n.width,30,2,"default"),n.setVectorFromAngle(o(30))):(n.set(s+n.width,30,2,"default"),n.setVectorFromAngle(o(150)));break}}270===J.frame&&J.use("blank"),q.life<=0&&J.use("gameover")})),J.add("blank",(function(t){150===J.frame&&J.use("invade_wave_move_type"),q.life<=0&&J.use("gameover")})),J.add("invade_wave_move_type",(function(t){if(J.frame%50==0)for(var e=0,i=$;e<i.length;e++){var o=i[e];if(o.life<=0){J.frame<=200?o.set(.2*s,-o.height,2,"wave"):o.set(.8*s,-o.height,2,"wave");break}}450===J.frame&&J.use("invade_large_type"),q.life<=0&&J.use("gameover")})),J.add("invade_large_type",(function(t){if(100===J.frame)for(var e=c+u,i=c;i<e;i++)if($[i].life<=0){var o=$[i];o.set(s/2,-o.height,50,"large");break}500===J.frame&&J.use("invade_boss"),q.life<=0&&J.use("gameover")})),J.add("invade_boss",(function(t){0===J.frame&&(Z.set(s/2,-Z.height,250),Z.setMode("invade")),q.life<=0&&(J.use("gameover"),Z.setMode("escape")),Z.life<=0&&J.use("intro")})),J.add("gameover",(function(t){var i=s/2,o=s+i,n=s-2*J.frame%o;z.font="bold 72px sans-serif",e(z,"GAME OVER",n,a/2,"#ff0000",i),D&&(D=!1,R.gameScore.reset(),q.setComing(s/2,a+50,s/2,a-100),J.use("intro"))})),J.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":R.key.arrowLeft=!0;break;case"ArrowRight":R.key.arrowRight=!0;break;case"ArrowUp":R.key.arrowUp=!0;break;case"ArrowDown":R.key.arrowDown=!0;break;case"z":R.key.z=!0;break;case"Enter":q.life<=0&&(D=!0)}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":R.key.arrowLeft=!1;break;case"ArrowRight":R.key.arrowRight=!1;break;case"ArrowUp":R.key.arrowUp=!1;break;case"ArrowDown":R.key.arrowDown=!1;break;case"z":R.key.z=!1}})),function e(){F.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}}))},new((s=void 0)||(s=Promise))((function(e,i){function o(t){try{h(a.next(t))}catch(t){i(t)}}function n(t){try{h(a.throw(t))}catch(t){i(t)}}function h(t){var i;t.done?e(t.value):(i=t.value,i instanceof s?i:new s((function(t){t(i)}))).then(o,n)}h((a=a.apply(t,r||[])).next())}));var t,r,s,a}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,