(()=>{"use strict";var t,e,n,r,o,i,s,a,c,h,u,f,p,l,y,d,w,g,v,m,A,b,x,S={426:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(15),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([h]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var r,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function s(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},r=[],o=0;o<t.length;o++){var a=t[o],c=e.base?a[0]+e.base:a[0],h=n[c]||0,u="".concat(c," ").concat(h);n[c]=h+1;var f=s(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(p)):i.push({identifier:u,updater:d(p,e),references:1}),r.push(u)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function f(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function p(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var l=null,y=0;function d(t,e){var n,r,o;if(e.singleton){var i=y++;n=l||(l=c(e)),r=f.bind(null,n,i,!1),o=f.bind(null,n,i,!0)}else n=c(e),r=p.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=s(n[r]);i[o].references--}for(var c=a(t,e),h=0;h<n.length;h++){var u=s(n[h]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=c}}}},403:(t,e,n)=>{t.exports=n.p+"557374f791944ecf6c01.png"},657:(t,e,n)=>{t.exports=n.p+"a98f39017db8c62ba701.png"},446:(t,e,n)=>{t.exports=n.p+"82300f5733384f973929.png"},18:(t,e,n)=>{t.exports=n.p+"4233d78f478d9acd0230.png"},734:(t,e,n)=>{t.exports=n.p+"ff33312c29e171e364d7.png"}},C={};function E(t){if(C[t])return C[t].exports;var e=C[t]={id:t,exports:{}};return S[t](e,e.exports,E),e.exports}E.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return E.d(e,{a:e}),e},E.d=(t,e)=>{for(var n in e)E.o(e,n)&&!E.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},E.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),E.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;E.g.importScripts&&(t=E.g.location+"");var e=E.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),E.p=t})(),e=function(t){return t/360*Math.PI*2},t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},n=function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)},r=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t}(),o=function(t){function e(e,n){return t.call(this,e,n)||this}return n(e,t),e.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},e}(r),i=function(){function t(t,n,i){var s,a,c,h,u=i.x,f=void 0===u?0:u,p=i.y,l=void 0===p?0:p,y=i.w,d=i.h,w=i.life,g=void 0===w?0:w;this.ctx=t,this.position=new r(f,l),this.vector=new o(0,-1),this.width=y,this.height=d,this.angle=e(270),this.life=g,s=this,a=void 0,h=function(){var t;return function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,(r=n,new Promise((function(t,e){var n=new Image;n.addEventListener("load",(function(){t(n)})),n.src=r})))];case 1:return t.image=e.sent(),[2]}var r}))},new((c=void 0)||(c=Promise))((function(t,e){function n(t){try{o(h.next(t))}catch(t){e(t)}}function r(t){try{o(h.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof c?o:new c((function(t){t(o)}))).then(n,r)}o((h=h.apply(s,a||[])).next())}))}return t.prototype.setVector=function(t,e){this.vector.set(t,e)},t.prototype.setVectorFromAngle=function(t){this.angle=t,this.vector.setAngle(t)},t.prototype.draw=function(){if(this.image){var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)}},t.prototype.rotationDraw=function(){if(this.image){this.ctx.save(),this.ctx.translate(this.position.x,this.position.y),this.ctx.rotate(this.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.ctx.restore()}},t.prototype.update=function(){},t.prototype.ready=function(){return!!this.image},t}(),s=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),a="default",c=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.speed=3,o.frame=0,o.type=a,o.shotArray=[],o}return s(e,t),e.prototype.set=function(t,e,n,r){void 0===n&&(n=1),void 0===r&&(r=a),this.position.set(t,e),this.life=n,this.type=r,this.frame=0},e.prototype.setShotArray=function(t){this.shotArray=t},e.prototype.fire=function(t,e){void 0===t&&(t=0),void 0===e&&(e=1);for(var n=0;n<this.shotArray.length;n++)if(this.shotArray[n].life<=0){this.shotArray[n].set(this.position.x,this.position.y),this.shotArray[n].setSpeed(5),this.shotArray[n].setVector(t,e);break}},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case a:50==this.frame&&this.fire(),this.position.y-this.height>this.ctx.canvas.height&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed}this.draw(),this.frame++}},e}(i),h=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),u=function(t){function n(e,n,r,o){var i=t.call(this,n,r,o)||this;return i.speed=3,i.shotArray=[],i.singleShotArray=[],i.shotCheckCounter=0,i.shotInterval=10,i.isComing=!1,i.state=e,i}return h(n,t),n.prototype.update=function(){if(this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var n=(t-this.comingStart)/1e3,r=this.comingStartPosition.y-50*n;r<=this.comingEndPosition.y&&(this.isComing=!1,r=this.comingEndPosition.y),this.position.set(this.position.x,r),t%100<50&&(this.ctx.globalAlpha=.5)}else if(this.state.isKeyDown.arrowLeft&&(this.position.x-=this.speed),this.state.isKeyDown.arrowRight&&(this.position.x+=this.speed),this.state.isKeyDown.arrowUp&&(this.position.y-=this.speed),this.state.isKeyDown.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.ctx.canvas.height)),this.state.isKeyDown.z&&this.shotCheckCounter>=0){for(var o=0;o<this.shotArray.length;o++)if(this.shotArray[o].life<=0){this.shotArray[o].set(this.position.x,this.position.y),this.shotArray[o].setPower(2),this.shotCheckCounter=-this.shotInterval;break}for(o=0;o<this.singleShotArray.length;o+=2)if(this.singleShotArray[o].life<=0&&this.singleShotArray[o+1].life<=0){var i=e(280),s=e(260);this.singleShotArray[o].set(this.position.x,this.position.y),this.singleShotArray[o].setVectorFromAngle(i),this.singleShotArray[o+1].set(this.position.x,this.position.y),this.singleShotArray[o+1].setVectorFromAngle(s),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.ctx.globalAlpha=1}},n.prototype.setShotArray=function(t,e){this.shotArray=t,this.singleShotArray=e},n.prototype.setComing=function(t,e,n,o){this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new r(t,e),this.comingEndPosition=new r(n,o)},n}(i),f=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),p=function(t){function e(e,n,r){var o=t.call(this,e,n,r)||this;return o.speed=7,o.power=1,o.targetArray=[],o}return f(e,t),e.prototype.set=function(t,e){this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.update=function(){var t=this;this.life<=0||((this.position.y+this.height<0||this.position.y-this.height>this.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){e.life<=0||t.position.distance(e.position)<=(t.width+e.width)/4&&(e.life-=t.power,t.life=0)})),this.rotationDraw())},e}(i),l=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),y=E(446),d=E(18),w=E(734),g=E(657),v=E(403),m=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var i=arguments[e],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r},A=E(379),b=E.n(A),x=E(426),b()(x.Z,{insert:"head",singleton:!1}),x.Z.locals,window.addEventListener("load",(function(){return t=void 0,e=void 0,r=function(){function t(){var n,i,s;r.globalAlpha=1,n=r,i=e.width,s=e.height,n.fillStyle="#eeeeee",n.fillRect(0,0,i,s),A.update(),o.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var e,n,r,o,i,s,a,h,f,A;return function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(b){return e=document.querySelector("#screen"),n={isKeyDown:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}},e.width=640,e.height=480,r=e.getContext("2d"),o=[],i=new u(n,r,y,{w:64,h:64}),o.push(i),i.setComing(320,480,320,380),s=Array.from({length:10}).map((function(){return new p(r,d,{w:32,h:32})})),a=Array.from({length:20}).map((function(){return new p(r,w,{w:32,h:32})})),i.setShotArray(s,a),o.push.apply(o,m(s,a)),h=Array.from({length:10}).map((function(){return new c(r,g,{w:48,h:48})})),o.push.apply(o,h),f=Array.from({length:50}).map((function(){return new p(r,v,{w:48,h:48})})),o.push.apply(o,f),h.forEach((function(t){return t.setShotArray(f)})),m(s,a).forEach((function(t){return t.setTargets(h)})),(A=new l).add("intro",(function(t){t>2&&A.use("invade")})),A.add("invade",(function(t){if(0==A.frame){for(var e=0;e<10;e++)if(h[e].life<=0){var n=h[e];n.set(320,-n.height,2,"default"),n.setVector(0,1);break}}else 100===A.frame&&A.use("invade")})),A.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":n.isKeyDown.arrowLeft=!0;break;case"ArrowRight":n.isKeyDown.arrowRight=!0;break;case"ArrowUp":n.isKeyDown.arrowUp=!0;break;case"ArrowDown":n.isKeyDown.arrowDown=!0;break;case"z":n.isKeyDown.z=!0}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":n.isKeyDown.arrowLeft=!1;break;case"ArrowRight":n.isKeyDown.arrowRight=!1;break;case"ArrowUp":n.isKeyDown.arrowUp=!1;break;case"ArrowDown":n.isKeyDown.arrowDown=!1;break;case"z":n.isKeyDown.z=!1}})),function e(){o.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}))},new((n=void 0)||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}));var t,e,n,r}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jaGFyYWN0ZXJzL2Jhc2UudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvY2hhcmFjdGVycy9lbmVteS50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jaGFyYWN0ZXJzL3BsYXllci50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jaGFyYWN0ZXJzL3Nob3QudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvc2NlbmUudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2NhbnZhcy1nYW1lL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NhbnZhcy1nYW1lL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2NhbnZhcy1nYW1lL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2NhbnZhcy1nYW1lL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvYXBwLnRzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL2NhbnZhcy50cyJdLCJuYW1lcyI6WyJkZWdUb1JhZCIsIkRFRkFVTFRfRU5FTVlfVFlQRSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsImhhc093blByb3BlcnR5Iiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwiZGVncmVlcyIsIk1hdGgiLCJQSSIsIngiLCJ5Iiwic2V0IiwiZGlzdGFuY2UiLCJzcXJ0Iiwic2V0QW5nbGUiLCJhbmdsZSIsImNvcyIsInNpbiIsIlBvc2l0aW9uIiwiY3R4IiwiaW1hZ2VQYXRoIiwidyIsImgiLCJsaWZlIiwicG9zaXRpb24iLCJ2ZWN0b3IiLCJWZWN0b3IiLCJ3aWR0aCIsImhlaWdodCIsInVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1hZ2UiLCJJbWFnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRWZWN0b3IiLCJzZXRWZWN0b3JGcm9tQW5nbGUiLCJkcmF3Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJkcmF3SW1hZ2UiLCJyb3RhdGlvbkRyYXciLCJzYXZlIiwidHJhbnNsYXRlIiwicm90YXRlIiwicmVzdG9yZSIsInJlYWR5Iiwib3B0aW9uIiwic3BlZWQiLCJmcmFtZSIsInR5cGUiLCJzaG90QXJyYXkiLCJzZXRTaG90QXJyYXkiLCJmaXJlIiwic2V0U3BlZWQiLCJjYW52YXMiLCJDaGFyYWN0ZXIiLCJzdGF0ZSIsInNpbmdsZVNob3RBcnJheSIsInNob3RDaGVja0NvdW50ZXIiLCJzaG90SW50ZXJ2YWwiLCJpc0NvbWluZyIsImNvbWluZ1N0YXJ0IiwiY29taW5nU3RhcnRQb3NpdGlvbiIsImNvbWluZ0VuZFBvc2l0aW9uIiwianVzdFRpbWUiLCJEYXRlIiwibm93IiwiY29taW5nVGltZSIsImdsb2JhbEFscGhhIiwiaXNLZXlEb3duIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsImFycm93VXAiLCJhcnJvd0Rvd24iLCJtaW4iLCJtYXgiLCJ6Iiwic2V0UG93ZXIiLCJyYWRDVyIsInJhZENDVyIsInNldENvbWluZyIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwicG93ZXIiLCJ0YXJnZXRBcnJheSIsInNldFRhcmdldHMiLCJ0YXJnZXRzIiwidCIsInNjZW5lIiwiYWN0aXZlU2NlbmUiLCJzdGFydFRpbWUiLCJhZGQiLCJ1cGRhdGVGdW5jdGlvbiIsInVzZSIsImFjdGl2ZVRpbWUiLCJyZW5kZXIiLCJjb250ZXh0IiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJjaGFyYWN0ZXJzIiwiYyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImdldENvbnRleHQiLCJwbGF5ZXIiLCJQbGF5ZXIiLCJ2aXBlciIsIkNBTlZBU19XSURUSCIsIkNBTlZBU19IRUlHSFQiLCJTaG90IiwiU0hPVF9NQVhfQ09VTlQiLCJlbmVteUFycmF5IiwiRW5lbXkiLCJlbmVteVNob3RBcnJheSIsInMiLCJTY2VuZU1hbmFnZXIiLCJ0aW1lIiwiZXZlbnQiLCJ3YWl0IiwiZXZlcnkiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoieUJBVWFBLEUsRUNFYixFQXFCQSxFQWtCQSxFLEVDaERNQyxFQUVOLEUsRUNEQSxFLEVDRkEsRUNBQSxFLGtGQ0NJQyxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLDZRQUFnUixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw2QkFBNkIsTUFBUSxHQUFHLFNBQVcsb0tBQW9LLGVBQWlCLENBQUMsOFFBQWdSLFdBQWEsTUFFMTFCLFcsUUNDQUQsRUFBT0UsUUFBVSxTQUFVQyxHQUN6QixJQUFJ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SyxHQUNqQixZQUdxQixNQUFoQndELEVBQU0xQyxPQUNmMEMsRUFBTUssSUFBSSxhQUdkTCxFQUFNSyxJQUFJLFNBRVZ4TCxPQUFPMEgsaUJBQWlCLFdBQVcsU0FBQ3FGLEdBQ2xDLE9BQVFBLEVBQU1qTCxLQUNaLElBQUssWUFDSG1ILEVBQU1hLFVBQVVDLFdBQVksRUFDNUIsTUFDRixJQUFLLGFBQ0hkLEVBQU1hLFVBQVVFLFlBQWEsRUFDN0IsTUFDRixJQUFLLFVBQ0hmLEVBQU1hLFVBQVVHLFNBQVUsRUFDMUIsTUFDRixJQUFLLFlBQ0hoQixFQUFNYSxVQUFVSSxXQUFZLEVBQzVCLE1BQ0YsSUFBSyxJQUNIakIsRUFBTWEsVUFBVU8sR0FBSSxNQU0xQnJLLE9BQU8wSCxpQkFBaUIsU0FBUyxTQUFDcUYsR0FDaEMsT0FBUUEsRUFBTWpMLEtBQ1osSUFBSyxZQUNIbUgsRUFBTWEsVUFBVUMsV0FBWSxFQUM1QixNQUNGLElBQUssYUFDSGQsRUFBTWEsVUFBVUUsWUFBYSxFQUM3QixNQUNGLElBQUssVUFDSGYsRUFBTWEsVUFBVUcsU0FBVSxFQUMxQixNQUNGLElBQUssWUFDSGhCLEVBQU1hLFVBQVVJLFdBQVksRUFDNUIsTUFDRixJQUFLLElBQ0hqQixFQUFNYSxVQUFVTyxHQUFJLE1BUTFCLFNBQVUyQyxJQUNRbEIsRUFBV21CLE9BQU0sU0FBQ2xCLEdBQU0sT0FBQUEsRUFBRXpELFlBSzlCb0IsS0FBS0MsTUFDakIrQixLQUpFd0IsV0FBV0YsRUFBTSxLQUhyQixHLG9CQXZIa0IsSyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgbG9hZEltYWdlID0gKHVybDogc3RyaW5nKTogUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICByZXNvbHZlKGltYWdlKTtcbiAgICB9KTtcbiAgICBpbWFnZS5zcmMgPSB1cmw7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZ1RvUmFkID0gKGRlZ3JlZXM6IG51bWJlcik6IG51bWJlciA9PlxuICAoZGVncmVlcyAvIDM2MCkgKiBNYXRoLlBJICogMjtcbiIsImltcG9ydCB7IGxvYWRJbWFnZSwgZGVnVG9SYWQgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgU3RhdGUgPSB7XG4gIGlzS2V5RG93bjoge1xuICAgIGFycm93TGVmdDogYm9vbGVhbjtcbiAgICBhcnJvd1JpZ2h0OiBib29sZWFuO1xuICAgIGFycm93VXA6IGJvb2xlYW47XG4gICAgYXJyb3dEb3duOiBib29sZWFuO1xuICAgIHo6IGJvb2xlYW47XG4gIH07XG59O1xuXG5leHBvcnQgY2xhc3MgUG9zaXRpb24ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIGRpc3RhbmNlKHRhcmdldDogUG9zaXRpb24pOiBudW1iZXIge1xuICAgIGNvbnN0IHggPSB0aGlzLnggLSB0YXJnZXQueDtcbiAgICBjb25zdCB5ID0gdGhpcy55IC0gdGFyZ2V0Lnk7XG4gICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmVjdG9yIGV4dGVuZHMgUG9zaXRpb24ge1xuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHN1cGVyKHgsIHkpO1xuICB9XG5cbiAgc2V0QW5nbGUoYW5nbGU6IG51bWJlcikge1xuICAgIHRoaXMuc2V0KE1hdGguY29zKGFuZ2xlKSwgTWF0aC5zaW4oYW5nbGUpKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBPcHRpb24gPSB7XG4gIHg/OiBudW1iZXI7XG4gIHk/OiBudW1iZXI7XG4gIHc6IG51bWJlcjtcbiAgaDogbnVtYmVyO1xuICBsaWZlPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNsYXNzIENoYXJhY3RlciB7XG4gIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICBwb3NpdGlvbjogUG9zaXRpb247XG4gIGFuZ2xlOiBudW1iZXI7XG4gIHZlY3RvcjogVmVjdG9yO1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgbGlmZTogbnVtYmVyO1xuICBpbWFnZT86IEhUTUxJbWFnZUVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgaW1hZ2VQYXRoOiBzdHJpbmcsXG4gICAgeyB4ID0gMCwgeSA9IDAsIHcsIGgsIGxpZmUgPSAwIH06IE9wdGlvblxuICApIHtcbiAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFBvc2l0aW9uKHgsIHkpO1xuICAgIHRoaXMudmVjdG9yID0gbmV3IFZlY3RvcigwLjAsIC0xLjApO1xuICAgIHRoaXMud2lkdGggPSB3O1xuICAgIHRoaXMuaGVpZ2h0ID0gaDtcbiAgICB0aGlzLmFuZ2xlID0gZGVnVG9SYWQoMjcwKTtcbiAgICB0aGlzLmxpZmUgPSBsaWZlO1xuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLmltYWdlID0gYXdhaXQgbG9hZEltYWdlKGltYWdlUGF0aCk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHNldFZlY3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMudmVjdG9yLnNldCh4LCB5KTtcbiAgfVxuXG4gIHNldFZlY3RvckZyb21BbmdsZShhbmdsZTogbnVtYmVyKSB7XG4gICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xuICAgIHRoaXMudmVjdG9yLnNldEFuZ2xlKGFuZ2xlKTtcbiAgfVxuXG4gIGRyYXcoKSB7XG4gICAgaWYgKCF0aGlzLmltYWdlKSByZXR1cm47XG4gICAgY29uc3Qgb2Zmc2V0WCA9IHRoaXMud2lkdGggLyAyO1xuICAgIGNvbnN0IG9mZnNldFkgPSB0aGlzLmhlaWdodCAvIDI7XG4gICAgdGhpcy5jdHguZHJhd0ltYWdlKFxuICAgICAgdGhpcy5pbWFnZSxcbiAgICAgIHRoaXMucG9zaXRpb24ueCAtIG9mZnNldFgsXG4gICAgICB0aGlzLnBvc2l0aW9uLnkgLSBvZmZzZXRZLFxuICAgICAgdGhpcy53aWR0aCxcbiAgICAgIHRoaXMuaGVpZ2h0XG4gICAgKTtcbiAgfVxuXG4gIHJvdGF0aW9uRHJhdygpIHtcbiAgICBpZiAoIXRoaXMuaW1hZ2UpIHJldHVybjtcbiAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgdGhpcy5jdHgudHJhbnNsYXRlKHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55KTtcbiAgICB0aGlzLmN0eC5yb3RhdGUodGhpcy5hbmdsZSAtIE1hdGguUEkgKiAxLjUpO1xuXG4gICAgY29uc3Qgb2Zmc2V0WCA9IHRoaXMud2lkdGggLyAyO1xuICAgIGNvbnN0IG9mZnNldFkgPSB0aGlzLmhlaWdodCAvIDI7XG4gICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIC1vZmZzZXRYLCAtb2Zmc2V0WSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXG4gICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgdXBkYXRlKCkge31cblxuICByZWFkeSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLmltYWdlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDaGFyYWN0ZXIsIE9wdGlvbiB9IGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCB7IFNob3QgfSBmcm9tIFwiLi9zaG90XCI7XG5cbmNvbnN0IERFRkFVTFRfRU5FTVlfVFlQRSA9IFwiZGVmYXVsdFwiO1xuXG5leHBvcnQgY2xhc3MgRW5lbXkgZXh0ZW5kcyBDaGFyYWN0ZXIge1xuICBzcGVlZDogbnVtYmVyID0gMztcbiAgZnJhbWUgPSAwO1xuICB0eXBlOiBzdHJpbmcgPSBERUZBVUxUX0VORU1ZX1RZUEU7XG4gIHNob3RBcnJheTogU2hvdFtdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgaW1hZ2VQYXRoOiBzdHJpbmcsXG4gICAgb3B0aW9uOiBPcHRpb25cbiAgKSB7XG4gICAgc3VwZXIoY3R4LCBpbWFnZVBhdGgsIG9wdGlvbik7XG4gIH1cblxuICBzZXQoXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgICBsaWZlOiBudW1iZXIgPSAxLFxuICAgIHR5cGU6IHN0cmluZyA9IERFRkFVTFRfRU5FTVlfVFlQRVxuICApIHtcbiAgICB0aGlzLnBvc2l0aW9uLnNldCh4LCB5KTtcbiAgICB0aGlzLmxpZmUgPSBsaWZlO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5mcmFtZSA9IDA7XG4gIH1cblxuICBzZXRTaG90QXJyYXkoc2hvdEFycmF5OiBTaG90W10pIHtcbiAgICB0aGlzLnNob3RBcnJheSA9IHNob3RBcnJheTtcbiAgfVxuXG4gIGZpcmUoeDogbnVtYmVyID0gMC4wLCB5OiBudW1iZXIgPSAxLjApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2hvdEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5zaG90QXJyYXlbaV0ubGlmZSA8PSAwKSB7XG4gICAgICAgIHRoaXMuc2hvdEFycmF5W2ldLnNldCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSk7XG4gICAgICAgIHRoaXMuc2hvdEFycmF5W2ldLnNldFNwZWVkKDUuMCk7XG4gICAgICAgIHRoaXMuc2hvdEFycmF5W2ldLnNldFZlY3Rvcih4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLmxpZmUgPD0gMCkgcmV0dXJuO1xuXG4gICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgIGNhc2UgREVGQVVMVF9FTkVNWV9UWVBFOlxuICAgICAgICBpZiAodGhpcy5mcmFtZSA9PSA1MCkge1xuICAgICAgICAgIHRoaXMuZmlyZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBvc2l0aW9uLnkgLSB0aGlzLmhlaWdodCA+IHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQpIHtcbiAgICAgICAgICB0aGlzLmxpZmUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zaXRpb24ueCArPSB0aGlzLnZlY3Rvci54ICogdGhpcy5zcGVlZDtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IHRoaXMudmVjdG9yLnkgKiB0aGlzLnNwZWVkO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuZHJhdygpO1xuICAgIHRoaXMuZnJhbWUrKztcbiAgfVxufVxuIiwiaW1wb3J0IHsgU3RhdGUsIENoYXJhY3RlciwgUG9zaXRpb24sIE9wdGlvbiB9IGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCB7IFNob3QgfSBmcm9tIFwiLi9zaG90XCI7XG5pbXBvcnQgeyBkZWdUb1JhZCB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgc3RhdGU6IFN0YXRlO1xuICBzcGVlZDogbnVtYmVyID0gMztcblxuICBzaG90QXJyYXk6IFNob3RbXSA9IFtdO1xuICBzaW5nbGVTaG90QXJyYXk6IFNob3RbXSA9IFtdO1xuICBzaG90Q2hlY2tDb3VudGVyID0gMDtcbiAgc2hvdEludGVydmFsID0gMTA7XG5cbiAgaXNDb21pbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgY29taW5nU3RhcnQ/OiBudW1iZXI7XG4gIGNvbWluZ1N0YXJ0UG9zaXRpb24/OiBQb3NpdGlvbjtcbiAgY29taW5nRW5kUG9zaXRpb24/OiBQb3NpdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzdGF0ZTogU3RhdGUsXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgaW1hZ2VQYXRoOiBzdHJpbmcsXG4gICAgb3B0aW9uOiBPcHRpb25cbiAgKSB7XG4gICAgc3VwZXIoY3R4LCBpbWFnZVBhdGgsIG9wdGlvbik7XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmIChcbiAgICAgICF0aGlzLmNvbWluZ1N0YXJ0IHx8XG4gICAgICAhdGhpcy5jb21pbmdTdGFydFBvc2l0aW9uIHx8XG4gICAgICAhdGhpcy5jb21pbmdFbmRQb3NpdGlvblxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBqdXN0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICBpZiAodGhpcy5pc0NvbWluZykge1xuICAgICAgY29uc3QgY29taW5nVGltZSA9IChqdXN0VGltZSAtIHRoaXMuY29taW5nU3RhcnQpIC8gMTAwMDtcbiAgICAgIGxldCB5ID0gdGhpcy5jb21pbmdTdGFydFBvc2l0aW9uLnkgLSBjb21pbmdUaW1lICogNTA7XG4gICAgICBpZiAoeSA8PSB0aGlzLmNvbWluZ0VuZFBvc2l0aW9uLnkpIHtcbiAgICAgICAgdGhpcy5pc0NvbWluZyA9IGZhbHNlO1xuICAgICAgICB5ID0gdGhpcy5jb21pbmdFbmRQb3NpdGlvbi55O1xuICAgICAgfVxuXG4gICAgICB0aGlzLnBvc2l0aW9uLnNldCh0aGlzLnBvc2l0aW9uLngsIHkpO1xuICAgICAgaWYgKGp1c3RUaW1lICUgMTAwIDwgNTApIHtcbiAgICAgICAgdGhpcy5jdHguZ2xvYmFsQWxwaGEgPSAwLjU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzS2V5RG93bi5hcnJvd0xlZnQpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54IC09IHRoaXMuc3BlZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc0tleURvd24uYXJyb3dSaWdodCkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uLnggKz0gdGhpcy5zcGVlZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzS2V5RG93bi5hcnJvd1VwKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24ueSAtPSB0aGlzLnNwZWVkO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNLZXlEb3duLmFycm93RG93bikge1xuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgKz0gdGhpcy5zcGVlZDtcbiAgICAgIH1cbiAgICAgIHRoaXMucG9zaXRpb24uc2V0KFxuICAgICAgICBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnBvc2l0aW9uLngsIDApLCB0aGlzLmN0eC5jYW52YXMud2lkdGgpLFxuICAgICAgICBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnBvc2l0aW9uLnksIDApLCB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0KVxuICAgICAgKTtcblxuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNLZXlEb3duLnopIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvdENoZWNrQ291bnRlciA+PSAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNob3RBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdEFycmF5W2ldLmxpZmUgPD0gMCkge1xuICAgICAgICAgICAgICB0aGlzLnNob3RBcnJheVtpXS5zZXQodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICB0aGlzLnNob3RBcnJheVtpXS5zZXRQb3dlcigyKTtcbiAgICAgICAgICAgICAgdGhpcy5zaG90Q2hlY2tDb3VudGVyID0gLXRoaXMuc2hvdEludGVydmFsO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpbmdsZVNob3RBcnJheS5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnNpbmdsZVNob3RBcnJheVtpXS5saWZlIDw9IDAgJiZcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaSArIDFdLmxpZmUgPD0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJhZENXID0gZGVnVG9SYWQoMjgwKTtcbiAgICAgICAgICAgICAgY29uc3QgcmFkQ0NXID0gZGVnVG9SYWQoMjYwKTtcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaV0uc2V0KHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaV0uc2V0VmVjdG9yRnJvbUFuZ2xlKHJhZENXKTtcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaSArIDFdLnNldCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgIHRoaXMuc2luZ2xlU2hvdEFycmF5W2kgKyAxXS5zZXRWZWN0b3JGcm9tQW5nbGUocmFkQ0NXKTtcbiAgICAgICAgICAgICAgdGhpcy5zaG90Q2hlY2tDb3VudGVyID0gLXRoaXMuc2hvdEludGVydmFsO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zaG90Q2hlY2tDb3VudGVyKys7XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgfVxuXG4gIHNldFNob3RBcnJheShzaG90QXJyYXk6IFNob3RbXSwgc2luZ2xlU2hvdEFycmF5OiBTaG90W10pIHtcbiAgICB0aGlzLnNob3RBcnJheSA9IHNob3RBcnJheTtcbiAgICB0aGlzLnNpbmdsZVNob3RBcnJheSA9IHNpbmdsZVNob3RBcnJheTtcbiAgfVxuXG4gIHNldENvbWluZyhzdGFydFg6IG51bWJlciwgc3RhcnRZOiBudW1iZXIsIGVuZFg6IG51bWJlciwgZW5kWTogbnVtYmVyKSB7XG4gICAgdGhpcy5pc0NvbWluZyA9IHRydWU7XG4gICAgdGhpcy5jb21pbmdTdGFydCA9IERhdGUubm93KCk7XG4gICAgdGhpcy5wb3NpdGlvbi5zZXQoc3RhcnRYLCBzdGFydFkpO1xuICAgIHRoaXMuY29taW5nU3RhcnRQb3NpdGlvbiA9IG5ldyBQb3NpdGlvbihzdGFydFgsIHN0YXJ0WSk7XG4gICAgdGhpcy5jb21pbmdFbmRQb3NpdGlvbiA9IG5ldyBQb3NpdGlvbihlbmRYLCBlbmRZKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ2hhcmFjdGVyLCBPcHRpb24gfSBmcm9tIFwiLi9iYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBTaG90IGV4dGVuZHMgQ2hhcmFjdGVyIHtcbiAgc3BlZWQ6IG51bWJlciA9IDc7XG4gIHBvd2VyOiBudW1iZXIgPSAxO1xuICB0YXJnZXRBcnJheTogQ2hhcmFjdGVyW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBpbWFnZVBhdGg6IHN0cmluZyxcbiAgICBvcHRpb246IE9wdGlvblxuICApIHtcbiAgICBzdXBlcihjdHgsIGltYWdlUGF0aCwgb3B0aW9uKTtcbiAgfVxuXG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMucG9zaXRpb24uc2V0KHgsIHkpO1xuICAgIHRoaXMubGlmZSA9IDE7XG4gIH1cblxuICBzZXRTcGVlZChzcGVlZDogbnVtYmVyKSB7XG4gICAgaWYgKHNwZWVkIDw9IDApIHJldHVybjtcbiAgICB0aGlzLnNwZWVkID0gc3BlZWQ7XG4gIH1cblxuICBzZXRQb3dlcihwb3dlcjogbnVtYmVyKSB7XG4gICAgaWYgKHBvd2VyIDw9IDApIHJldHVybjtcbiAgICB0aGlzLnBvd2VyID0gcG93ZXI7XG4gIH1cblxuICBzZXRUYXJnZXRzKHRhcmdldHM6IENoYXJhY3RlcltdKSB7XG4gICAgdGhpcy50YXJnZXRBcnJheSA9IHRhcmdldHM7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgaWYgKHRoaXMubGlmZSA8PSAwKSByZXR1cm47XG4gICAgaWYgKFxuICAgICAgdGhpcy5wb3NpdGlvbi55ICsgdGhpcy5oZWlnaHQgPCAwIHx8XG4gICAgICB0aGlzLnBvc2l0aW9uLnkgLSB0aGlzLmhlaWdodCA+IHRoaXMuY3R4LmNhbnZhcy5oZWlnaHRcbiAgICApIHtcbiAgICAgIHRoaXMubGlmZSA9IDA7XG4gICAgfVxuICAgIHRoaXMucG9zaXRpb24ueCArPSB0aGlzLnZlY3Rvci54ICogdGhpcy5zcGVlZDtcbiAgICB0aGlzLnBvc2l0aW9uLnkgKz0gdGhpcy52ZWN0b3IueSAqIHRoaXMuc3BlZWQ7XG5cbiAgICBpZiAodGhpcy5saWZlID4gMCkge1xuICAgICAgdGhpcy50YXJnZXRBcnJheS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGlmICh0LmxpZmUgPD0gMCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBkaXN0ID0gdGhpcy5wb3NpdGlvbi5kaXN0YW5jZSh0LnBvc2l0aW9uKTtcbiAgICAgICAgaWYgKGRpc3QgPD0gKHRoaXMud2lkdGggKyB0LndpZHRoKSAvIDQpIHtcbiAgICAgICAgICB0LmxpZmUgLT0gdGhpcy5wb3dlcjtcbiAgICAgICAgICB0aGlzLmxpZmUgPSAwO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5yb3RhdGlvbkRyYXcoKTtcbiAgfVxufVxuIiwidHlwZSBTY2VuZSA9ICh0aW1lOiBudW1iZXIpID0+IHZvaWQ7XG5cbmV4cG9ydCBjbGFzcyBTY2VuZU1hbmFnZXIge1xuICBzY2VuZTogeyBba2V5OiBzdHJpbmddOiBTY2VuZSB9ID0ge307XG4gIGFjdGl2ZVNjZW5lOiBTY2VuZSB8IG51bGwgPSBudWxsO1xuICBzdGFydFRpbWU6IG51bWJlciA9IERhdGUubm93KCk7XG4gIGZyYW1lOiBudW1iZXIgPSAtMTtcblxuICBhZGQobmFtZTogc3RyaW5nLCB1cGRhdGVGdW5jdGlvbjogU2NlbmUpIHtcbiAgICB0aGlzLnNjZW5lW25hbWVdID0gdXBkYXRlRnVuY3Rpb247XG4gIH1cblxuICB1c2UobmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKCEobmFtZSBpbiB0aGlzLnNjZW5lKSkgcmV0dXJuO1xuICAgIHRoaXMuYWN0aXZlU2NlbmUgPSB0aGlzLnNjZW5lW25hbWVdO1xuICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLmZyYW1lID0gLTE7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3QgYWN0aXZlVGltZSA9IChEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUpIC8gMTAwMDtcbiAgICB0aGlzLmFjdGl2ZVNjZW5lPy4oYWN0aXZlVGltZSk7XG4gICAgdGhpcy5mcmFtZSsrO1xuICB9XG59XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBjaGFyc2V0IFxcXCJ1dGYtOFxcXCI7XFxuXFxuKiB7XFxuICBtYXJnaW46IDBweDtcXG4gIHBhZGRpbmc6IDBweDtcXG59XFxuXFxuaHRtbCxcXG5ib2R5IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NTU1NTU7XFxuICBjb2xvcjogI2YwZjBmMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xcbn1cXG5cXG5jYW52YXMge1xcbiAgbWFyZ2luOiAwcHggYXV0bztcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxnQkFBZ0I7O0FBRWhCO0VBQ0UsV0FBVztFQUNYLFlBQVk7QUFDZDs7QUFFQTs7RUFFRSx5QkFBeUI7RUFDekIsY0FBYztFQUNkLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGNoYXJzZXQgXFxcInV0Zi04XFxcIjtcXG5cXG4qIHtcXG4gIG1hcmdpbjogMHB4O1xcbiAgcGFkZGluZzogMHB4O1xcbn1cXG5cXG5odG1sLFxcbmJvZHkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU1NTU1NTtcXG4gIGNvbG9yOiAjZjBmMGYwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZy10b3A6IDEwcHg7XFxufVxcblxcbmNhbnZhcyB7XFxuICBtYXJnaW46IDBweCBhdXRvO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCB7IGluaXQgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBpbml0KTtcbiIsImltcG9ydCAqIGFzIHV0aWwgZnJvbSBcIi4vY2FudmFzXCI7XG5pbXBvcnQgeyBTdGF0ZSwgUGxheWVyLCBTaG90LCBDaGFyYWN0ZXIsIEVuZW15IH0gZnJvbSBcIi4vY2hhcmFjdGVyc1wiO1xuaW1wb3J0IHsgU2NlbmVNYW5hZ2VyIH0gZnJvbSBcIi4vc2NlbmVcIjtcbmltcG9ydCB2aXBlckltYWdlIGZyb20gXCIuL2Fzc2V0cy9pbWFnZXMvdmlwZXIucG5nXCI7XG5pbXBvcnQgdmlwZXJTaG90SW1hZ2UgZnJvbSBcIi4vYXNzZXRzL2ltYWdlcy92aXBlcl9zaG90LnBuZ1wiO1xuaW1wb3J0IHZpcGVyU2luZ2xlU2hvdEltYWdlIGZyb20gXCIuL2Fzc2V0cy9pbWFnZXMvdmlwZXJfc2luZ2xlX3Nob3QucG5nXCI7XG5pbXBvcnQgZW5lbXlTbWFsbEltYWdlIGZyb20gXCIuL2Fzc2V0cy9pbWFnZXMvZW5lbXlfc21hbGwucG5nXCI7XG5pbXBvcnQgZW5lbXlTaG90SW1hZ2UgZnJvbSBcIi4vYXNzZXRzL2ltYWdlcy9lbmVteV9zaG90LnBuZ1wiO1xuXG5leHBvcnQgY29uc3QgaW5pdCA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzY3JlZW5cIikgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5cbiAgY29uc3QgQ0FOVkFTX1dJRFRIID0gNjQwO1xuICBjb25zdCBDQU5WQVNfSEVJR0hUID0gNDgwO1xuXG4gIGNvbnN0IFNIT1RfTUFYX0NPVU5UID0gMTA7XG4gIGNvbnN0IEVORU1ZX01BWF9DT1VOVCA9IDEwO1xuICBjb25zdCBFTkVNWV9TSE9UX01BWF9DT1VOVCA9IDUwO1xuXG4gIGNvbnN0IHN0YXRlOiBTdGF0ZSA9IHtcbiAgICBpc0tleURvd246IHtcbiAgICAgIGFycm93TGVmdDogZmFsc2UsXG4gICAgICBhcnJvd1JpZ2h0OiBmYWxzZSxcbiAgICAgIGFycm93RG93bjogZmFsc2UsXG4gICAgICBhcnJvd1VwOiBmYWxzZSxcbiAgICAgIHo6IGZhbHNlLFxuICAgIH0sXG4gIH07XG5cbiAgY2FudmFzLndpZHRoID0gQ0FOVkFTX1dJRFRIO1xuICBjYW52YXMuaGVpZ2h0ID0gQ0FOVkFTX0hFSUdIVDtcbiAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSE7XG5cbiAgY29uc3QgY2hhcmFjdGVyczogQ2hhcmFjdGVyW10gPSBbXTtcbiAgY29uc3QgcGxheWVyID0gbmV3IFBsYXllcihzdGF0ZSwgY3R4LCB2aXBlckltYWdlLCB7IHc6IDY0LCBoOiA2NCB9KTtcbiAgY2hhcmFjdGVycy5wdXNoKHBsYXllcik7XG4gIHBsYXllci5zZXRDb21pbmcoXG4gICAgQ0FOVkFTX1dJRFRIIC8gMixcbiAgICBDQU5WQVNfSEVJR0hULFxuICAgIENBTlZBU19XSURUSCAvIDIsXG4gICAgQ0FOVkFTX0hFSUdIVCAtIDEwMFxuICApO1xuICBjb25zdCBzaG90QXJyYXkgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBTSE9UX01BWF9DT1VOVCB9KS5tYXAoXG4gICAgKCkgPT4gbmV3IFNob3QoY3R4LCB2aXBlclNob3RJbWFnZSwgeyB3OiAzMiwgaDogMzIgfSlcbiAgKTtcbiAgY29uc3Qgc2luZ2xlU2hvdEFycmF5ID0gQXJyYXkuZnJvbSh7XG4gICAgbGVuZ3RoOiBTSE9UX01BWF9DT1VOVCAqIDIsXG4gIH0pLm1hcCgoKSA9PiBuZXcgU2hvdChjdHgsIHZpcGVyU2luZ2xlU2hvdEltYWdlLCB7IHc6IDMyLCBoOiAzMiB9KSk7XG4gIHBsYXllci5zZXRTaG90QXJyYXkoc2hvdEFycmF5LCBzaW5nbGVTaG90QXJyYXkpO1xuICBjaGFyYWN0ZXJzLnB1c2goLi4uc2hvdEFycmF5LCAuLi5zaW5nbGVTaG90QXJyYXkpO1xuXG4gIGNvbnN0IGVuZW15QXJyYXkgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBFTkVNWV9NQVhfQ09VTlQgfSkubWFwKFxuICAgICgpID0+IG5ldyBFbmVteShjdHgsIGVuZW15U21hbGxJbWFnZSwgeyB3OiA0OCwgaDogNDggfSlcbiAgKTtcbiAgY2hhcmFjdGVycy5wdXNoKC4uLmVuZW15QXJyYXkpO1xuICBjb25zdCBlbmVteVNob3RBcnJheSA9IEFycmF5LmZyb20oeyBsZW5ndGg6IEVORU1ZX1NIT1RfTUFYX0NPVU5UIH0pLm1hcChcbiAgICAoKSA9PiBuZXcgU2hvdChjdHgsIGVuZW15U2hvdEltYWdlLCB7IHc6IDQ4LCBoOiA0OCB9KVxuICApO1xuICBjaGFyYWN0ZXJzLnB1c2goLi4uZW5lbXlTaG90QXJyYXkpO1xuICBlbmVteUFycmF5LmZvckVhY2goKGUpID0+IGUuc2V0U2hvdEFycmF5KGVuZW15U2hvdEFycmF5KSk7XG4gIFsuLi5zaG90QXJyYXksIC4uLnNpbmdsZVNob3RBcnJheV0uZm9yRWFjaCgocykgPT4gcy5zZXRUYXJnZXRzKGVuZW15QXJyYXkpKTtcblxuICBjb25zdCBzY2VuZSA9IG5ldyBTY2VuZU1hbmFnZXIoKTtcbiAgc2NlbmUuYWRkKFwiaW50cm9cIiwgKHRpbWUpID0+IHtcbiAgICBpZiAodGltZSA+IDIuMCkge1xuICAgICAgc2NlbmUudXNlKFwiaW52YWRlXCIpO1xuICAgIH1cbiAgfSk7XG4gIHNjZW5lLmFkZChcImludmFkZVwiLCAodGltZSkgPT4ge1xuICAgIGlmIChzY2VuZS5mcmFtZSA9PSAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IEVORU1ZX01BWF9DT1VOVDsgaSsrKSB7XG4gICAgICAgIGlmIChlbmVteUFycmF5W2ldLmxpZmUgPD0gMCkge1xuICAgICAgICAgIGNvbnN0IGUgPSBlbmVteUFycmF5W2ldO1xuICAgICAgICAgIGUuc2V0KENBTlZBU19XSURUSCAvIDIsIC1lLmhlaWdodCwgMiwgXCJkZWZhdWx0XCIpO1xuICAgICAgICAgIGUuc2V0VmVjdG9yKDAuMCwgMS4wKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2NlbmUuZnJhbWUgPT09IDEwMCkge1xuICAgICAgc2NlbmUudXNlKFwiaW52YWRlXCIpO1xuICAgIH1cbiAgfSk7XG4gIHNjZW5lLnVzZShcImludHJvXCIpO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZXZlbnQpID0+IHtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgY2FzZSBcIkFycm93TGVmdFwiOlxuICAgICAgICBzdGF0ZS5pc0tleURvd24uYXJyb3dMZWZ0ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICBzdGF0ZS5pc0tleURvd24uYXJyb3dSaWdodCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFycm93VXBcIjpcbiAgICAgICAgc3RhdGUuaXNLZXlEb3duLmFycm93VXAgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgICAgc3RhdGUuaXNLZXlEb3duLmFycm93RG93biA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInpcIjpcbiAgICAgICAgc3RhdGUuaXNLZXlEb3duLnogPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGV2ZW50KSA9PiB7XG4gICAgc3dpdGNoIChldmVudC5rZXkpIHtcbiAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgc3RhdGUuaXNLZXlEb3duLmFycm93TGVmdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG4gICAgICAgIHN0YXRlLmlzS2V5RG93bi5hcnJvd1JpZ2h0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFycm93VXBcIjpcbiAgICAgICAgc3RhdGUuaXNLZXlEb3duLmFycm93VXAgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgIHN0YXRlLmlzS2V5RG93bi5hcnJvd0Rvd24gPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwielwiOlxuICAgICAgICBzdGF0ZS5pc0tleURvd24ueiA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IHN0YXJ0VGltZTogbnVtYmVyO1xuICAoZnVuY3Rpb24gd2FpdCgpIHtcbiAgICBjb25zdCBpc1JlYWR5ID0gY2hhcmFjdGVycy5ldmVyeSgoYykgPT4gYy5yZWFkeSgpKTtcbiAgICBpZiAoIWlzUmVhZHkpIHtcbiAgICAgIHNldFRpbWVvdXQod2FpdCwgMTAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICByZW5kZXIoKTtcbiAgfSkoKTtcblxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgY3R4Lmdsb2JhbEFscGhhID0gMS4wO1xuICAgIHV0aWwuZHJhd1JlY3QoY3R4LCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQsIFwiI2VlZWVlZVwiKTtcblxuICAgIHNjZW5lLnVwZGF0ZSgpO1xuXG4gICAgY2hhcmFjdGVycy5mb3JFYWNoKChjKSA9PiBjLnVwZGF0ZSgpKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfVxufTtcbiIsImV4cG9ydCBjb25zdCBkcmF3UmVjdCA9IChcbiAgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICB4OiBudW1iZXIsXG4gIHk6IG51bWJlcixcbiAgd2lkdGg6IG51bWJlcixcbiAgaGVpZ2h0OiBudW1iZXIsXG4gIGNvbG9yOiBzdHJpbmdcbikgPT4ge1xuICBpZiAoY29sb3IgIT0gbnVsbCkge1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3I7XG4gIH1cbiAgY29udGV4dC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9