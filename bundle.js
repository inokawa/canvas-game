(()=>{"use strict";var t,n,e,r,o,i,s,a,c,h,u,l,f,p,d,y,w={426:(t,n,e)=>{e.d(n,{Z:()=>a});var r=e(15),o=e.n(r),i=e(645),s=e.n(i)()(o());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=t(n);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&o[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),n.push(c))}},n}},15:t=>{function n(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}t.exports=function(t){var e,r,o=(r=4,function(t){if(Array.isArray(t))return t}(e=t)||function(t,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var e=[],r=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(e.push(s.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return e}}(e,r)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([h]).join("\n")}return[i].join("\n")}},379:(t,n,e)=>{var r,o=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),i=[];function s(t){for(var n=-1,e=0;e<i.length;e++)if(i[e].identifier===t){n=e;break}return n}function a(t,n){for(var e={},r=[],o=0;o<t.length;o++){var a=t[o],c=n.base?a[0]+n.base:a[0],h=e[c]||0,u="".concat(c," ").concat(h);e[c]=h+1;var l=s(u),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(i[l].references++,i[l].updater(f)):i.push({identifier:u,updater:y(f,n),references:1}),r.push(u)}return r}function c(t){var n=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=e.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){n.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(n);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}return n}var h,u=(h=[],function(t,n){return h[t]=n,h.filter(Boolean).join("\n")});function l(t,n,e,r){var o=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=u(n,o);else{var i=document.createTextNode(o),s=t.childNodes;s[n]&&t.removeChild(s[n]),s.length?t.insertBefore(i,s[n]):t.appendChild(i)}}function f(t,n,e){var r=e.css,o=e.media,i=e.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,d=0;function y(t,n){var e,r,o;if(n.singleton){var i=d++;e=p||(p=c(n)),r=l.bind(null,e,i,!1),o=l.bind(null,e,i,!0)}else e=c(n),r=f.bind(null,e,n),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var e=a(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<e.length;r++){var o=s(e[r]);i[o].references--}for(var c=a(t,n),h=0;h<e.length;h++){var u=s(e[h]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}e=c}}}},446:(t,n,e)=>{t.exports=e.p+"82300f5733384f973929.png"},18:(t,n,e)=>{t.exports=e.p+"4233d78f478d9acd0230.png"},734:(t,n,e)=>{t.exports=e.p+"ff33312c29e171e364d7.png"}},g={};function v(t){if(g[t])return g[t].exports;var n=g[t]={id:t,exports:{}};return w[t](n,n.exports,v),n.exports}v.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return v.d(n,{a:n}),n},v.d=(t,n)=>{for(var e in n)v.o(n,e)&&!v.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},v.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),v.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;v.g.importScripts&&(t=v.g.location+"");var n=v.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");e.length&&(t=e[e.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),v.p=t})(),n=function(t){return t/360*Math.PI*2},t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)},e=function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},r=function(){function t(t,n){this.x=t,this.y=n}return t.prototype.set=function(t,n){this.x=t,this.y=n},t}(),o=function(t){function n(n,e){return t.call(this,n,e)||this}return e(n,t),n.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},n}(r),i=function(){function t(t,e,i,s,a,c,h){var u,l,f,p;void 0===h&&(h=0),this.ctx=t,this.position=new r(e,i),this.vector=new o(0,-1),this.width=s,this.height=a,this.angle=n(270),this.life=h,u=this,l=void 0,p=function(){var t;return function(t,n){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(t,s)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(n){switch(n.label){case 0:return t=this,[4,(e=c,new Promise((function(t,n){var r=new Image;r.addEventListener("load",(function(){t(r)})),r.src=e})))];case 1:return t.image=n.sent(),[2]}var e}))},new((f=void 0)||(f=Promise))((function(t,n){function e(t){try{o(p.next(t))}catch(t){n(t)}}function r(t){try{o(p.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof f?o:new f((function(t){t(o)}))).then(e,r)}o((p=p.apply(u,l||[])).next())}))}return t.prototype.setVector=function(t,n){this.vector.set(t,n)},t.prototype.setVectorFromAngle=function(t){this.angle=t,this.vector.setAngle(t)},t.prototype.draw=function(){if(this.image){var t=this.width/2,n=this.height/2;this.ctx.drawImage(this.image,this.position.x-t,this.position.y-n,this.width,this.height)}},t.prototype.rotationDraw=function(){if(this.image){this.ctx.save(),this.ctx.translate(this.position.x,this.position.y),this.ctx.rotate(this.angle-1.5*Math.PI);var t=this.width/2,n=this.height/2;this.ctx.drawImage(this.image,-t,-n,this.width,this.height),this.ctx.restore()}},t.prototype.update=function(){},t.prototype.ready=function(){return!!this.image},t}(),s=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),a=function(t){function e(n,e,r,o,i,s,a){var c=t.call(this,e,r,o,i,s,a,0)||this;return c.speed=3,c.shotArray=[],c.singleShotArray=[],c.shotCheckCounter=0,c.shotInterval=10,c.isComing=!1,c.state=n,c}return s(e,t),e.prototype.update=function(){if(this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var e=(t-this.comingStart)/1e3,r=this.comingStartPosition.y-50*e;r<=this.comingEndPosition.y&&(this.isComing=!1,r=this.comingEndPosition.y),this.position.set(this.position.x,r),t%100<50&&(this.ctx.globalAlpha=.5)}else if(this.state.isKeyDown.arrowLeft&&(this.position.x-=this.speed),this.state.isKeyDown.arrowRight&&(this.position.x+=this.speed),this.state.isKeyDown.arrowUp&&(this.position.y-=this.speed),this.state.isKeyDown.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.ctx.canvas.height)),this.state.isKeyDown.z&&this.shotCheckCounter>=0){for(var o=0;o<this.shotArray.length;o++)if(this.shotArray[o].life<=0){this.shotArray[o].set(this.position.x,this.position.y),this.shotCheckCounter=-this.shotInterval;break}for(o=0;o<this.singleShotArray.length;o+=2)if(this.singleShotArray[o].life<=0&&this.singleShotArray[o+1].life<=0){var i=n(280),s=n(260);this.singleShotArray[o].set(this.position.x,this.position.y),this.singleShotArray[o].setVectorFromAngle(i),this.singleShotArray[o+1].set(this.position.x,this.position.y),this.singleShotArray[o+1].setVectorFromAngle(s),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.ctx.globalAlpha=1}},e.prototype.setShotArray=function(t,n){this.shotArray=t,this.singleShotArray=n},e.prototype.setComing=function(t,n,e,o){this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,n),this.comingStartPosition=new r(t,n),this.comingEndPosition=new r(e,o)},e}(i),c=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),h=function(t){function n(n,e,r,o,i,s){var a=t.call(this,n,e,r,o,i,s,0)||this;return a.speed=7,a}return c(n,t),n.prototype.set=function(t,n){this.position.set(t,n),this.life=1},n.prototype.update=function(){this.life<=0||(this.position.y+this.height<0&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.rotationDraw())},n}(i),u=v(446),l=v(18),f=v(734),p=v(379),d=v.n(p),y=v(426),d()(y.Z,{insert:"head",singleton:!1}),y.Z.locals,window.addEventListener("load",(function(){return t=void 0,n=void 0,r=function(){function t(){var e,i,s;r.globalAlpha=1,e=r,i=n.width,s=n.height,e.fillStyle="#eeeeee",e.fillRect(0,0,i,s),o.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var n,e,r,o,i,s,c;return function(t,n){var e,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;s;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=n.call(t,s)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(p){return n=document.querySelector("#screen"),e={isKeyDown:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}},n.width=640,n.height=480,r=n.getContext("2d"),o=[],i=new a(e,r,0,0,64,64,u),o.push(i),i.setComing(320,480,320,380),s=Array.from({length:10}).map((function(){return new h(r,0,0,32,32,l)})),c=Array.from({length:20}).map((function(){return new h(r,0,0,32,32,f)})),i.setShotArray(s,c),o.push.apply(o,function(){for(var t=0,n=0,e=arguments.length;n<e;n++)t+=arguments[n].length;var r=Array(t),o=0;for(n=0;n<e;n++)for(var i=arguments[n],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r}(s,c)),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":e.isKeyDown.arrowLeft=!0;break;case"ArrowRight":e.isKeyDown.arrowRight=!0;break;case"ArrowUp":e.isKeyDown.arrowUp=!0;break;case"ArrowDown":e.isKeyDown.arrowDown=!0;break;case"z":e.isKeyDown.z=!0}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":e.isKeyDown.arrowLeft=!1;break;case"ArrowRight":e.isKeyDown.arrowRight=!1;break;case"ArrowUp":e.isKeyDown.arrowUp=!1;break;case"ArrowDown":e.isKeyDown.arrowDown=!1;break;case"z":e.isKeyDown.z=!1}})),function n(){o.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(n,100)}(),[2]}))},new((e=void 0)||(e=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(s,a)}c((r=r.apply(t,n||[])).next())}));var t,n,e,r}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,