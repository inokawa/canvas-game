(()=>{"use strict";var t,n,e,r,o,i,a,s,c,u,l,h,f={426:(t,n,e)=>{e.d(n,{Z:()=>s});var r=e(15),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=t(n);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&o[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),n.push(c))}},n}},15:t=>{function n(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}t.exports=function(t){var e,r,o=(r=4,function(t){if(Array.isArray(t))return t}(e=t)||function(t,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var e=[],r=!0,o=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return e}}(e,r)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(c," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(l).concat([u]).join("\n")}return[i].join("\n")}},379:(t,n,e)=>{var r,o=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),i=[];function a(t){for(var n=-1,e=0;e<i.length;e++)if(i[e].identifier===t){n=e;break}return n}function s(t,n){for(var e={},r=[],o=0;o<t.length;o++){var s=t[o],c=n.base?s[0]+n.base:s[0],u=e[c]||0,l="".concat(c," ").concat(u);e[c]=u+1;var h=a(l),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==h?(i[h].references++,i[h].updater(f)):i.push({identifier:l,updater:y(f,n),references:1}),r.push(l)}return r}function c(t){var n=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=e.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){n.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(n);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var u,l=(u=[],function(t,n){return u[t]=n,u.filter(Boolean).join("\n")});function h(t,n,e,r){var o=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=l(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}function f(t,n,e){var r=e.css,o=e.media,i=e.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,d=0;function y(t,n){var e,r,o;if(n.singleton){var i=d++;e=p||(p=c(n)),r=h.bind(null,e,i,!1),o=h.bind(null,e,i,!0)}else e=c(n),r=f.bind(null,e,n),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var e=s(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<e.length;r++){var o=a(e[r]);i[o].references--}for(var c=s(t,n),u=0;u<e.length;u++){var l=a(e[u]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}e=c}}}},446:(t,n,e)=>{t.exports=e.p+"82300f5733384f973929.png"},18:(t,n,e)=>{t.exports=e.p+"4233d78f478d9acd0230.png"}},p={};function d(t){if(p[t])return p[t].exports;var n=p[t]={id:t,exports:{}};return f[t](n,n.exports,d),n.exports}d.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return d.d(n,{a:n}),n},d.d=(t,n)=>{for(var e in n)d.o(n,e)&&!d.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},d.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),d.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t;d.g.importScripts&&(t=d.g.location+"");var n=d.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");e.length&&(t=e[e.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),d.p=t})(),n=function(){function t(t,n){this.x=t,this.y=n}return t.prototype.set=function(t,n){this.x=t,this.y=n},t}(),e=function(){function t(t,e,r,o,i,a,s){var c,u,l,h;this.ctx=t,this.position=new n(e,r),this.width=o,this.height=i,this.life=a,c=this,u=void 0,h=function(){var t;return function(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(n){switch(n.label){case 0:return t=this,[4,(e=s,new Promise((function(t,n){var r=new Image;r.addEventListener("load",(function(){t(r)})),r.src=e})))];case 1:return t.image=n.sent(),[2]}var e}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{o(h.next(t))}catch(t){n(t)}}function r(t){try{o(h.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,r)}o((h=h.apply(c,u||[])).next())}))}return t.prototype.draw=function(){if(this.image){var t=this.width/2,n=this.height/2;this.ctx.drawImage(this.image,this.position.x-t,this.position.y-n,this.width,this.height)}},t}(),t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)},r=function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},o=function(t){function e(n,e,r,o,i,a,s){var c=t.call(this,e,r,o,i,a,0,s)||this;return c.speed=3,c.shotArray=[],c.isComing=!1,c.state=n,c}return r(e,t),e.prototype.update=function(){if(this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var n=(t-this.comingStart)/1e3,e=this.comingStartPosition.y-50*n;e<=this.comingEndPosition.y&&(this.isComing=!1,e=this.comingEndPosition.y),this.position.set(this.position.x,e),t%100<50&&(this.ctx.globalAlpha=.5)}else if(this.state.isKeyDown.arrowLeft&&(this.position.x-=this.speed),this.state.isKeyDown.arrowRight&&(this.position.x+=this.speed),this.state.isKeyDown.arrowUp&&(this.position.y-=this.speed),this.state.isKeyDown.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.ctx.canvas.height)),this.state.isKeyDown.z)for(var r=0;r<this.shotArray.length;++r)if(this.shotArray[r].life<=0){this.shotArray[r].set(this.position.x,this.position.y);break}this.draw(),this.ctx.globalAlpha=1}},e.prototype.setShotArray=function(t){this.shotArray=t},e.prototype.setComing=function(t,e,r,o){this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new n(t,e),this.comingEndPosition=new n(r,o)},e}(e),i=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),a=function(t){function n(n,e,r,o,i,a){var s=t.call(this,n,e,r,o,i,0,a)||this;return s.speed=7,s}return i(n,t),n.prototype.set=function(t,n){this.position.set(t,n),this.life=1},n.prototype.update=function(){this.life<=0||(this.position.y+this.height<0&&(this.life=0),this.position.y-=this.speed,this.draw())},n}(e),s=d(446),c=d(18),u=d(379),l=d.n(u),h=d(426),l()(h.Z,{insert:"head",singleton:!1}),h.Z.locals,window.addEventListener("load",(function(){return t=void 0,n=void 0,r=function(){function t(){var e,o,a;r.globalAlpha=1,e=r,o=n.width,a=n.height,e.fillStyle="#eeeeee",e.fillRect(0,0,o,a),i.update(),u.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var n,e,r,i,u,l;return function(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(h){for(n=document.querySelector("#screen"),e={isKeyDown:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}},n.width=640,n.height=480,r=n.getContext("2d"),(i=new o(e,r,0,0,64,64,s)).setComing(320,480,320,380),u=[],l=0;l<10;++l)u[l]=new a(r,0,0,32,32,c);return i.setShotArray(u),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":e.isKeyDown.arrowLeft=!0;break;case"ArrowRight":e.isKeyDown.arrowRight=!0;break;case"ArrowUp":e.isKeyDown.arrowUp=!0;break;case"ArrowDown":e.isKeyDown.arrowDown=!0;break;case"z":e.isKeyDown.z=!0}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":e.isKeyDown.arrowLeft=!1;break;case"ArrowRight":e.isKeyDown.arrowRight=!1;break;case"ArrowUp":e.isKeyDown.arrowUp=!1;break;case"ArrowDown":e.isKeyDown.arrowDown=!1;break;case"z":e.isKeyDown.z=!1}})),Date.now(),t(),[2]}))},new((e=void 0)||(e=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,s)}c((r=r.apply(t,n||[])).next())}));var t,n,e,r}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,