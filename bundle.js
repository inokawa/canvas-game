(()=>{"use strict";var t,e,n,i,o,r,s,a,c,h,f,u,p,l,d,y,v,g,w,m,b,A,x,_,k,S,E,C,O,M,j,P,T={426:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(15),o=n.n(i),r=n(645),s=n.n(r)()(o());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);i&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,o=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],i=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(i=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);i=!0);}catch(t){o=!0,r=t}finally{try{i||null==a.return||a.return()}finally{if(o)throw r}}return n}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),f=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[r].concat(f).concat([h]).join("\n")}return[r].join("\n")}},379:(t,e,n)=>{var i,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),r=[];function s(t){for(var e=-1,n=0;n<r.length;n++)if(r[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},i=[],o=0;o<t.length;o++){var a=t[o],c=e.base?a[0]+e.base:a[0],h=n[c]||0,f="".concat(c," ").concat(h);n[c]=h+1;var u=s(f),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(r[u].references++,r[u].updater(p)):r.push({identifier:f,updater:y(p,e),references:1}),i.push(f)}return i}function c(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,f=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function u(t,e,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=f(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function p(t,e,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var l=null,d=0;function y(t,e){var n,i,o;if(e.singleton){var r=d++;n=l||(l=c(e)),i=u.bind(null,n,r,!1),o=u.bind(null,n,r,!0)}else n=c(e),i=p.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var o=s(n[i]);r[o].references--}for(var c=a(t,e),h=0;h<n.length;h++){var f=s(n[h]);0===r[f].references&&(r[f].updater(),r.splice(f,1))}n=c}}}},321:(t,e,n)=>{t.exports=n.p+"f4a1ccee5877de288df2.png"},403:(t,e,n)=>{t.exports=n.p+"557374f791944ecf6c01.png"},657:(t,e,n)=>{t.exports=n.p+"a98f39017db8c62ba701.png"},446:(t,e,n)=>{t.exports=n.p+"82300f5733384f973929.png"},18:(t,e,n)=>{t.exports=n.p+"4233d78f478d9acd0230.png"},734:(t,e,n)=>{t.exports=n.p+"ff33312c29e171e364d7.png"}},B={};function z(t){if(B[t])return B[t].exports;var e=B[t]={id:t,exports:{}};return T[t](e,e.exports,z),e.exports}z.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return z.d(e,{a:e}),e},z.d=(t,e)=>{for(var n in e)z.o(e,n)&&!z.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},z.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),z.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;z.g.importScripts&&(t=z.g.location+"");var e=z.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),z.p=t})(),e=function(t,e,n,i,o,r){null!=o&&(t.fillStyle=o),t.fillText(e,n,i,r)},n=function(t){return t/360*Math.PI*2},i=function(t,e){return Math.sqrt(t*t+e*e)},o=function(t,e){return Array.from({length:t}).map(e)},t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},r=function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)},s=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return i(e,n)},t}(),a=function(t){function e(e,n){return t.call(this,e,n)||this}return r(e,t),e.new=function(t,n){return void 0===t&&(t=0),void 0===n&&(n=-1),new e(t,n)},e.unit=function(t,n){var i=this.dot(t,n);return new e(t/i,n/i)},e.fromAngle=function(t){return new e(Math.cos(t),Math.sin(t))},e.dot=function(t,e){return i(t,e)},Object.defineProperty(e.prototype,"angle",{get:function(){var t=Math.asin(this.y);return this.x>=0?t:Math.PI-t},enumerable:!1,configurable:!0}),e.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},e}(s),c=function(){function t(){}return t.prototype.update=function(){},t.prototype.ready=function(){return!0},t}(),h=function(t){function e(e,n,i){var o,r,c,h,f=i.x,u=void 0===f?0:f,p=i.y,l=void 0===p?0:p,d=i.w,y=i.h,v=i.life,g=void 0===v?0:v,w=t.call(this)||this;return w.state=e,w.position=new s(u,l),w.vector=a.new(),w.width=d,w.height=y,w.life=g,o=w,r=void 0,h=function(){var t;return function(t,e){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,(i=n,new Promise((function(t,e){var n=new Image;n.addEventListener("load",(function(){t(n)})),n.src=i})))];case 1:return t.image=e.sent(),[2]}var i}))},new((c=void 0)||(c=Promise))((function(t,e){function n(t){try{s(h.next(t))}catch(t){e(t)}}function i(t){try{s(h.throw(t))}catch(t){e(t)}}function s(e){var o;e.done?t(e.value):(o=e.value,o instanceof c?o:new c((function(t){t(o)}))).then(n,i)}s((h=h.apply(o,r||[])).next())})),w}return r(e,t),e.prototype.setVector=function(t,e){this.vector.set(t,e)},e.prototype.setVectorFromAngle=function(t){this.vector.setAngle(t)},e.prototype.draw=function(){if(this.image){var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)}},e.prototype.rotationDraw=function(){if(this.image){this.state.ctx.save(),this.state.ctx.translate(this.position.x,this.position.y),this.state.ctx.rotate(this.vector.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.state.ctx.restore()}},e.prototype.update=function(){},e.prototype.ready=function(){return!!this.image},e}(c),f=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),u=function(t){function e(e,n,i,o,r){var s=t.call(this,e,n,i)||this;return s.speed=3,s.frame=0,s.type="default",s.attactTarget=o,s.shotArray=r,s}return f(e,t),e.prototype.set=function(t,e,n,i){void 0===n&&(n=1),void 0===i&&(i="default"),this.position.set(t,e),this.life=n,this.type=i,this.frame=0},e.prototype.fire=function(t,e,n){void 0===t&&(t=0),void 0===e&&(e=1),void 0===n&&(n=5);for(var i=0,o=this.shotArray;i<o.length;i++){var r=o[i];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(n),r.setVector(t,e);break}}},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case"default":100==this.frame&&this.fire(),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed;break;case"wave":if(this.frame%60==0){var t=this.attactTarget.position.x-this.position.x,e=this.attactTarget.position.y-this.position.y,n=a.unit(t,e);this.fire(n.x,n.y,4)}this.position.x+=Math.sin(this.frame/10),this.position.y+=2;break;case"large":if(this.frame%50==0)for(var i=0;i<360;i+=45){var o=i*Math.PI/180;this.fire(Math.cos(o),Math.sin(o),3)}this.position.x+=2*Math.sin((this.frame+90)/50),this.position.y+=1}this.position.y-this.height>this.state.ctx.canvas.height&&(this.life=0),this.draw(),this.frame++}},e}(h),p=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),l=function(t){function e(e,n,i,o,r,s){void 0===s&&(s="#ff1166");var a=t.call(this)||this;return a.life=!1,a.fires=[],a.startTime=0,a.ctx=e,a.radius=n,a.count=i,a.size=o,a.timeRange=r,a.color=s,a}return p(e,t),e.prototype.set=function(t,e){var n=this;this.fires=o(this.count,(function(){return{position:new s(t,e),vector:a.fromAngle(Math.random()*Math.PI*2),size:(.5*Math.random()+.5)*n.size}})),this.life=!0,this.startTime=Date.now()},e.prototype.update=function(){if(this.life){this.ctx.fillStyle=this.color,this.ctx.globalAlpha=.5;for(var t=(Date.now()-this.startTime)/1e3,e=1-(h=1-Math.min(t/this.timeRange,1))*h*h*h,n=1-e,i=0,o=this.fires;i<o.length;i++){var r=o[i],s=this.radius*e,a=r.position.x+r.vector.x*s,c=r.position.y+r.vector.y*s;this.ctx.fillRect(a-r.size*n/2,c-r.size*n/2,r.size*n,r.size*n)}e>=1&&(this.life=!1)}var h},e}(c),d=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),y=function(t){function e(e,n,i,o){var r=o.shot,s=o.singleShot,a=t.call(this,e,n,i)||this;return a.speed=3,a.shotCheckCounter=0,a.shotInterval=10,a.isComing=!1,a.state=e,a.shotArray=r,a.singleShotArray=s,a}return d(e,t),e.prototype.update=function(){if(!(this.life<=0)&&this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var e=(t-this.comingStart)/1e3,i=this.comingStartPosition.y-50*e;i<=this.comingEndPosition.y&&(this.isComing=!1,i=this.comingEndPosition.y),this.position.set(this.position.x,i),t%100<50&&(this.state.ctx.globalAlpha=.5)}else if(this.state.key.arrowLeft&&(this.position.x-=this.speed),this.state.key.arrowRight&&(this.position.x+=this.speed),this.state.key.arrowUp&&(this.position.y-=this.speed),this.state.key.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.state.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.state.ctx.canvas.height)),this.state.key.z&&this.shotCheckCounter>=0){for(var o=0,r=this.shotArray;o<r.length;o++){var s=r[o];if(s.life<=0){s.set(this.position.x,this.position.y),s.setPower(2),this.shotCheckCounter=-this.shotInterval;break}}for(var a=0;a<this.singleShotArray.length;a+=2)if(this.singleShotArray[a].life<=0&&this.singleShotArray[a+1].life<=0){var c=n(280),h=n(260);this.singleShotArray[a].set(this.position.x,this.position.y),this.singleShotArray[a].setVectorFromAngle(c),this.singleShotArray[a+1].set(this.position.x,this.position.y),this.singleShotArray[a+1].setVectorFromAngle(h),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.state.ctx.globalAlpha=1}},e.prototype.setComing=function(t,e,n,i){this.life=1,this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new s(t,e),this.comingEndPosition=new s(n,i)},e}(h),v=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),g=function(t){function e(e,n,i){var o=t.call(this,e,n,i)||this;return o.speed=7,o.power=1,o.targetArray=[],o.explosionArray=[],o}return v(e,t),e.prototype.set=function(t,e){this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.setExplosions=function(t){this.explosionArray=t},e.prototype.update=function(){var t=this;this.life<=0||((this.position.x+this.width<0||this.position.x-this.width>this.state.ctx.canvas.width||this.position.y+this.height<0||this.position.y-this.height>this.state.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){if(!(e.life<=0)&&t.position.distance(e.position)<=(t.width+e.width)/4){if(e instanceof y&&e.isComing)return;if(e.life-=t.power,e.life<=0)for(var n=0,i=t.explosionArray;n<i.length;n++){var o=i[n];if(!o.life){o.set(e.position.x,e.position.y);break}}e instanceof u&&("large"===e.type?t.state.gameScore.add(1e3):t.state.gameScore.add(100)),t.life=0}})),this.rotationDraw())},e}(h),w=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),m=function(){function t(){this.score=0}return t.prototype.add=function(t){this.score=Math.min(this.score+t,99999)},t.prototype.reset=function(){this.score=0},t.prototype.display=function(){return t=this.score,(new Array(5).join("0")+t).slice(-5);var t},t}(),b=z(446),A=z(18),x=z(734),_=z(657),k=z(321),S=z(403),E=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}(),C=function(t){function e(e,n,i,o){void 0===o&&(o="#ffffff");var r=t.call(this)||this;return r.position=new s(0,0),r.state=e,r.size=n,r.speed=i,r.color=o,r}return E(e,t),e.prototype.set=function(t,e){this.position.set(t,e)},e.prototype.update=function(){this.state.ctx.globalAlpha=1,this.state.ctx.fillStyle=this.color,this.position.y+=this.speed,this.state.ctx.fillRect(this.position.x-this.size/2,this.position.y-this.size/2,this.size,this.size),this.position.y+this.size>this.state.ctx.canvas.height&&(this.position.y=-this.size)},e}(c),O=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),o=0;for(e=0;e<n;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i},M=z(379),j=z.n(M),P=z(426),j()(P.Z,{insert:"head",singleton:!1}),P.Z.locals,window.addEventListener("load",(function(){return t=void 0,i=void 0,s=function(){function t(){var n,o,r;s.globalAlpha=1,n=s,o=i.width,r=i.height,n.fillStyle="#111122",n.fillRect(0,0,o,r),s.font="bold 24px monospace",e(s,a.gameScore.display(),30,50,"#ffffff"),P.update(),h.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var i,r,s,a,c,h,f,p,d,v,E,M,j,P;return function(t,e){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(o=2&r[0]?i.return:r[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,r[1])).done)return o;switch(i=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,i=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],i=0}finally{n=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(T){return i=document.querySelector("#screen"),r=640,i.width=r,i.height=480,s=i.getContext("2d"),a=function(t){return{ctx:t,gameScore:new m,key:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}}}(s),c=!1,h=[],f=o(10,(function(){return new g(a,A,{w:32,h:32})})),p=o(20,(function(){return new g(a,x,{w:32,h:32})})),h.push.apply(h,O(f,p)),d=new y(a,b,{w:64,h:64},{shot:f,singleShot:p}),h.push(d),d.setComing(320,480,320,380),v=o(50,(function(){return new g(a,S,{w:48,h:48})})),h.push.apply(h,v),E=O(o(20,(function(){return new u(a,_,{w:48,h:48},d,v)})),o(5,(function(){return new u(a,k,{w:64,h:64},d,v)}))),h.push.apply(h,E),M=o(10,(function(){return new l(s,100,15,40,1)})),h.push.apply(h,M),O(f,p).forEach((function(t){t.setTargets(E),t.setExplosions(M)})),v.forEach((function(t){t.setTargets([d]),t.setExplosions(M)})),j=o(100,(function(){var t=1+2*Math.random(),e=1+3*Math.random(),n=new C(a,t,e);return n.set(Math.random()*r,480*Math.random()),n})),h.push.apply(h,j),(P=new w).add("intro",(function(t){t>3&&P.use("invade_default_type")})),P.add("invade_default_type",(function(t){if(P.frame%30==0)for(var e=0,i=E;e<i.length;e++){var o=i[e];if(o.life<=0){P.frame%60==0?(o.set(-o.width,30,2,"default"),o.setVectorFromAngle(n(30))):(o.set(r+o.width,30,2,"default"),o.setVectorFromAngle(n(150)));break}}270===P.frame&&P.use("blank"),d.life<=0&&P.use("gameover")})),P.add("blank",(function(t){150===P.frame&&P.use("invade_wave_move_type"),d.life<=0&&P.use("gameover")})),P.add("invade_wave_move_type",(function(t){if(P.frame%50==0)for(var e=0,n=E;e<n.length;e++){var i=n[e];if(i.life<=0){P.frame<=200?i.set(128,-i.height,2,"wave"):i.set(512,-i.height,2,"wave");break}}450===P.frame&&P.use("invade_large_type"),d.life<=0&&P.use("gameover")})),P.add("invade_large_type",(function(t){if(100===P.frame)for(var e=20;e<25;e++)if(E[e].life<=0){var n=E[e];n.set(320,-n.height,50,"large");break}500===P.frame&&P.use("intro"),d.life<=0&&P.use("gameover")})),P.add("gameover",(function(t){var n=r-2*P.frame%960;s.font="bold 72px sans-serif",e(s,"GAME OVER",n,240,"#ff0000",320),c&&(c=!1,a.gameScore.reset(),d.setComing(320,530,320,380),P.use("intro"))})),P.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":a.key.arrowLeft=!0;break;case"ArrowRight":a.key.arrowRight=!0;break;case"ArrowUp":a.key.arrowUp=!0;break;case"ArrowDown":a.key.arrowDown=!0;break;case"z":a.key.z=!0;break;case"Enter":d.life<=0&&(c=!0)}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":a.key.arrowLeft=!1;break;case"ArrowRight":a.key.arrowRight=!1;break;case"ArrowUp":a.key.arrowUp=!1;break;case"ArrowDown":a.key.arrowDown=!1;break;case"z":a.key.z=!1}})),function e(){h.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}))},new((r=void 0)||(r=Promise))((function(e,n){function o(t){try{c(s.next(t))}catch(t){n(t)}}function a(t){try{c(s.throw(t))}catch(t){n(t)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(t){t(n)}))).then(o,a)}c((s=s.apply(t,i||[])).next())}));var t,i,r,s}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,