(()=>{"use strict";var t,e,n,o,r,i,s,a,c,h,u,f,p,l,y,d,v,g,w,m,b,A,x,k,S,C,_,E={426:(t,e,n)=>{n.d(e,{Z:()=>a});var o=n(15),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],s=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([h]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var o,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function s(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},o=[],r=0;r<t.length;r++){var a=t[r],c=e.base?a[0]+e.base:a[0],h=n[c]||0,u="".concat(c," ").concat(h);n[c]=h+1;var f=s(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(p)):i.push({identifier:u,updater:d(p,e),references:1}),o.push(u)}return o}function c(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var s=r(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function f(t,e,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=u(e,r);else{var i=document.createTextNode(r),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function p(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var l=null,y=0;function d(t,e){var n,o,r;if(e.singleton){var i=y++;n=l||(l=c(e)),o=f.bind(null,n,i,!1),r=f.bind(null,n,i,!0)}else n=c(e),o=p.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var r=s(n[o]);i[r].references--}for(var c=a(t,e),h=0;h<n.length;h++){var u=s(n[h]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=c}}}},403:(t,e,n)=>{t.exports=n.p+"557374f791944ecf6c01.png"},657:(t,e,n)=>{t.exports=n.p+"a98f39017db8c62ba701.png"},446:(t,e,n)=>{t.exports=n.p+"82300f5733384f973929.png"},18:(t,e,n)=>{t.exports=n.p+"4233d78f478d9acd0230.png"},734:(t,e,n)=>{t.exports=n.p+"ff33312c29e171e364d7.png"}},O={};function j(t){if(O[t])return O[t].exports;var e=O[t]={id:t,exports:{}};return E[t](e,e.exports,j),e.exports}j.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return j.d(e,{a:e}),e},j.d=(t,e)=>{for(var n in e)j.o(e,n)&&!j.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},j.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),j.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;j.g.importScripts&&(t=j.g.location+"");var e=j.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),j.p=t})(),e=function(t){return t/360*Math.PI*2},n=function(t,e){return Array.from({length:t}).map(e)},t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},o=function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)},r=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.distance=function(t){var e=this.x-t.x,n=this.y-t.y;return Math.sqrt(e*e+n*n)},t}(),i=function(t){function e(e,n){return t.call(this,e,n)||this}return o(e,t),e.new=function(t,n){return void 0===t&&(t=0),void 0===n&&(n=-1),new e(t,n)},e.fromAngle=function(t){return new e(Math.cos(t),Math.sin(t))},Object.defineProperty(e.prototype,"angle",{get:function(){var t=Math.asin(this.y);return this.x>=0?t:Math.PI-t},enumerable:!1,configurable:!0}),e.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},e}(r),s=function(){function t(){}return t.prototype.update=function(){},t.prototype.ready=function(){return!0},t}(),a=function(t){function e(e,n,o){var s,a,c,h,u=o.x,f=void 0===u?0:u,p=o.y,l=void 0===p?0:p,y=o.w,d=o.h,v=o.life,g=void 0===v?0:v,w=t.call(this)||this;return w.ctx=e,w.position=new r(f,l),w.vector=i.new(),w.width=y,w.height=d,w.life=g,s=w,a=void 0,h=function(){var t;return function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,(o=n,new Promise((function(t,e){var n=new Image;n.addEventListener("load",(function(){t(n)})),n.src=o})))];case 1:return t.image=e.sent(),[2]}var o}))},new((c=void 0)||(c=Promise))((function(t,e){function n(t){try{r(h.next(t))}catch(t){e(t)}}function o(t){try{r(h.throw(t))}catch(t){e(t)}}function r(e){var r;e.done?t(e.value):(r=e.value,r instanceof c?r:new c((function(t){t(r)}))).then(n,o)}r((h=h.apply(s,a||[])).next())})),w}return o(e,t),e.prototype.setVector=function(t,e){this.vector.set(t,e)},e.prototype.setVectorFromAngle=function(t){this.vector.setAngle(t)},e.prototype.draw=function(){if(this.image){var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)}},e.prototype.rotationDraw=function(){if(this.image){this.ctx.save(),this.ctx.translate(this.position.x,this.position.y),this.ctx.rotate(this.vector.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.ctx.restore()}},e.prototype.update=function(){},e.prototype.ready=function(){return!!this.image},e}(s),c=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),h="default",u=function(t){function e(e,n,o,r){var i=t.call(this,e,n,o)||this;return i.speed=3,i.frame=0,i.type=h,i.shotArray=r,i}return c(e,t),e.prototype.set=function(t,e,n,o){void 0===n&&(n=1),void 0===o&&(o=h),this.position.set(t,e),this.life=n,this.type=o,this.frame=0},e.prototype.fire=function(t,e){void 0===t&&(t=0),void 0===e&&(e=1);for(var n=0,o=this.shotArray;n<o.length;n++){var r=o[n];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(5),r.setVector(t,e);break}}},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case h:50==this.frame&&this.fire(),this.position.y-this.height>this.ctx.canvas.height&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed}this.draw(),this.frame++}},e}(a),f=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),p=function(t){function e(e,n,o,r,i,s){void 0===s&&(s="#ff1166");var a=t.call(this)||this;return a.life=!1,a.fires=[],a.startTime=0,a.ctx=e,a.radius=n,a.count=o,a.size=r,a.timeRange=i,a.color=s,a}return f(e,t),e.prototype.set=function(t,e){this.fires=n(this.count,(function(){return{position:new r(t,e),vector:i.fromAngle(Math.random()*Math.PI*2)}})),this.life=!0,this.startTime=Date.now()},e.prototype.update=function(){if(this.life){this.ctx.fillStyle=this.color,this.ctx.globalAlpha=.5;for(var t=(Date.now()-this.startTime)/1e3,e=Math.min(t/this.timeRange,1),n=0,o=this.fires;n<o.length;n++){var r=o[n],i=this.radius*e,s=r.position.x+r.vector.x*i,a=r.position.y+r.vector.y*i;this.ctx.fillRect(s-this.size/2,a-this.size/2,this.size,this.size)}e>=1&&(this.life=!1)}},e}(s),l=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),y=function(t){function n(e,n,o,r,i){var s=i.shot,a=i.singleShot,c=t.call(this,n,o,r)||this;return c.speed=3,c.shotCheckCounter=0,c.shotInterval=10,c.isComing=!1,c.state=e,c.shotArray=s,c.singleShotArray=a,c}return l(n,t),n.prototype.update=function(){if(this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var n=(t-this.comingStart)/1e3,o=this.comingStartPosition.y-50*n;o<=this.comingEndPosition.y&&(this.isComing=!1,o=this.comingEndPosition.y),this.position.set(this.position.x,o),t%100<50&&(this.ctx.globalAlpha=.5)}else if(this.state.key.arrowLeft&&(this.position.x-=this.speed),this.state.key.arrowRight&&(this.position.x+=this.speed),this.state.key.arrowUp&&(this.position.y-=this.speed),this.state.key.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.ctx.canvas.height)),this.state.key.z&&this.shotCheckCounter>=0){for(var r=0,i=this.shotArray;r<i.length;r++){var s=i[r];if(s.life<=0){s.set(this.position.x,this.position.y),s.setPower(2),this.shotCheckCounter=-this.shotInterval;break}}for(var a=0;a<this.singleShotArray.length;a+=2)if(this.singleShotArray[a].life<=0&&this.singleShotArray[a+1].life<=0){var c=e(280),h=e(260);this.singleShotArray[a].set(this.position.x,this.position.y),this.singleShotArray[a].setVectorFromAngle(c),this.singleShotArray[a+1].set(this.position.x,this.position.y),this.singleShotArray[a+1].setVectorFromAngle(h),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.ctx.globalAlpha=1}},n.prototype.setComing=function(t,e,n,o){this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new r(t,e),this.comingEndPosition=new r(n,o)},n}(a),d=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),v=function(t){function e(e,n,o){var r=t.call(this,e,n,o)||this;return r.speed=7,r.power=1,r.targetArray=[],r.explosionArray=[],r}return d(e,t),e.prototype.set=function(t,e){this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.setExplosions=function(t){this.explosionArray=t},e.prototype.update=function(){var t=this;this.life<=0||((this.position.y+this.height<0||this.position.y-this.height>this.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){if(!(e.life<=0)&&t.position.distance(e.position)<=(t.width+e.width)/4){if(e.life-=t.power,e.life<=0)for(var n=0,o=t.explosionArray;n<o.length;n++){var r=o[n];if(!r.life){r.set(e.position.x,e.position.y);break}}t.life=0}})),this.rotationDraw())},e}(a),g=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),w=j(446),m=j(18),b=j(734),A=j(657),x=j(403),k=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var o=Array(t),r=0;for(e=0;e<n;e++)for(var i=arguments[e],s=0,a=i.length;s<a;s++,r++)o[r]=i[s];return o},S=j(379),C=j.n(S),_=j(426),C()(_.Z,{insert:"head",singleton:!1}),_.Z.locals,window.addEventListener("load",(function(){return t=void 0,e=void 0,r=function(){function t(){var n,o,s;r.globalAlpha=1,n=r,o=e.width,s=e.height,n.fillStyle="#eeeeee",n.fillRect(0,0,o,s),d.update(),i.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var e,o,r,i,s,a,c,h,f,l,d;return function(t,e){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(S){return e=document.querySelector("#screen"),o={key:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}},e.width=640,e.height=480,r=e.getContext("2d"),i=[],s=n(10,(function(){return new v(r,m,{w:32,h:32})})),a=n(20,(function(){return new v(r,b,{w:32,h:32})})),i.push.apply(i,k(s,a)),c=new y(o,r,w,{w:64,h:64},{shot:s,singleShot:a}),i.push(c),c.setComing(320,480,320,380),h=n(50,(function(){return new v(r,x,{w:48,h:48})})),i.push.apply(i,h),f=n(10,(function(){return new u(r,A,{w:48,h:48},h)})),i.push.apply(i,f),l=n(10,(function(){return new p(r,50,15,30,.25)})),i.push.apply(i,l),k(s,a).forEach((function(t){t.setTargets(f),t.setExplosions(l)})),(d=new g).add("intro",(function(t){t>2&&d.use("invade")})),d.add("invade",(function(t){if(0==d.frame)for(var e=0,n=f;e<n.length;e++){var o=n[e];if(o.life<=0){o.set(320,-o.height,2,"default"),o.setVector(0,1);break}}else 100===d.frame&&d.use("invade")})),d.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":o.key.arrowLeft=!0;break;case"ArrowRight":o.key.arrowRight=!0;break;case"ArrowUp":o.key.arrowUp=!0;break;case"ArrowDown":o.key.arrowDown=!0;break;case"z":o.key.z=!0}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":o.key.arrowLeft=!1;break;case"ArrowRight":o.key.arrowRight=!1;break;case"ArrowUp":o.key.arrowUp=!1;break;case"ArrowDown":o.key.arrowDown=!1;break;case"z":o.key.z=!1}})),function e(){i.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}))},new((o=void 0)||(o=Promise))((function(n,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?n(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}));var t,e,o,r}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,