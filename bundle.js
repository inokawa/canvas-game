(()=>{"use strict";var t,e,n,r,o,i,s,a,c,h,u,l,f,p,d={426:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(15),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,o=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([h]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var r,o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function s(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},r=[],o=0;o<t.length;o++){var a=t[o],c=e.base?a[0]+e.base:a[0],h=n[c]||0,u="".concat(c," ").concat(h);n[c]=h+1;var l=s(u),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(i[l].references++,i[l].updater(f)):i.push({identifier:u,updater:y(f,e),references:1}),r.push(u)}return r}function c(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,u=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function l(t,e,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=u(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function f(t,e,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,d=0;function y(t,e){var n,r,o;if(e.singleton){var i=d++;n=p||(p=c(e)),r=l.bind(null,n,i,!1),o=l.bind(null,n,i,!0)}else n=c(e),r=f.bind(null,n,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var o=s(n[r]);i[o].references--}for(var c=a(t,e),h=0;h<n.length;h++){var u=s(n[h]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=c}}}},446:(t,e,n)=>{t.exports=n.p+"82300f5733384f973929.png"},18:(t,e,n)=>{t.exports=n.p+"4233d78f478d9acd0230.png"},734:(t,e,n)=>{t.exports=n.p+"ff33312c29e171e364d7.png"}},y={};function w(t){if(y[t])return y[t].exports;var e=y[t]={id:t,exports:{}};return d[t](e,e.exports,w),e.exports}w.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return w.d(e,{a:e}),e},w.d=(t,e)=>{for(var n in e)w.o(e,n)&&!w.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},w.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),w.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;w.g.importScripts&&(t=w.g.location+"");var e=w.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),w.p=t})(),e=function(t){return t/360*Math.PI*2},n=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t}(),r=function(){function t(t,r,o,i,s,a,c){var h,u,l,f;void 0===c&&(c=0),this.ctx=t,this.position=new n(r,o),this.vector=new n(0,-1),this.width=i,this.height=s,this.angle=e(270),this.life=c,h=this,u=void 0,f=function(){var t;return function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,(n=a,new Promise((function(t,e){var r=new Image;r.addEventListener("load",(function(){t(r)})),r.src=n})))];case 1:return t.image=e.sent(),[2]}var n}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(f.next(t))}catch(t){e(t)}}function r(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((f=f.apply(h,u||[])).next())}))}return t.prototype.setVector=function(t,e){this.vector.set(t,e)},t.prototype.setVectorFromAngle=function(t){this.angle=t,this.vector.set(Math.cos(t),Math.sin(t))},t.prototype.draw=function(){if(this.image){var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)}},t.prototype.rotationDraw=function(){if(this.image){this.ctx.save(),this.ctx.translate(this.position.x,this.position.y),this.ctx.rotate(this.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.ctx.restore()}},t.prototype.update=function(){},t.prototype.ready=function(){return!!this.image},t}(),t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},o=function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)},i=function(t){function r(e,n,r,o,i,s,a){var c=t.call(this,n,r,o,i,s,a,0)||this;return c.speed=3,c.shotArray=[],c.singleShotArray=[],c.shotCheckCounter=0,c.shotInterval=10,c.isComing=!1,c.state=e,c}return o(r,t),r.prototype.update=function(){if(this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var n=(t-this.comingStart)/1e3,r=this.comingStartPosition.y-50*n;r<=this.comingEndPosition.y&&(this.isComing=!1,r=this.comingEndPosition.y),this.position.set(this.position.x,r),t%100<50&&(this.ctx.globalAlpha=.5)}else if(this.state.isKeyDown.arrowLeft&&(this.position.x-=this.speed),this.state.isKeyDown.arrowRight&&(this.position.x+=this.speed),this.state.isKeyDown.arrowUp&&(this.position.y-=this.speed),this.state.isKeyDown.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.ctx.canvas.height)),this.state.isKeyDown.z&&this.shotCheckCounter>=0){for(var o=0;o<this.shotArray.length;o++)if(this.shotArray[o].life<=0){this.shotArray[o].set(this.position.x,this.position.y),this.shotCheckCounter=-this.shotInterval;break}for(o=0;o<this.singleShotArray.length;o+=2)if(this.singleShotArray[o].life<=0&&this.singleShotArray[o+1].life<=0){var i=e(280),s=e(260);this.singleShotArray[o].set(this.position.x,this.position.y),this.singleShotArray[o].setVectorFromAngle(i),this.singleShotArray[o+1].set(this.position.x,this.position.y),this.singleShotArray[o+1].setVectorFromAngle(s),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.ctx.globalAlpha=1}},r.prototype.setShotArray=function(t,e){this.shotArray=t,this.singleShotArray=e},r.prototype.setComing=function(t,e,r,o){this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new n(t,e),this.comingEndPosition=new n(r,o)},r}(r),s=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),a=function(t){function e(e,n,r,o,i,s){var a=t.call(this,e,n,r,o,i,s,0)||this;return a.speed=7,a}return s(e,t),e.prototype.set=function(t,e){this.position.set(t,e),this.life=1},e.prototype.update=function(){this.life<=0||(this.position.y+this.height<0&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.rotationDraw())},e}(r),c=w(446),h=w(18),u=w(734),l=w(379),f=w.n(l),p=w(426),f()(p.Z,{insert:"head",singleton:!1}),p.Z.locals,window.addEventListener("load",(function(){return t=void 0,e=void 0,r=function(){function t(){var n,i,s;r.globalAlpha=1,n=r,i=e.width,s=e.height,n.fillStyle="#eeeeee",n.fillRect(0,0,i,s),o.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var e,n,r,o,s,l,f;return function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(p){return e=document.querySelector("#screen"),n={isKeyDown:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}},e.width=640,e.height=480,r=e.getContext("2d"),o=[],s=new i(n,r,0,0,64,64,c),o.push(s),s.setComing(320,480,320,380),l=Array.from({length:10}).map((function(){return new a(r,0,0,32,32,h)})),f=Array.from({length:20}).map((function(){return new a(r,0,0,32,32,u)})),s.setShotArray(l,f),o.push.apply(o,function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var i=arguments[e],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r}(l,f)),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":n.isKeyDown.arrowLeft=!0;break;case"ArrowRight":n.isKeyDown.arrowRight=!0;break;case"ArrowUp":n.isKeyDown.arrowUp=!0;break;case"ArrowDown":n.isKeyDown.arrowDown=!0;break;case"z":n.isKeyDown.z=!0}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":n.isKeyDown.arrowLeft=!1;break;case"ArrowRight":n.isKeyDown.arrowRight=!1;break;case"ArrowUp":n.isKeyDown.arrowUp=!1;break;case"ArrowDown":n.isKeyDown.arrowDown=!1;break;case"z":n.isKeyDown.z=!1}})),function e(){o.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}))},new((n=void 0)||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}));var t,e,n,r}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jaGFyYWN0ZXJzL2Jhc2UudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvY2hhcmFjdGVycy9wbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9zcmMvY2hhcmFjdGVycy9zaG90LnRzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2FudmFzLWdhbWUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2NhbnZhcy1nYW1lL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL2NhbnZhcy1nYW1lLy4vc3JjL2FwcC50cyIsIndlYnBhY2s6Ly9jYW52YXMtZ2FtZS8uL3NyYy9jYW52YXMudHMiXSwibmFtZXMiOlsiZGVnVG9SYWQiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJPYmplY3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwibWVtbyIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJhcHBseVRvU2luZ2xldG9uVGFnIiwicmVtb3ZlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjc3NOb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwiYmluZCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJyZXBsYWNlIiwicCIsImRlZ3JlZXMiLCJNYXRoIiwiUEkiLCJ4IiwieSIsInNldCIsImN0eCIsInciLCJoIiwiaW1hZ2VQYXRoIiwibGlmZSIsInBvc2l0aW9uIiwiUG9zaXRpb24iLCJ2ZWN0b3IiLCJ3aWR0aCIsImhlaWdodCIsImFuZ2xlIiwidXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbWFnZSIsIkltYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldFZlY3RvciIsInNldFZlY3RvckZyb21BbmdsZSIsImNvcyIsInNpbiIsImRyYXciLCJvZmZzZXRYIiwib2Zmc2V0WSIsImRyYXdJbWFnZSIsInJvdGF0aW9uRHJhdyIsInNhdmUiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJyZXN0b3JlIiwicmVhZHkiLCJzdGF0ZSIsInNwZWVkIiwic2hvdEFycmF5Iiwic2luZ2xlU2hvdEFycmF5Iiwic2hvdENoZWNrQ291bnRlciIsInNob3RJbnRlcnZhbCIsImlzQ29taW5nIiwiY29taW5nU3RhcnQiLCJjb21pbmdTdGFydFBvc2l0aW9uIiwiY29taW5nRW5kUG9zaXRpb24iLCJqdXN0VGltZSIsIkRhdGUiLCJub3ciLCJjb21pbmdUaW1lIiwiZ2xvYmFsQWxwaGEiLCJpc0tleURvd24iLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwiYXJyb3dVcCIsImFycm93RG93biIsIm1pbiIsIm1heCIsImNhbnZhcyIsInoiLCJyYWRDVyIsInJhZENDVyIsInNldFNob3RBcnJheSIsInNldENvbWluZyIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiQ2hhcmFjdGVyIiwicmVuZGVyIiwiY29udGV4dCIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiY2hhcmFjdGVycyIsImMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJnZXRDb250ZXh0IiwicGxheWVyIiwiUGxheWVyIiwidmlwZXIiLCJDQU5WQVNfV0lEVEgiLCJDQU5WQVNfSEVJR0hUIiwiU2hvdCIsIlNIT1RfTUFYX0NPVU5UIiwiZXZlbnQiLCJ3YWl0IiwiZXZlcnkiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoieUJBVWFBLEVDRWIsRUFlQSxFLEVDdkJBLEUsRUNGQSxFLDRFQ0NJQyxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLDZRQUFnUixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw2QkFBNkIsTUFBUSxHQUFHLFNBQVcsb0tBQW9LLGVBQWlCLENBQUMsOFFBQWdSLFdBQWEsTUFFMTFCLFcsUUNDQUQsRUFBT0UsUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBdURYLE9BckRBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVTixFQUF1QkssR0FFckMsT0FBSUEsRUFBSyxHQUNBLFVBQVVFLE9BQU9GLEVBQUssR0FBSSxNQUFNRSxPQUFPRCxFQUFTLEtBR2xEQSxLQUNORSxLQUFLLEtBS1ZQLEVBQUtRLEVBQUksU0FBVUMsRUFBU0MsRUFBWUMsR0FDZixpQkFBWkYsSUFFVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsRUFBUyxNQUc3QixJQUFJRyxFQUF5QixHQUU3QixHQUFJRCxFQUNGLElBQUssSUFBSUgsRUFBSSxFQUFHQSxFQUFJTixLQUFLVyxPQUFRTCxJQUFLLENBRXBDLElBQUlYLEVBQUtLLEtBQUtNLEdBQUcsR0FFUCxNQUFOWCxJQUNGZSxFQUF1QmYsSUFBTSxHQUtuQyxJQUFLLElBQUlpQixFQUFLLEVBQUdBLEVBQUtMLEVB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b3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgbG9hZEltYWdlID0gKHVybDogc3RyaW5nKTogUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICByZXNvbHZlKGltYWdlKTtcbiAgICB9KTtcbiAgICBpbWFnZS5zcmMgPSB1cmw7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZ1RvUmFkID0gKGRlZ3JlZXM6IG51bWJlcik6IG51bWJlciA9PlxuICAoZGVncmVlcyAvIDM2MCkgKiBNYXRoLlBJICogMjtcbiIsImltcG9ydCB7IGxvYWRJbWFnZSwgZGVnVG9SYWQgfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuZXhwb3J0IHR5cGUgU3RhdGUgPSB7XG4gIGlzS2V5RG93bjoge1xuICAgIGFycm93TGVmdDogYm9vbGVhbjtcbiAgICBhcnJvd1JpZ2h0OiBib29sZWFuO1xuICAgIGFycm93VXA6IGJvb2xlYW47XG4gICAgYXJyb3dEb3duOiBib29sZWFuO1xuICAgIHo6IGJvb2xlYW47XG4gIH07XG59O1xuXG5leHBvcnQgY2xhc3MgUG9zaXRpb24ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyIHtcbiAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gIHBvc2l0aW9uOiBQb3NpdGlvbjtcbiAgYW5nbGU6IG51bWJlcjtcbiAgdmVjdG9yOiBQb3NpdGlvbjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIGxpZmU6IG51bWJlcjtcbiAgaW1hZ2U/OiBIVE1MSW1hZ2VFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgdzogbnVtYmVyLFxuICAgIGg6IG51bWJlcixcbiAgICBpbWFnZVBhdGg6IHN0cmluZyxcbiAgICBsaWZlOiBudW1iZXIgPSAwXG4gICkge1xuICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgUG9zaXRpb24oeCwgeSk7XG4gICAgdGhpcy52ZWN0b3IgPSBuZXcgUG9zaXRpb24oMC4wLCAtMS4wKTtcbiAgICB0aGlzLndpZHRoID0gdztcbiAgICB0aGlzLmhlaWdodCA9IGg7XG4gICAgdGhpcy5hbmdsZSA9IGRlZ1RvUmFkKDI3MCk7XG4gICAgdGhpcy5saWZlID0gbGlmZTtcbiAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgdGhpcy5pbWFnZSA9IGF3YWl0IGxvYWRJbWFnZShpbWFnZVBhdGgpO1xuICAgIH0pKCk7XG4gIH1cblxuICBzZXRWZWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLnZlY3Rvci5zZXQoeCwgeSk7XG4gIH1cblxuICBzZXRWZWN0b3JGcm9tQW5nbGUoYW5nbGU6IG51bWJlcikge1xuICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcbiAgICB0aGlzLnZlY3Rvci5zZXQoTWF0aC5jb3MoYW5nbGUpLCBNYXRoLnNpbihhbmdsZSkpO1xuICB9XG5cbiAgZHJhdygpIHtcbiAgICBpZiAoIXRoaXMuaW1hZ2UpIHJldHVybjtcbiAgICBjb25zdCBvZmZzZXRYID0gdGhpcy53aWR0aCAvIDI7XG4gICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoXG4gICAgICB0aGlzLmltYWdlLFxuICAgICAgdGhpcy5wb3NpdGlvbi54IC0gb2Zmc2V0WCxcbiAgICAgIHRoaXMucG9zaXRpb24ueSAtIG9mZnNldFksXG4gICAgICB0aGlzLndpZHRoLFxuICAgICAgdGhpcy5oZWlnaHRcbiAgICApO1xuICB9XG5cbiAgcm90YXRpb25EcmF3KCkge1xuICAgIGlmICghdGhpcy5pbWFnZSkgcmV0dXJuO1xuICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICB0aGlzLmN0eC50cmFuc2xhdGUodGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnkpO1xuICAgIHRoaXMuY3R4LnJvdGF0ZSh0aGlzLmFuZ2xlIC0gTWF0aC5QSSAqIDEuNSk7XG5cbiAgICBjb25zdCBvZmZzZXRYID0gdGhpcy53aWR0aCAvIDI7XG4gICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgLW9mZnNldFgsIC1vZmZzZXRZLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gIH1cblxuICB1cGRhdGUoKSB7fVxuXG4gIHJlYWR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuaW1hZ2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IFN0YXRlLCBDaGFyYWN0ZXIsIFBvc2l0aW9uIH0gZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0IHsgU2hvdCB9IGZyb20gXCIuL3Nob3RcIjtcbmltcG9ydCB7IGRlZ1RvUmFkIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjbGFzcyBQbGF5ZXIgZXh0ZW5kcyBDaGFyYWN0ZXIge1xuICBzdGF0ZTogU3RhdGU7XG4gIHNwZWVkOiBudW1iZXIgPSAzO1xuXG4gIHNob3RBcnJheTogU2hvdFtdID0gW107XG4gIHNpbmdsZVNob3RBcnJheTogU2hvdFtdID0gW107XG4gIHNob3RDaGVja0NvdW50ZXIgPSAwO1xuICBzaG90SW50ZXJ2YWwgPSAxMDtcblxuICBpc0NvbWluZzogYm9vbGVhbiA9IGZhbHNlO1xuICBjb21pbmdTdGFydD86IG51bWJlcjtcbiAgY29taW5nU3RhcnRQb3NpdGlvbj86IFBvc2l0aW9uO1xuICBjb21pbmdFbmRQb3NpdGlvbj86IFBvc2l0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHN0YXRlOiBTdGF0ZSxcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHc6IG51bWJlcixcbiAgICBoOiBudW1iZXIsXG4gICAgaW1hZ2VQYXRoOiBzdHJpbmdcbiAgKSB7XG4gICAgc3VwZXIoY3R4LCB4LCB5LCB3LCBoLCBpbWFnZVBhdGgsIDApO1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAoXG4gICAgICAhdGhpcy5jb21pbmdTdGFydCB8fFxuICAgICAgIXRoaXMuY29taW5nU3RhcnRQb3NpdGlvbiB8fFxuICAgICAgIXRoaXMuY29taW5nRW5kUG9zaXRpb25cbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QganVzdFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgaWYgKHRoaXMuaXNDb21pbmcpIHtcbiAgICAgIGNvbnN0IGNvbWluZ1RpbWUgPSAoanVzdFRpbWUgLSB0aGlzLmNvbWluZ1N0YXJ0KSAvIDEwMDA7XG4gICAgICBsZXQgeSA9IHRoaXMuY29taW5nU3RhcnRQb3NpdGlvbi55IC0gY29taW5nVGltZSAqIDUwO1xuICAgICAgaWYgKHkgPD0gdGhpcy5jb21pbmdFbmRQb3NpdGlvbi55KSB7XG4gICAgICAgIHRoaXMuaXNDb21pbmcgPSBmYWxzZTtcbiAgICAgICAgeSA9IHRoaXMuY29taW5nRW5kUG9zaXRpb24ueTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3NpdGlvbi5zZXQodGhpcy5wb3NpdGlvbi54LCB5KTtcbiAgICAgIGlmIChqdXN0VGltZSAlIDEwMCA8IDUwKSB7XG4gICAgICAgIHRoaXMuY3R4Lmdsb2JhbEFscGhhID0gMC41O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc0tleURvd24uYXJyb3dMZWZ0KSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24ueCAtPSB0aGlzLnNwZWVkO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNLZXlEb3duLmFycm93UmlnaHQpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ICs9IHRoaXMuc3BlZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc0tleURvd24uYXJyb3dVcCkge1xuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgLT0gdGhpcy5zcGVlZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzS2V5RG93bi5hcnJvd0Rvd24pIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ICs9IHRoaXMuc3BlZWQ7XG4gICAgICB9XG4gICAgICB0aGlzLnBvc2l0aW9uLnNldChcbiAgICAgICAgTWF0aC5taW4oTWF0aC5tYXgodGhpcy5wb3NpdGlvbi54LCAwKSwgdGhpcy5jdHguY2FudmFzLndpZHRoKSxcbiAgICAgICAgTWF0aC5taW4oTWF0aC5tYXgodGhpcy5wb3NpdGlvbi55LCAwKSwgdGhpcy5jdHguY2FudmFzLmhlaWdodClcbiAgICAgICk7XG5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzS2V5RG93bi56KSB7XG4gICAgICAgIGlmICh0aGlzLnNob3RDaGVja0NvdW50ZXIgPj0gMCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaG90QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3RBcnJheVtpXS5saWZlIDw9IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG90QXJyYXlbaV0uc2V0KHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgdGhpcy5zaG90Q2hlY2tDb3VudGVyID0gLXRoaXMuc2hvdEludGVydmFsO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpbmdsZVNob3RBcnJheS5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0aGlzLnNpbmdsZVNob3RBcnJheVtpXS5saWZlIDw9IDAgJiZcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaSArIDFdLmxpZmUgPD0gMFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJhZENXID0gZGVnVG9SYWQoMjgwKTtcbiAgICAgICAgICAgICAgY29uc3QgcmFkQ0NXID0gZGVnVG9SYWQoMjYwKTtcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaV0uc2V0KHRoaXMucG9zaXRpb24ueCwgdGhpcy5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaV0uc2V0VmVjdG9yRnJvbUFuZ2xlKHJhZENXKTtcbiAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTaG90QXJyYXlbaSArIDFdLnNldCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgIHRoaXMuc2luZ2xlU2hvdEFycmF5W2kgKyAxXS5zZXRWZWN0b3JGcm9tQW5nbGUocmFkQ0NXKTtcbiAgICAgICAgICAgICAgdGhpcy5zaG90Q2hlY2tDb3VudGVyID0gLXRoaXMuc2hvdEludGVydmFsO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zaG90Q2hlY2tDb3VudGVyKys7XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IDEuMDtcbiAgfVxuXG4gIHNldFNob3RBcnJheShzaG90QXJyYXk6IFNob3RbXSwgc2luZ2xlU2hvdEFycmF5OiBTaG90W10pIHtcbiAgICB0aGlzLnNob3RBcnJheSA9IHNob3RBcnJheTtcbiAgICB0aGlzLnNpbmdsZVNob3RBcnJheSA9IHNpbmdsZVNob3RBcnJheTtcbiAgfVxuXG4gIHNldENvbWluZyhzdGFydFg6IG51bWJlciwgc3RhcnRZOiBudW1iZXIsIGVuZFg6IG51bWJlciwgZW5kWTogbnVtYmVyKSB7XG4gICAgdGhpcy5pc0NvbWluZyA9IHRydWU7XG4gICAgdGhpcy5jb21pbmdTdGFydCA9IERhdGUubm93KCk7XG4gICAgdGhpcy5wb3NpdGlvbi5zZXQoc3RhcnRYLCBzdGFydFkpO1xuICAgIHRoaXMuY29taW5nU3RhcnRQb3NpdGlvbiA9IG5ldyBQb3NpdGlvbihzdGFydFgsIHN0YXJ0WSk7XG4gICAgdGhpcy5jb21pbmdFbmRQb3NpdGlvbiA9IG5ldyBQb3NpdGlvbihlbmRYLCBlbmRZKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ2hhcmFjdGVyIH0gZnJvbSBcIi4vYmFzZVwiO1xuXG5leHBvcnQgY2xhc3MgU2hvdCBleHRlbmRzIENoYXJhY3RlciB7XG4gIHNwZWVkOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgICB3OiBudW1iZXIsXG4gICAgaDogbnVtYmVyLFxuICAgIGltYWdlUGF0aDogc3RyaW5nXG4gICkge1xuICAgIHN1cGVyKGN0eCwgeCwgeSwgdywgaCwgaW1hZ2VQYXRoLCAwKTtcblxuICAgIHRoaXMuc3BlZWQgPSA3O1xuICB9XG5cbiAgc2V0KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgdGhpcy5wb3NpdGlvbi5zZXQoeCwgeSk7XG4gICAgdGhpcy5saWZlID0gMTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5saWZlIDw9IDApIHJldHVybjtcbiAgICBpZiAodGhpcy5wb3NpdGlvbi55ICsgdGhpcy5oZWlnaHQgPCAwKSB7XG4gICAgICB0aGlzLmxpZmUgPSAwO1xuICAgIH1cbiAgICB0aGlzLnBvc2l0aW9uLnggKz0gdGhpcy52ZWN0b3IueCAqIHRoaXMuc3BlZWQ7XG4gICAgdGhpcy5wb3NpdGlvbi55ICs9IHRoaXMudmVjdG9yLnkgKiB0aGlzLnNwZWVkO1xuICAgIHRoaXMucm90YXRpb25EcmF3KCk7XG4gIH1cbn1cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGNoYXJzZXQgXFxcInV0Zi04XFxcIjtcXG5cXG4qIHtcXG4gIG1hcmdpbjogMHB4O1xcbiAgcGFkZGluZzogMHB4O1xcbn1cXG5cXG5odG1sLFxcbmJvZHkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU1NTU1NTtcXG4gIGNvbG9yOiAjZjBmMGYwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcGFkZGluZy10b3A6IDEwcHg7XFxufVxcblxcbmNhbnZhcyB7XFxuICBtYXJnaW46IDBweCBhdXRvO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLGdCQUFnQjs7QUFFaEI7RUFDRSxXQUFXO0VBQ1gsWUFBWTtBQUNkOztBQUVBOztFQUVFLHlCQUF5QjtFQUN6QixjQUFjO0VBQ2Qsa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxZQUFZO0VBQ1osZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAY2hhcnNldCBcXFwidXRmLThcXFwiO1xcblxcbioge1xcbiAgbWFyZ2luOiAwcHg7XFxuICBwYWRkaW5nOiAwcHg7XFxufVxcblxcbmh0bWwsXFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTU1NTU1O1xcbiAgY29sb3I6ICNmMGYwZjA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuXFxuY2FudmFzIHtcXG4gIG1hcmdpbjogMHB4IGF1dG87XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IHsgaW5pdCB9IGZyb20gXCIuL2FwcFwiO1xuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGluaXQpO1xuIiwiaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwiLi9jYW52YXNcIjtcbmltcG9ydCB7IFN0YXRlLCBQbGF5ZXIsIFNob3QsIENoYXJhY3RlciB9IGZyb20gXCIuL2NoYXJhY3RlcnNcIjtcbmltcG9ydCB2aXBlckltYWdlIGZyb20gXCIuL2Fzc2V0cy9pbWFnZXMvdmlwZXIucG5nXCI7XG5pbXBvcnQgdmlwZXJTaG90SW1hZ2UgZnJvbSBcIi4vYXNzZXRzL2ltYWdlcy92aXBlcl9zaG90LnBuZ1wiO1xuaW1wb3J0IHZpcGVyU2luZ2xlU2hvdEltYWdlIGZyb20gXCIuL2Fzc2V0cy9pbWFnZXMvdmlwZXJfc2luZ2xlX3Nob3QucG5nXCI7XG5cbmV4cG9ydCBjb25zdCBpbml0ID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NjcmVlblwiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcblxuICBjb25zdCBDQU5WQVNfV0lEVEggPSA2NDA7XG4gIGNvbnN0IENBTlZBU19IRUlHSFQgPSA0ODA7XG5cbiAgY29uc3QgU0hPVF9NQVhfQ09VTlQgPSAxMDtcblxuICBjb25zdCBzdGF0ZTogU3RhdGUgPSB7XG4gICAgaXNLZXlEb3duOiB7XG4gICAgICBhcnJvd0xlZnQ6IGZhbHNlLFxuICAgICAgYXJyb3dSaWdodDogZmFsc2UsXG4gICAgICBhcnJvd0Rvd246IGZhbHNlLFxuICAgICAgYXJyb3dVcDogZmFsc2UsXG4gICAgICB6OiBmYWxzZSxcbiAgICB9LFxuICB9O1xuXG4gIGNhbnZhcy53aWR0aCA9IENBTlZBU19XSURUSDtcbiAgY2FudmFzLmhlaWdodCA9IENBTlZBU19IRUlHSFQ7XG4gIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikhO1xuXG4gIGNvbnN0IGNoYXJhY3RlcnM6IENoYXJhY3RlcltdID0gW107XG4gIGNvbnN0IHBsYXllciA9IG5ldyBQbGF5ZXIoc3RhdGUsIGN0eCwgMCwgMCwgNjQsIDY0LCB2aXBlckltYWdlKTtcbiAgY2hhcmFjdGVycy5wdXNoKHBsYXllcik7XG4gIHBsYXllci5zZXRDb21pbmcoXG4gICAgQ0FOVkFTX1dJRFRIIC8gMixcbiAgICBDQU5WQVNfSEVJR0hULFxuICAgIENBTlZBU19XSURUSCAvIDIsXG4gICAgQ0FOVkFTX0hFSUdIVCAtIDEwMFxuICApO1xuICBjb25zdCBzaG90QXJyYXk6IFNob3RbXSA9IEFycmF5LmZyb20oeyBsZW5ndGg6IFNIT1RfTUFYX0NPVU5UIH0pLm1hcChcbiAgICAoKSA9PiBuZXcgU2hvdChjdHgsIDAsIDAsIDMyLCAzMiwgdmlwZXJTaG90SW1hZ2UpXG4gICk7XG4gIGNvbnN0IHNpbmdsZVNob3RBcnJheTogU2hvdFtdID0gQXJyYXkuZnJvbSh7XG4gICAgbGVuZ3RoOiBTSE9UX01BWF9DT1VOVCAqIDIsXG4gIH0pLm1hcCgoKSA9PiBuZXcgU2hvdChjdHgsIDAsIDAsIDMyLCAzMiwgdmlwZXJTaW5nbGVTaG90SW1hZ2UpKTtcbiAgcGxheWVyLnNldFNob3RBcnJheShzaG90QXJyYXksIHNpbmdsZVNob3RBcnJheSk7XG4gIGNoYXJhY3RlcnMucHVzaCguLi5zaG90QXJyYXksIC4uLnNpbmdsZVNob3RBcnJheSk7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgIHN0YXRlLmlzS2V5RG93bi5hcnJvd0xlZnQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG4gICAgICAgIHN0YXRlLmlzS2V5RG93bi5hcnJvd1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICBzdGF0ZS5pc0tleURvd24uYXJyb3dVcCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICBzdGF0ZS5pc0tleURvd24uYXJyb3dEb3duID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwielwiOlxuICAgICAgICBzdGF0ZS5pc0tleURvd24ueiA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCAoZXZlbnQpID0+IHtcbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgY2FzZSBcIkFycm93TGVmdFwiOlxuICAgICAgICBzdGF0ZS5pc0tleURvd24uYXJyb3dMZWZ0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgc3RhdGUuaXNLZXlEb3duLmFycm93UmlnaHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgICBzdGF0ZS5pc0tleURvd24uYXJyb3dVcCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgICAgc3RhdGUuaXNLZXlEb3duLmFycm93RG93biA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgIHN0YXRlLmlzS2V5RG93bi56ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTtcblxuICBsZXQgc3RhcnRUaW1lOiBudW1iZXI7XG4gIChmdW5jdGlvbiB3YWl0KCkge1xuICAgIGNvbnN0IGlzUmVhZHkgPSBjaGFyYWN0ZXJzLmV2ZXJ5KChjKSA9PiBjLnJlYWR5KCkpO1xuICAgIGlmICghaXNSZWFkeSkge1xuICAgICAgc2V0VGltZW91dCh3YWl0LCAxMDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHJlbmRlcigpO1xuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICBjdHguZ2xvYmFsQWxwaGEgPSAxLjA7XG4gICAgdXRpbC5kcmF3UmVjdChjdHgsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCwgXCIjZWVlZWVlXCIpO1xuXG4gICAgY2hhcmFjdGVycy5mb3JFYWNoKChjKSA9PiBjLnVwZGF0ZSgpKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfVxufTtcbiIsImV4cG9ydCBjb25zdCBkcmF3UmVjdCA9IChcbiAgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICB4OiBudW1iZXIsXG4gIHk6IG51bWJlcixcbiAgd2lkdGg6IG51bWJlcixcbiAgaGVpZ2h0OiBudW1iZXIsXG4gIGNvbG9yOiBzdHJpbmdcbikgPT4ge1xuICBpZiAoY29sb3IgIT0gbnVsbCkge1xuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY29sb3I7XG4gIH1cbiAgY29udGV4dC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9