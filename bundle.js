(()=>{"use strict";var t,e,i,n,o,r,s,a,c,h,f,p,u,l,d,y,v,g,w,m,b,x,A,k,_,S,C,E,M,O,j,P,T,B,z={426:(t,e,i)=>{i.d(e,{Z:()=>a});var n=i(15),o=i.n(n),r=i(645),s=i.n(r)()(o());s.push([t.id,'@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,gBAAgB;;AAEhB;EACE,WAAW;EACX,YAAY;AACd;;AAEA;;EAEE,yBAAyB;EACzB,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:['@charset "utf-8";\n\n* {\n  margin: 0px;\n  padding: 0px;\n}\n\nhtml,\nbody {\n  background-color: #555555;\n  color: #f0f0f0;\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  padding-top: 10px;\n}\n\ncanvas {\n  margin: 0px auto;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var r=0;r<this.length;r++){var s=this[r][0];null!=s&&(o[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);n&&o[c[0]]||(i&&(c[2]?c[2]="".concat(i," and ").concat(c[2]):c[2]=i),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}t.exports=function(t){var i,n,o=(n=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var i=[],n=!0,o=!1,r=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(i.push(s.value),!e||i.length!==e);n=!0);}catch(t){o=!0,r=t}finally{try{n||null==a.return||a.return()}finally{if(o)throw r}}return i}}(i,n)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],s=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),f=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[r].concat(f).concat([h]).join("\n")}return[r].join("\n")}},379:(t,e,i)=>{var n,o=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),r=[];function s(t){for(var e=-1,i=0;i<r.length;i++)if(r[i].identifier===t){e=i;break}return e}function a(t,e){for(var i={},n=[],o=0;o<t.length;o++){var a=t[o],c=e.base?a[0]+e.base:a[0],h=i[c]||0,f="".concat(c," ").concat(h);i[c]=h+1;var p=s(f),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(r[p].references++,r[p].updater(u)):r.push({identifier:f,updater:y(u,e),references:1}),n.push(f)}return n}function c(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var r=i.nc;r&&(n.nonce=r)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,f=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function p(t,e,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=f(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}function u(t,e,i){var n=i.css,o=i.media,r=i.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var l=null,d=0;function y(t,e){var i,n,o;if(e.singleton){var r=d++;i=l||(l=c(e)),n=p.bind(null,i,r,!1),o=p.bind(null,i,r,!0)}else i=c(e),n=u.bind(null,i,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var o=s(i[n]);r[o].references--}for(var c=a(t,e),h=0;h<i.length;h++){var f=s(i[h]);0===r[f].references&&(r[f].updater(),r.splice(f,1))}i=c}}}},912:(t,e,i)=>{t.exports=i.p+"a22c11e4c60818a27c90.png"},321:(t,e,i)=>{t.exports=i.p+"f4a1ccee5877de288df2.png"},403:(t,e,i)=>{t.exports=i.p+"557374f791944ecf6c01.png"},657:(t,e,i)=>{t.exports=i.p+"a98f39017db8c62ba701.png"},265:(t,e,i)=>{t.exports=i.p+"fa038d64bc176df871b8.png"},446:(t,e,i)=>{t.exports=i.p+"82300f5733384f973929.png"},18:(t,e,i)=>{t.exports=i.p+"4233d78f478d9acd0230.png"},734:(t,e,i)=>{t.exports=i.p+"ff33312c29e171e364d7.png"}},I={};function R(t){if(I[t])return I[t].exports;var e=I[t]={id:t,exports:{}};return z[t](e,e.exports,R),e.exports}R.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return R.d(e,{a:e}),e},R.d=(t,e)=>{for(var i in e)R.o(e,i)&&!R.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},R.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),R.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;R.g.importScripts&&(t=R.g.location+"");var e=R.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),R.p=t})(),e=function(t,e,i,n,o,r){null!=o&&(t.fillStyle=o),t.fillText(e,i,n,r)},i=function(t){return t/360*Math.PI*2},n=function(t,e){return Array.from({length:t}).map(e)},t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)},o=function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)},r=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.set=function(t,e){this.x=t,this.y=e},t.new=function(e,i){return void 0===e&&(e=0),void 0===i&&(i=-1),new t(e,i)},t.unit=function(e,i){var n=this.dot(e,i);return new t(e/n,i/n)},t.fromAngle=function(e){return new t(Math.cos(e),Math.sin(e))},t.dot=function(t,e){return function(t,e){return Math.sqrt(t*t+e*e)}(t,e)},Object.defineProperty(t.prototype,"angle",{get:function(){var t=Math.asin(this.y);return this.x>=0?t:Math.PI-t},enumerable:!1,configurable:!0}),t.prototype.setAngle=function(t){this.set(Math.cos(t),Math.sin(t))},t.prototype.distance=function(e){var i=this.x-e.x,n=this.y-e.y;return t.dot(i,n)},t.prototype.cross=function(t){return this.x*t.y-this.y*t.x},t.prototype.rotate=function(t){var e=Math.sin(t),i=Math.cos(t);this.x=this.x*i+this.y*-e,this.y=this.x*e+this.y*i},t}(),s=function(){function t(){}return t.prototype.update=function(){},t.prototype.ready=function(){return!0},t}(),a=function(t){function e(e,i,n){var o,s,a,c,h=n.x,f=void 0===h?0:h,p=n.y,u=void 0===p?0:p,l=n.w,d=n.h,y=n.life,v=void 0===y?0:y,g=t.call(this)||this;return g.state=e,g.position=new r(f,u),g.vector=r.new(),g.width=l,g.height=d,g.life=v,o=g,s=void 0,c=function(){var t;return function(t,e){var i,n,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&r[0]?n.return:r[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,r[1])).done)return o;switch(n=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,n=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],n=0}finally{i=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(e){switch(e.label){case 0:return t=this,[4,(n=i,new Promise((function(t,e){var i=new Image;i.addEventListener("load",(function(){t(i)})),i.src=n})))];case 1:return t.image=e.sent(),[2]}var n}))},new((a=void 0)||(a=Promise))((function(t,e){function i(t){try{r(c.next(t))}catch(t){e(t)}}function n(t){try{r(c.throw(t))}catch(t){e(t)}}function r(e){var o;e.done?t(e.value):(o=e.value,o instanceof a?o:new a((function(t){t(o)}))).then(i,n)}r((c=c.apply(o,s||[])).next())})),g}return o(e,t),e.prototype.setVector=function(t,e){this.vector.set(t,e)},e.prototype.setVectorFromAngle=function(t){this.vector.setAngle(t)},e.prototype.draw=function(){if(this.image){var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,this.position.x-t,this.position.y-e,this.width,this.height)}},e.prototype.rotationDraw=function(){if(this.image){this.state.ctx.save(),this.state.ctx.translate(this.position.x,this.position.y),this.state.ctx.rotate(this.vector.angle-1.5*Math.PI);var t=this.width/2,e=this.height/2;this.state.ctx.drawImage(this.image,-t,-e,this.width,this.height),this.state.ctx.restore()}},e.prototype.update=function(){},e.prototype.ready=function(){return!!this.image},e}(s),c=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),h=function(t){function e(e,i,n,o,r){var s=t.call(this,e,i,n)||this;return s.speed=3,s.frame=0,s.type="default",s.attackTarget=o,s.shotArray=r,s}return c(e,t),e.prototype.set=function(t,e,i,n){void 0===i&&(i=1),void 0===n&&(n="default"),this.position.set(t,e),this.life=i,this.type=n,this.frame=0},e.prototype.fire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=5);for(var n=0,o=this.shotArray;n<o.length;n++){var r=o[n];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.update=function(){if(!(this.life<=0)){switch(this.type){case"default":100==this.frame&&this.fire(),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed;break;case"wave":if(this.frame%60==0){var t=this.attackTarget.position.x-this.position.x,e=this.attackTarget.position.y-this.position.y,i=r.unit(t,e);this.fire(i.x,i.y,4)}this.position.x+=Math.sin(this.frame/10),this.position.y+=2;break;case"large":if(this.frame%50==0)for(var n=0;n<360;n+=45){var o=n*Math.PI/180;this.fire(Math.cos(o),Math.sin(o),3)}this.position.x+=2*Math.sin((this.frame+90)/50),this.position.y+=1}this.position.y-this.height>this.state.ctx.canvas.height&&(this.life=0),this.draw(),this.frame++}},e}(a),f=function(t){function e(e,i,n,o,r,s){var a=t.call(this,e,i,n,o,r)||this;return a.mode="",a.frame=0,a.speed=3,a.homingArray=s,a}return c(e,t),e.prototype.setMode=function(t){this.mode=t},e.prototype.fire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=5);for(var n=0,o=this.shotArray;n<o.length;n++){var r=o[n];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.homingFire=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=1),void 0===i&&(i=3);for(var n=0,o=this.homingArray;n<o.length;n++){var r=o[n];if(r.life<=0){r.set(this.position.x,this.position.y),r.setSpeed(i),r.setVector(t,e);break}}},e.prototype.update=function(){if(!(this.life<=0)){switch(this.mode){case"invade":this.position.y+=this.speed,this.position.y>100&&(this.position.y=100,this.mode="floating",this.frame=0);break;case"escape":this.position.y-=this.speed,this.position.y<-this.height&&(this.life=0);break;case"floating":if(this.frame%1e3<500){if(this.frame%200>140&&this.frame%10==0){var t=this.attackTarget.position.x-this.position.x,e=this.attackTarget.position.y-this.position.y,i=r.unit(t,e);this.fire(i.x,i.y,3)}}else this.frame%50==0&&this.homingFire(0,1,3.5);this.position.x+=2*Math.cos(this.frame/100)}this.draw(),this.frame++}},e}(h),p=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),u=function(t){function e(e,i,n,o,r,s){void 0===s&&(s="#ff1166");var a=t.call(this)||this;return a.life=!1,a.fires=[],a.startTime=0,a.ctx=e,a.radius=i,a.count=n,a.size=o,a.timeRange=r,a.color=s,a}return p(e,t),e.prototype.set=function(t,e){var i=this;this.fires=n(this.count,(function(){return{position:new r(t,e),vector:r.fromAngle(Math.random()*Math.PI*2),size:(.5*Math.random()+.5)*i.size}})),this.life=!0,this.startTime=Date.now()},e.prototype.update=function(){if(this.life){this.ctx.fillStyle=this.color,this.ctx.globalAlpha=.5;for(var t=(Date.now()-this.startTime)/1e3,e=1-(h=1-Math.min(t/this.timeRange,1))*h*h*h,i=1-e,n=0,o=this.fires;n<o.length;n++){var r=o[n],s=this.radius*e,a=r.position.x+r.vector.x*s,c=r.position.y+r.vector.y*s;this.ctx.fillRect(a-r.size*i/2,c-r.size*i/2,r.size*i,r.size*i)}e>=1&&(this.life=!1)}var h},e}(s),l=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),d=function(t){function e(e,i,n,o){var r=o.shot,s=o.singleShot,a=t.call(this,e,i,n)||this;return a.speed=3,a.shotCheckCounter=0,a.shotInterval=10,a.isComing=!1,a.state=e,a.shotArray=r,a.singleShotArray=s,a}return l(e,t),e.prototype.update=function(){if(!(this.life<=0)&&this.comingStart&&this.comingStartPosition&&this.comingEndPosition){var t=Date.now();if(this.isComing){var e=(t-this.comingStart)/1e3,n=this.comingStartPosition.y-50*e;n<=this.comingEndPosition.y&&(this.isComing=!1,n=this.comingEndPosition.y),this.position.set(this.position.x,n),t%100<50&&(this.state.ctx.globalAlpha=.5)}else if(this.state.key.arrowLeft&&(this.position.x-=this.speed),this.state.key.arrowRight&&(this.position.x+=this.speed),this.state.key.arrowUp&&(this.position.y-=this.speed),this.state.key.arrowDown&&(this.position.y+=this.speed),this.position.set(Math.min(Math.max(this.position.x,0),this.state.ctx.canvas.width),Math.min(Math.max(this.position.y,0),this.state.ctx.canvas.height)),this.state.key.z&&this.shotCheckCounter>=0){for(var o=0,r=this.shotArray;o<r.length;o++){var s=r[o];if(s.life<=0){s.set(this.position.x,this.position.y),s.setPower(2),this.shotCheckCounter=-this.shotInterval;break}}for(var a=0;a<this.singleShotArray.length;a+=2)if(this.singleShotArray[a].life<=0&&this.singleShotArray[a+1].life<=0){var c=i(280),h=i(260);this.singleShotArray[a].set(this.position.x,this.position.y),this.singleShotArray[a].setVectorFromAngle(c),this.singleShotArray[a+1].set(this.position.x,this.position.y),this.singleShotArray[a+1].setVectorFromAngle(h),this.shotCheckCounter=-this.shotInterval;break}}this.shotCheckCounter++,this.draw(),this.state.ctx.globalAlpha=1}},e.prototype.setComing=function(t,e,i,n){this.life=1,this.isComing=!0,this.comingStart=Date.now(),this.position.set(t,e),this.comingStartPosition=new r(t,e),this.comingEndPosition=new r(i,n)},e}(a),y=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),v=function(t){function e(e,i,n){var o=t.call(this,e,i,n)||this;return o.speed=7,o.power=1,o.targetArray=[],o.explosionArray=[],o}return y(e,t),e.prototype.set=function(t,e,i,n){void 0===i&&(i=7),void 0===n&&(n=1),this.position.set(t,e),this.life=1},e.prototype.setSpeed=function(t){t<=0||(this.speed=t)},e.prototype.setPower=function(t){t<=0||(this.power=t)},e.prototype.setTargets=function(t){this.targetArray=t},e.prototype.setExplosions=function(t){this.explosionArray=t},e.prototype.hasCollision=function(t){return this.position.distance(t.position)<=(this.width+t.width)/4},e.prototype.update=function(){var t=this;this.life<=0||((this.position.x+this.width<0||this.position.x-this.width>this.state.ctx.canvas.width||this.position.y+this.height<0||this.position.y-this.height>this.state.ctx.canvas.height)&&(this.life=0),this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.life>0&&this.targetArray.forEach((function(e){if(!(e.life<=0)&&t.hasCollision(e)){if(e instanceof d&&e.isComing)return;if(e.life-=t.power,e.life<=0)for(var i=0,n=t.explosionArray;i<n.length;i++){var o=n[i];if(!o.life){o.set(e.position.x,e.position.y);break}}e instanceof h&&("large"===e.type?t.state.gameScore.add(1e3):t.state.gameScore.add(100)),t.life=0}})),this.rotationDraw())},e}(a),g=function(t){function e(e,i,n){var o=t.call(this,e,i,n)||this;return o.frame=0,o}return y(e,t),e.prototype.set=function(e,i,n,o){t.prototype.set.call(this,e,i,n,o),this.frame=0},e.prototype.update=function(){var t=this;if(!(this.life<=0)){(this.position.x+this.width<0||this.position.x-this.width>this.state.ctx.canvas.width||this.position.y+this.height<0||this.position.y-this.height>this.state.ctx.canvas.height)&&(this.life=0);var e=this.targetArray[0];if(this.frame<100){var i=r.unit(e.position.x-this.position.x,e.position.y-this.position.y);this.vector=r.unit(this.vector.x,this.vector.y);var n=this.vector.cross(i),o=Math.PI/180;n>0?this.vector.rotate(o):n<0&&this.vector.rotate(-o)}this.position.x+=this.vector.x*this.speed,this.position.y+=this.vector.y*this.speed,this.targetArray.forEach((function(e){if(!(t.life<=0||e.life<=0)&&t.position.distance(e.position)<=(t.width+e.width)/4){if(e instanceof d&&!0===e.isComing)return;if(e.life-=t.power,e.life<=0){for(var i=0;i<t.explosionArray.length;++i)if(!0!==t.explosionArray[i].life){t.explosionArray[i].set(e.position.x,e.position.y);break}if(e instanceof h){var n=100;"large"===e.type&&(n=1e3),t.state.gameScore.add(n)}}t.life=0}})),this.rotationDraw(),this.frame++}},e}(v),w=function(){function t(){this.scene={},this.activeScene=null,this.startTime=Date.now(),this.frame=-1}return t.prototype.add=function(t,e){this.scene[t]=e},t.prototype.use=function(t){t in this.scene&&(this.activeScene=this.scene[t],this.startTime=Date.now(),this.frame=-1)},t.prototype.update=function(){var t,e=(Date.now()-this.startTime)/1e3;null===(t=this.activeScene)||void 0===t||t.call(this,e),this.frame++},t}(),m=function(){function t(){this.score=0}return t.prototype.add=function(t){this.score=Math.min(this.score+t,99999)},t.prototype.reset=function(){this.score=0},t.prototype.display=function(){return t=this.score,(new Array(5).join("0")+t).slice(-5);var t},t}(),b=R(446),x=R(18),A=R(734),k=R(657),_=R(321),S=R(403),C=R(912),E=R(265),M=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),O=function(t){function e(e,i,n,o){void 0===o&&(o="#ffffff");var s=t.call(this)||this;return s.position=new r(0,0),s.state=e,s.size=i,s.speed=n,s.color=o,s}return M(e,t),e.prototype.set=function(t,e){this.position.set(t,e)},e.prototype.update=function(){this.state.ctx.globalAlpha=1,this.state.ctx.fillStyle=this.color,this.position.y+=this.speed,this.state.ctx.fillRect(this.position.x-this.size/2,this.position.y-this.size/2,this.size,this.size),this.position.y+this.size>this.state.ctx.canvas.height&&(this.position.y=-this.size)},e}(s),j=function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<i;e++)for(var r=arguments[e],s=0,a=r.length;s<a;s++,o++)n[o]=r[s];return n},P=R(379),T=R.n(P),B=R(426),T()(B.Z,{insert:"head",singleton:!1}),B.Z.locals,window.addEventListener("load",(function(){return t=void 0,o=void 0,s=function(){function t(){var i,n,r;s.globalAlpha=1,i=s,n=o.width,r=o.height,i.fillStyle="#111122",i.fillRect(0,0,n,r),s.font="bold 24px monospace",e(s,a.gameScore.display(),30,50,"#ffffff"),D.update(),p.forEach((function(t){return t.update()})),requestAnimationFrame(t)}var o,r,s,a,c,p,l,y,M,P,T,B,z,I,R,D;return function(t,e){var i,n,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,n&&(o=2&r[0]?n.return:r[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,r[1])).done)return o;switch(n=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,n=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){s.label=r[1];break}if(6===r[0]&&s.label<o[1]){s.label=o[1],o=r;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(r);break}o[2]&&s.ops.pop(),s.trys.pop();continue}r=e.call(t,s)}catch(t){r=[6,t],n=0}finally{i=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}}(this,(function(L){return o=document.querySelector("#screen"),r=640,o.width=r,o.height=480,s=o.getContext("2d"),a=function(t){return{ctx:t,gameScore:new m,key:{arrowLeft:!1,arrowRight:!1,arrowDown:!1,arrowUp:!1,z:!1}}}(s),c=!1,p=[],l=n(10,(function(){return new v(a,x,{w:32,h:32})})),y=n(20,(function(){return new v(a,A,{w:32,h:32})})),p.push.apply(p,j(l,y)),M=new d(a,b,{w:64,h:64},{shot:l,singleShot:y}),p.push(M),M.setComing(320,480,320,380),P=n(50,(function(){return new g(a,E,{w:32,h:32})})),T=j(n(50,(function(){return new v(a,S,{w:48,h:48})})),P),p.push.apply(p,T),B=j(n(20,(function(){return new h(a,k,{w:48,h:48},M,T)})),n(5,(function(){return new h(a,_,{w:64,h:64},M,T)}))),p.push.apply(p,B),z=n(10,(function(){return new u(s,100,15,40,1)})),p.push.apply(p,z),j(l,y).forEach((function(t){t.setTargets(B),t.setExplosions(z)})),T.forEach((function(t){t.setTargets([M]),t.setExplosions(z)})),I=new f(a,C,{w:128,h:128},M,T,P),p.push(I),R=n(100,(function(){var t=1+2*Math.random(),e=1+3*Math.random(),i=new O(a,t,e);return i.set(Math.random()*r,480*Math.random()),i})),p.push.apply(p,R),(D=new w).add("intro",(function(t){t>3&&D.use("invade_default_type")})),D.add("invade_default_type",(function(t){if(D.frame%30==0)for(var e=0,n=B;e<n.length;e++){var o=n[e];if(o.life<=0){D.frame%60==0?(o.set(-o.width,30,2,"default"),o.setVectorFromAngle(i(30))):(o.set(r+o.width,30,2,"default"),o.setVectorFromAngle(i(150)));break}}270===D.frame&&D.use("blank"),M.life<=0&&D.use("gameover")})),D.add("blank",(function(t){150===D.frame&&D.use("invade_wave_move_type"),M.life<=0&&D.use("gameover")})),D.add("invade_wave_move_type",(function(t){if(D.frame%50==0)for(var e=0,i=B;e<i.length;e++){var n=i[e];if(n.life<=0){D.frame<=200?n.set(128,-n.height,2,"wave"):n.set(512,-n.height,2,"wave");break}}450===D.frame&&D.use("invade_large_type"),M.life<=0&&D.use("gameover")})),D.add("invade_large_type",(function(t){if(100===D.frame)for(var e=20;e<25;e++)if(B[e].life<=0){var i=B[e];i.set(320,-i.height,50,"large");break}500===D.frame&&D.use("invade_boss"),M.life<=0&&D.use("gameover")})),D.add("invade_boss",(function(t){0===D.frame&&(I.set(320,-I.height,250),I.setMode("invade")),M.life<=0&&(D.use("gameover"),I.setMode("escape")),I.life<=0&&D.use("intro")})),D.add("gameover",(function(t){var i=r-2*D.frame%960;s.font="bold 72px sans-serif",e(s,"GAME OVER",i,240,"#ff0000",320),c&&(c=!1,a.gameScore.reset(),M.setComing(320,530,320,380),D.use("intro"))})),D.use("intro"),window.addEventListener("keydown",(function(t){switch(t.key){case"ArrowLeft":a.key.arrowLeft=!0;break;case"ArrowRight":a.key.arrowRight=!0;break;case"ArrowUp":a.key.arrowUp=!0;break;case"ArrowDown":a.key.arrowDown=!0;break;case"z":a.key.z=!0;break;case"Enter":M.life<=0&&(c=!0)}})),window.addEventListener("keyup",(function(t){switch(t.key){case"ArrowLeft":a.key.arrowLeft=!1;break;case"ArrowRight":a.key.arrowRight=!1;break;case"ArrowUp":a.key.arrowUp=!1;break;case"ArrowDown":a.key.arrowDown=!1;break;case"z":a.key.z=!1}})),function e(){p.every((function(t){return t.ready()}))?(Date.now(),t()):setTimeout(e,100)}(),[2]}))},new((r=void 0)||(r=Promise))((function(e,i){function n(t){try{c(s.next(t))}catch(t){i(t)}}function a(t){try{c(s.throw(t))}catch(t){i(t)}}function c(t){var i;t.done?e(t.value):(i=t.value,i instanceof r?i:new r((function(t){t(i)}))).then(n,a)}c((s=s.apply(t,o||[])).next())}));var t,o,r,s}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,